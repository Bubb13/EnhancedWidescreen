
#include "InfinityLoader/lua_bindings_core_api.h"
#include "engine_structs_bg1.h"

static int tolua_get_CGameAnimation_m_animation(lua_State* L)
{
	CGameAnimation* self = (CGameAnimation*)tolua_tousertype_dynamic(L, 1, 0, "CGameAnimation");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_animation'", NULL);
	tolua_pushusertype(L, (void*)self->m_animation, "CGameAnimationType");
	return 1;
}

static int tolua_set_CGameAnimation_m_animation(lua_State* L)
{
	CGameAnimation* self = (CGameAnimation*)tolua_tousertype_dynamic(L, 1, 0, "CGameAnimation");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_animation'", NULL);
	self->m_animation = (CGameAnimationType*)tolua_tousertype_dynamic(L, 2, 0, "CGameAnimationType");
	return 0;
}

static int tolua_get_CGameAnimation_reference_m_animation(lua_State* L)
{
	CGameAnimation* self = (CGameAnimation*)tolua_tousertype_dynamic(L, 1, 0, "CGameAnimation");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_animation'", NULL);
	tolua_pushusertype(L, (void*)&self->m_animation, "Pointer<CGameAnimationType>");
	return 1;
}

static int tolua_get_CGameDialogSprite_m_dialogEntries(lua_State* L)
{
	CGameDialogSprite* self = (CGameDialogSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameDialogSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_dialogEntries'", NULL);
	tolua_pushusertype(L, (void*)self->m_dialogEntries, "Pointer<CGameDialogEntry>");
	return 1;
}

static int tolua_set_CGameDialogSprite_m_dialogEntries(lua_State* L)
{
	CGameDialogSprite* self = (CGameDialogSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameDialogSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_dialogEntries'", NULL);
	self->m_dialogEntries = (CGameDialogEntry**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CGameDialogEntry>");
	return 0;
}

static int tolua_get_CGameDialogSprite_reference_m_dialogEntries(lua_State* L)
{
	CGameDialogSprite* self = (CGameDialogSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameDialogSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_dialogEntries'", NULL);
	tolua_pushusertype(L, (void*)&self->m_dialogEntries, "Pointer<CGameDialogEntry*>");
	return 1;
}

static int tolua_get_CObList_CNode_pNext(lua_State* L)
{
	CObList_CNode* self = (CObList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CObList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'pNext'", NULL);
	tolua_pushusertype(L, (void*)self->pNext, "CObList_CNode");
	return 1;
}

static int tolua_set_CObList_CNode_pNext(lua_State* L)
{
	CObList_CNode* self = (CObList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CObList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'pNext'", NULL);
	self->pNext = (CObList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CObList_CNode");
	return 0;
}

static int tolua_get_CObList_CNode_reference_pNext(lua_State* L)
{
	CObList_CNode* self = (CObList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CObList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'pNext'", NULL);
	tolua_pushusertype(L, (void*)&self->pNext, "Pointer<CObList_CNode>");
	return 1;
}

static int tolua_get_CObList_CNode_pPrev(lua_State* L)
{
	CObList_CNode* self = (CObList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CObList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'pPrev'", NULL);
	tolua_pushusertype(L, (void*)self->pPrev, "CObList_CNode");
	return 1;
}

static int tolua_set_CObList_CNode_pPrev(lua_State* L)
{
	CObList_CNode* self = (CObList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CObList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'pPrev'", NULL);
	self->pPrev = (CObList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CObList_CNode");
	return 0;
}

static int tolua_get_CObList_CNode_reference_pPrev(lua_State* L)
{
	CObList_CNode* self = (CObList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CObList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'pPrev'", NULL);
	tolua_pushusertype(L, (void*)&self->pPrev, "Pointer<CObList_CNode>");
	return 1;
}

static int tolua_get_CObList_CNode_data(lua_State* L)
{
	CObList_CNode* self = (CObList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CObList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'data'", NULL);
	tolua_pushusertype(L, (void*)self->data, "CObject");
	return 1;
}

static int tolua_set_CObList_CNode_data(lua_State* L)
{
	CObList_CNode* self = (CObList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CObList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'data'", NULL);
	self->data = (CObject*)tolua_tousertype_dynamic(L, 2, 0, "CObject");
	return 0;
}

static int tolua_get_CObList_CNode_reference_data(lua_State* L)
{
	CObList_CNode* self = (CObList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CObList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'data'", NULL);
	tolua_pushusertype(L, (void*)&self->data, "Pointer<CObject>");
	return 1;
}

static int tolua_get_CPtrList_CNode_m_pNext(lua_State* L)
{
	CPtrList_CNode* self = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNext, "CPtrList_CNode");
	return 1;
}

static int tolua_set_CPtrList_CNode_m_pNext(lua_State* L)
{
	CPtrList_CNode* self = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	self->m_pNext = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CPtrList_CNode");
	return 0;
}

static int tolua_get_CPtrList_CNode_reference_m_pNext(lua_State* L)
{
	CPtrList_CNode* self = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNext, "Pointer<CPtrList_CNode>");
	return 1;
}

static int tolua_get_CPtrList_CNode_m_pPrev(lua_State* L)
{
	CPtrList_CNode* self = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	tolua_pushusertype(L, (void*)self->m_pPrev, "CPtrList_CNode");
	return 1;
}

static int tolua_set_CPtrList_CNode_m_pPrev(lua_State* L)
{
	CPtrList_CNode* self = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	self->m_pPrev = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CPtrList_CNode");
	return 0;
}

static int tolua_get_CPtrList_CNode_reference_m_pPrev(lua_State* L)
{
	CPtrList_CNode* self = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pPrev, "Pointer<CPtrList_CNode>");
	return 1;
}

static int tolua_get_CPtrList_CNode_m_pData(lua_State* L)
{
	CPtrList_CNode* self = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)self->m_pData, "UnmappedUserType");
	return 1;
}

static int tolua_set_CPtrList_CNode_m_pData(lua_State* L)
{
	CPtrList_CNode* self = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	self->m_pData = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CPtrList_CNode_reference_m_pData(lua_State* L)
{
	CPtrList_CNode* self = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList_CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pData, "VoidPointer");
	return 1;
}

static int tolua_get_CWeather_m_snowStorm(lua_State* L)
{
	CWeather* self = (CWeather*)tolua_tousertype_dynamic(L, 1, 0, "CWeather");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_snowStorm'", NULL);
	tolua_pushusertype(L, (void*)&self->m_snowStorm, "CSnowStorm");
	return 1;
}

static int tolua_get_CWeather_m_rainStorm(lua_State* L)
{
	CWeather* self = (CWeather*)tolua_tousertype_dynamic(L, 1, 0, "CWeather");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rainStorm'", NULL);
	tolua_pushusertype(L, (void*)&self->m_rainStorm, "CRainStorm");
	return 1;
}

static int tolua_get_Primitive___int8__value(lua_State* L)
{
	Primitive<__int8>* self = (Primitive<__int8>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<__int8>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive___int8__value(lua_State* L)
{
	Primitive<__int8>* self = (Primitive<__int8>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<__int8>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<__int8>(L, "value");
	return 0;
}

static int tolua_get_Primitive___int8__reference_value(lua_State* L)
{
	Primitive<__int8>* self = (Primitive<__int8>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<__int8>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<__int8>");
	return 1;
}

static int tolua_get_Primitive_int32_t__value(lua_State* L)
{
	Primitive<int32_t>* self = (Primitive<int32_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int32_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_int32_t__value(lua_State* L)
{
	Primitive<int32_t>* self = (Primitive<int32_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int32_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<int32_t>(L, "value");
	return 0;
}

static int tolua_get_Primitive_int32_t__reference_value(lua_State* L)
{
	Primitive<int32_t>* self = (Primitive<int32_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int32_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<int32_t>");
	return 1;
}

static int tolua_get_Primitive_uint32_t__value(lua_State* L)
{
	Primitive<uint32_t>* self = (Primitive<uint32_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint32_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_uint32_t__value(lua_State* L)
{
	Primitive<uint32_t>* self = (Primitive<uint32_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint32_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<uint32_t>(L, "value");
	return 0;
}

static int tolua_get_Primitive_uint32_t__reference_value(lua_State* L)
{
	Primitive<uint32_t>* self = (Primitive<uint32_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint32_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<uint32_t>");
	return 1;
}

static int tolua_get_Primitive_HRESULT__value(lua_State* L)
{
	Primitive<HRESULT>* self = (Primitive<HRESULT>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<HRESULT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_HRESULT__value(lua_State* L)
{
	Primitive<HRESULT>* self = (Primitive<HRESULT>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<HRESULT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<HRESULT>(L, "value");
	return 0;
}

static int tolua_get_Primitive_HRESULT__reference_value(lua_State* L)
{
	Primitive<HRESULT>* self = (Primitive<HRESULT>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<HRESULT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<HRESULT>");
	return 1;
}

static int tolua_get_Primitive_byte__value(lua_State* L)
{
	Primitive<byte>* self = (Primitive<byte>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<byte>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_byte__value(lua_State* L)
{
	Primitive<byte>* self = (Primitive<byte>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<byte>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<byte>(L, "value");
	return 0;
}

static int tolua_get_Primitive_byte__reference_value(lua_State* L)
{
	Primitive<byte>* self = (Primitive<byte>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<byte>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<byte>");
	return 1;
}

static int tolua_get_Primitive_float__value(lua_State* L)
{
	Primitive<float>* self = (Primitive<float>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<float>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushnumber(L, (lua_Number)self->value);
	return 1;
}

static int tolua_set_Primitive_float__value(lua_State* L)
{
	Primitive<float>* self = (Primitive<float>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<float>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tonumber<float>(L, "value");
	return 0;
}

static int tolua_get_Primitive_float__reference_value(lua_State* L)
{
	Primitive<float>* self = (Primitive<float>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<float>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<float>");
	return 1;
}

static int tolua_get_Primitive_BOOL__value(lua_State* L)
{
	Primitive<BOOL>* self = (Primitive<BOOL>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<BOOL>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_BOOL__value(lua_State* L)
{
	Primitive<BOOL>* self = (Primitive<BOOL>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<BOOL>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<BOOL>(L, "value");
	return 0;
}

static int tolua_get_Primitive_BOOL__reference_value(lua_State* L)
{
	Primitive<BOOL>* self = (Primitive<BOOL>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<BOOL>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<BOOL>");
	return 1;
}

static int tolua_get_Primitive_ushort__value(lua_State* L)
{
	Primitive<ushort>* self = (Primitive<ushort>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<ushort>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_ushort__value(lua_State* L)
{
	Primitive<ushort>* self = (Primitive<ushort>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<ushort>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<ushort>(L, "value");
	return 0;
}

static int tolua_get_Primitive_ushort__reference_value(lua_State* L)
{
	Primitive<ushort>* self = (Primitive<ushort>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<ushort>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<ushort>");
	return 1;
}

static int tolua_get_Primitive_uint16_t__value(lua_State* L)
{
	Primitive<uint16_t>* self = (Primitive<uint16_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint16_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_uint16_t__value(lua_State* L)
{
	Primitive<uint16_t>* self = (Primitive<uint16_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint16_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<uint16_t>(L, "value");
	return 0;
}

static int tolua_get_Primitive_uint16_t__reference_value(lua_State* L)
{
	Primitive<uint16_t>* self = (Primitive<uint16_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint16_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<uint16_t>");
	return 1;
}

static int tolua_get_Primitive_int__value(lua_State* L)
{
	Primitive<int>* self = (Primitive<int>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_int__value(lua_State* L)
{
	Primitive<int>* self = (Primitive<int>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<int>(L, "value");
	return 0;
}

static int tolua_get_Primitive_int__reference_value(lua_State* L)
{
	Primitive<int>* self = (Primitive<int>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<int>");
	return 1;
}

static int tolua_get_Primitive_LONG__value(lua_State* L)
{
	Primitive<LONG>* self = (Primitive<LONG>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<LONG>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_LONG__value(lua_State* L)
{
	Primitive<LONG>* self = (Primitive<LONG>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<LONG>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<LONG>(L, "value");
	return 0;
}

static int tolua_get_Primitive_LONG__reference_value(lua_State* L)
{
	Primitive<LONG>* self = (Primitive<LONG>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<LONG>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<LONG>");
	return 1;
}

static int tolua_get_Primitive_uintptr_t__value(lua_State* L)
{
	Primitive<uintptr_t>* self = (Primitive<uintptr_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uintptr_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_uintptr_t__value(lua_State* L)
{
	Primitive<uintptr_t>* self = (Primitive<uintptr_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uintptr_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<uintptr_t>(L, "value");
	return 0;
}

static int tolua_get_Primitive_uintptr_t__reference_value(lua_State* L)
{
	Primitive<uintptr_t>* self = (Primitive<uintptr_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uintptr_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<uintptr_t>");
	return 1;
}

static int tolua_get_Primitive___int64__value(lua_State* L)
{
	Primitive<__int64>* self = (Primitive<__int64>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<__int64>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive___int64__value(lua_State* L)
{
	Primitive<__int64>* self = (Primitive<__int64>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<__int64>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<__int64>(L, "value");
	return 0;
}

static int tolua_get_Primitive___int64__reference_value(lua_State* L)
{
	Primitive<__int64>* self = (Primitive<__int64>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<__int64>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<__int64>");
	return 1;
}

static int tolua_get_Primitive_short__value(lua_State* L)
{
	Primitive<short>* self = (Primitive<short>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<short>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_short__value(lua_State* L)
{
	Primitive<short>* self = (Primitive<short>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<short>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<short>(L, "value");
	return 0;
}

static int tolua_get_Primitive_short__reference_value(lua_State* L)
{
	Primitive<short>* self = (Primitive<short>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<short>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<short>");
	return 1;
}

static int tolua_get_Primitive___int16__value(lua_State* L)
{
	Primitive<__int16>* self = (Primitive<__int16>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<__int16>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive___int16__value(lua_State* L)
{
	Primitive<__int16>* self = (Primitive<__int16>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<__int16>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<__int16>(L, "value");
	return 0;
}

static int tolua_get_Primitive___int16__reference_value(lua_State* L)
{
	Primitive<__int16>* self = (Primitive<__int16>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<__int16>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<__int16>");
	return 1;
}

static int tolua_get_Primitive_size_t__value(lua_State* L)
{
	Primitive<size_t>* self = (Primitive<size_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<size_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_size_t__value(lua_State* L)
{
	Primitive<size_t>* self = (Primitive<size_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<size_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<size_t>(L, "value");
	return 0;
}

static int tolua_get_Primitive_size_t__reference_value(lua_State* L)
{
	Primitive<size_t>* self = (Primitive<size_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<size_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<size_t>");
	return 1;
}

static int tolua_get_Primitive_bool__value(lua_State* L)
{
	Primitive<bool>* self = (Primitive<bool>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<bool>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushboolean(L, (bool)self->value);
	return 1;
}

static int tolua_set_Primitive_bool__value(lua_State* L)
{
	Primitive<bool>* self = (Primitive<bool>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<bool>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_toboolean(L, "value");
	return 0;
}

static int tolua_get_Primitive_bool__reference_value(lua_State* L)
{
	Primitive<bool>* self = (Primitive<bool>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<bool>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<bool>");
	return 1;
}

static int tolua_get_Primitive_UINT__value(lua_State* L)
{
	Primitive<UINT>* self = (Primitive<UINT>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<UINT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_UINT__value(lua_State* L)
{
	Primitive<UINT>* self = (Primitive<UINT>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<UINT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<UINT>(L, "value");
	return 0;
}

static int tolua_get_Primitive_UINT__reference_value(lua_State* L)
{
	Primitive<UINT>* self = (Primitive<UINT>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<UINT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<UINT>");
	return 1;
}

static int tolua_get_Primitive_int64_t__value(lua_State* L)
{
	Primitive<int64_t>* self = (Primitive<int64_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int64_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_int64_t__value(lua_State* L)
{
	Primitive<int64_t>* self = (Primitive<int64_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int64_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<int64_t>(L, "value");
	return 0;
}

static int tolua_get_Primitive_int64_t__reference_value(lua_State* L)
{
	Primitive<int64_t>* self = (Primitive<int64_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int64_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<int64_t>");
	return 1;
}

static int tolua_get_Primitive_char__value(lua_State* L)
{
	Primitive<char>* self = (Primitive<char>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<char>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushlstring(L, (const char*)self->value, 1);
	return 1;
}

static int tolua_set_Primitive_char__value(lua_State* L)
{
	Primitive<char>* self = (Primitive<char>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<char>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tochar(L, "value");
	return 0;
}

static int tolua_get_Primitive_char__reference_value(lua_State* L)
{
	Primitive<char>* self = (Primitive<char>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<char>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "char");
	return 1;
}

static int tolua_get_Primitive_char___value(lua_State* L)
{
	Primitive<char*>* self = (Primitive<char*>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<char*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "ConstCharString");
	return 1;
}

static int tolua_get_Primitive_double__value(lua_State* L)
{
	Primitive<double>* self = (Primitive<double>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<double>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushnumber(L, (lua_Number)self->value);
	return 1;
}

static int tolua_set_Primitive_double__value(lua_State* L)
{
	Primitive<double>* self = (Primitive<double>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<double>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tonumber<double>(L, "value");
	return 0;
}

static int tolua_get_Primitive_double__reference_value(lua_State* L)
{
	Primitive<double>* self = (Primitive<double>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<double>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<double>");
	return 1;
}

static int tolua_get_Primitive_uint8_t__value(lua_State* L)
{
	Primitive<uint8_t>* self = (Primitive<uint8_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint8_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_uint8_t__value(lua_State* L)
{
	Primitive<uint8_t>* self = (Primitive<uint8_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint8_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<uint8_t>(L, "value");
	return 0;
}

static int tolua_get_Primitive_uint8_t__reference_value(lua_State* L)
{
	Primitive<uint8_t>* self = (Primitive<uint8_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint8_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<uint8_t>");
	return 1;
}

static int tolua_get_Primitive_ptrdiff_t__value(lua_State* L)
{
	Primitive<ptrdiff_t>* self = (Primitive<ptrdiff_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<ptrdiff_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_ptrdiff_t__value(lua_State* L)
{
	Primitive<ptrdiff_t>* self = (Primitive<ptrdiff_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<ptrdiff_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<ptrdiff_t>(L, "value");
	return 0;
}

static int tolua_get_Primitive_ptrdiff_t__reference_value(lua_State* L)
{
	Primitive<ptrdiff_t>* self = (Primitive<ptrdiff_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<ptrdiff_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<ptrdiff_t>");
	return 1;
}

static int tolua_get_Primitive___int32__value(lua_State* L)
{
	Primitive<__int32>* self = (Primitive<__int32>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<__int32>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive___int32__value(lua_State* L)
{
	Primitive<__int32>* self = (Primitive<__int32>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<__int32>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<__int32>(L, "value");
	return 0;
}

static int tolua_get_Primitive___int32__reference_value(lua_State* L)
{
	Primitive<__int32>* self = (Primitive<__int32>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<__int32>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<__int32>");
	return 1;
}

static int tolua_get_Primitive_long_double__value(lua_State* L)
{
	Primitive<long double>* self = (Primitive<long double>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<long double>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushnumber(L, (lua_Number)self->value);
	return 1;
}

static int tolua_set_Primitive_long_double__value(lua_State* L)
{
	Primitive<long double>* self = (Primitive<long double>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<long double>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tonumber<long double>(L, "value");
	return 0;
}

static int tolua_get_Primitive_long_double__reference_value(lua_State* L)
{
	Primitive<long double>* self = (Primitive<long double>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<long double>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<double>");
	return 1;
}

static int tolua_get_Primitive_int8_t__value(lua_State* L)
{
	Primitive<int8_t>* self = (Primitive<int8_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int8_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_int8_t__value(lua_State* L)
{
	Primitive<int8_t>* self = (Primitive<int8_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int8_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<int8_t>(L, "value");
	return 0;
}

static int tolua_get_Primitive_int8_t__reference_value(lua_State* L)
{
	Primitive<int8_t>* self = (Primitive<int8_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int8_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<int8_t>");
	return 1;
}

static int tolua_get_Primitive_int16_t__value(lua_State* L)
{
	Primitive<int16_t>* self = (Primitive<int16_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int16_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_int16_t__value(lua_State* L)
{
	Primitive<int16_t>* self = (Primitive<int16_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int16_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<int16_t>(L, "value");
	return 0;
}

static int tolua_get_Primitive_int16_t__reference_value(lua_State* L)
{
	Primitive<int16_t>* self = (Primitive<int16_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<int16_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<int16_t>");
	return 1;
}

static int tolua_get_Primitive_intptr_t__value(lua_State* L)
{
	Primitive<intptr_t>* self = (Primitive<intptr_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<intptr_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_intptr_t__value(lua_State* L)
{
	Primitive<intptr_t>* self = (Primitive<intptr_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<intptr_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<intptr_t>(L, "value");
	return 0;
}

static int tolua_get_Primitive_intptr_t__reference_value(lua_State* L)
{
	Primitive<intptr_t>* self = (Primitive<intptr_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<intptr_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<intptr_t>");
	return 1;
}

static int tolua_get_Primitive_DWORD__value(lua_State* L)
{
	Primitive<DWORD>* self = (Primitive<DWORD>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<DWORD>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_DWORD__value(lua_State* L)
{
	Primitive<DWORD>* self = (Primitive<DWORD>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<DWORD>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<DWORD>(L, "value");
	return 0;
}

static int tolua_get_Primitive_DWORD__reference_value(lua_State* L)
{
	Primitive<DWORD>* self = (Primitive<DWORD>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<DWORD>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<DWORD>");
	return 1;
}

static int tolua_get_Primitive_uint64_t__value(lua_State* L)
{
	Primitive<uint64_t>* self = (Primitive<uint64_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint64_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_uint64_t__value(lua_State* L)
{
	Primitive<uint64_t>* self = (Primitive<uint64_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint64_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<uint64_t>(L, "value");
	return 0;
}

static int tolua_get_Primitive_uint64_t__reference_value(lua_State* L)
{
	Primitive<uint64_t>* self = (Primitive<uint64_t>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint64_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<uint64_t>");
	return 1;
}

static int tolua_get_Primitive_INT__value(lua_State* L)
{
	Primitive<INT>* self = (Primitive<INT>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<INT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_INT__value(lua_State* L)
{
	Primitive<INT>* self = (Primitive<INT>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<INT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<INT>(L, "value");
	return 0;
}

static int tolua_get_Primitive_INT__reference_value(lua_State* L)
{
	Primitive<INT>* self = (Primitive<INT>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<INT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<INT>");
	return 1;
}

static int tolua_get_Primitive_uint__value(lua_State* L)
{
	Primitive<uint>* self = (Primitive<uint>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_uint__value(lua_State* L)
{
	Primitive<uint>* self = (Primitive<uint>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<uint>(L, "value");
	return 0;
}

static int tolua_get_Primitive_uint__reference_value(lua_State* L)
{
	Primitive<uint>* self = (Primitive<uint>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<uint>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<uint>");
	return 1;
}

static int tolua_get_Primitive_long__value(lua_State* L)
{
	Primitive<long>* self = (Primitive<long>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_long__value(lua_State* L)
{
	Primitive<long>* self = (Primitive<long>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<long>(L, "value");
	return 0;
}

static int tolua_get_Primitive_long__reference_value(lua_State* L)
{
	Primitive<long>* self = (Primitive<long>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<long>");
	return 1;
}

static int tolua_get_Primitive_LRESULT__value(lua_State* L)
{
	Primitive<LRESULT>* self = (Primitive<LRESULT>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<LRESULT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	lua_pushinteger(L, (lua_Integer)self->value);
	return 1;
}

static int tolua_set_Primitive_LRESULT__value(lua_State* L)
{
	Primitive<LRESULT>* self = (Primitive<LRESULT>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<LRESULT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	self->value = tolua_setter_tointeger<LRESULT>(L, "value");
	return 0;
}

static int tolua_get_Primitive_LRESULT__reference_value(lua_State* L)
{
	Primitive<LRESULT>* self = (Primitive<LRESULT>*)tolua_tousertype_dynamic(L, 1, 0, "Primitive<LRESULT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'value'", NULL);
	tolua_pushusertype(L, (void*)&self->value, "Primitive<LRESULT>");
	return 1;
}

static int tolua_get_RECT_left(lua_State* L)
{
	RECT* self = (RECT*)tolua_tousertype_dynamic(L, 1, 0, "RECT");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'left'", NULL);
	lua_pushinteger(L, (lua_Integer)self->left);
	return 1;
}

static int tolua_set_RECT_left(lua_State* L)
{
	RECT* self = (RECT*)tolua_tousertype_dynamic(L, 1, 0, "RECT");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'left'", NULL);
	self->left = tolua_setter_tointeger<LONG>(L, "left");
	return 0;
}

static int tolua_get_RECT_reference_left(lua_State* L)
{
	RECT* self = (RECT*)tolua_tousertype_dynamic(L, 1, 0, "RECT");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'left'", NULL);
	tolua_pushusertype(L, (void*)&self->left, "Primitive<LONG>");
	return 1;
}

static int tolua_get_RECT_top(lua_State* L)
{
	RECT* self = (RECT*)tolua_tousertype_dynamic(L, 1, 0, "RECT");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'top'", NULL);
	lua_pushinteger(L, (lua_Integer)self->top);
	return 1;
}

static int tolua_set_RECT_top(lua_State* L)
{
	RECT* self = (RECT*)tolua_tousertype_dynamic(L, 1, 0, "RECT");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'top'", NULL);
	self->top = tolua_setter_tointeger<LONG>(L, "top");
	return 0;
}

static int tolua_get_RECT_reference_top(lua_State* L)
{
	RECT* self = (RECT*)tolua_tousertype_dynamic(L, 1, 0, "RECT");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'top'", NULL);
	tolua_pushusertype(L, (void*)&self->top, "Primitive<LONG>");
	return 1;
}

static int tolua_get_RECT_right(lua_State* L)
{
	RECT* self = (RECT*)tolua_tousertype_dynamic(L, 1, 0, "RECT");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'right'", NULL);
	lua_pushinteger(L, (lua_Integer)self->right);
	return 1;
}

static int tolua_set_RECT_right(lua_State* L)
{
	RECT* self = (RECT*)tolua_tousertype_dynamic(L, 1, 0, "RECT");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'right'", NULL);
	self->right = tolua_setter_tointeger<LONG>(L, "right");
	return 0;
}

static int tolua_get_RECT_reference_right(lua_State* L)
{
	RECT* self = (RECT*)tolua_tousertype_dynamic(L, 1, 0, "RECT");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'right'", NULL);
	tolua_pushusertype(L, (void*)&self->right, "Primitive<LONG>");
	return 1;
}

static int tolua_get_RECT_bottom(lua_State* L)
{
	RECT* self = (RECT*)tolua_tousertype_dynamic(L, 1, 0, "RECT");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'bottom'", NULL);
	lua_pushinteger(L, (lua_Integer)self->bottom);
	return 1;
}

static int tolua_set_RECT_bottom(lua_State* L)
{
	RECT* self = (RECT*)tolua_tousertype_dynamic(L, 1, 0, "RECT");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'bottom'", NULL);
	self->bottom = tolua_setter_tointeger<LONG>(L, "bottom");
	return 0;
}

static int tolua_get_RECT_reference_bottom(lua_State* L)
{
	RECT* self = (RECT*)tolua_tousertype_dynamic(L, 1, 0, "RECT");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'bottom'", NULL);
	tolua_pushusertype(L, (void*)&self->bottom, "Primitive<LONG>");
	return 1;
}

static int tolua_get_VoidPointer_reference(lua_State* L)
{
	VoidPointer* self = (VoidPointer*)tolua_tousertype_dynamic(L, 1, 0, "VoidPointer");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "UnmappedUserType");
	return 1;
}

static int tolua_set_VoidPointer_reference(lua_State* L)
{
	VoidPointer* self = (VoidPointer*)tolua_tousertype_dynamic(L, 1, 0, "VoidPointer");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CNetwork_m_bConnectionEstablished(lua_State* L)
{
	CNetwork* self = (CNetwork*)tolua_tousertype_dynamic(L, 1, 0, "CNetwork");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bConnectionEstablished'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bConnectionEstablished);
	return 1;
}

static int tolua_set_CNetwork_m_bConnectionEstablished(lua_State* L)
{
	CNetwork* self = (CNetwork*)tolua_tousertype_dynamic(L, 1, 0, "CNetwork");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bConnectionEstablished'", NULL);
	self->m_bConnectionEstablished = tolua_setter_tointeger<byte>(L, "m_bConnectionEstablished");
	return 0;
}

static int tolua_get_CNetwork_reference_m_bConnectionEstablished(lua_State* L)
{
	CNetwork* self = (CNetwork*)tolua_tousertype_dynamic(L, 1, 0, "CNetwork");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bConnectionEstablished'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bConnectionEstablished, "Primitive<byte>");
	return 1;
}

static int tolua_get_CUIControlButtonMapEntry_m_objectId(lua_State* L)
{
	CUIControlButtonMapEntry* self = (CUIControlButtonMapEntry*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMapEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_objectId'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_objectId);
	return 1;
}

static int tolua_set_CUIControlButtonMapEntry_m_objectId(lua_State* L)
{
	CUIControlButtonMapEntry* self = (CUIControlButtonMapEntry*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMapEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_objectId'", NULL);
	self->m_objectId = tolua_setter_tointeger<int>(L, "m_objectId");
	return 0;
}

static int tolua_get_CUIControlButtonMapEntry_reference_m_objectId(lua_State* L)
{
	CUIControlButtonMapEntry* self = (CUIControlButtonMapEntry*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMapEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_objectId'", NULL);
	tolua_pushusertype(L, (void*)&self->m_objectId, "Primitive<int>");
	return 1;
}

static int tolua_get_CSearchBitmap_m_pDynamicCost(lua_State* L)
{
	CSearchBitmap* self = (CSearchBitmap*)tolua_tousertype_dynamic(L, 1, 0, "CSearchBitmap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pDynamicCost'", NULL);
	tolua_pushusertype(L, (void*)self->m_pDynamicCost, "Primitive<byte>");
	return 1;
}

static int tolua_set_CSearchBitmap_m_pDynamicCost(lua_State* L)
{
	CSearchBitmap* self = (CSearchBitmap*)tolua_tousertype_dynamic(L, 1, 0, "CSearchBitmap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pDynamicCost'", NULL);
	self->m_pDynamicCost = (byte*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<byte>");
	return 0;
}

static int tolua_get_CSearchBitmap_reference_m_pDynamicCost(lua_State* L)
{
	CSearchBitmap* self = (CSearchBitmap*)tolua_tousertype_dynamic(L, 1, 0, "CSearchBitmap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pDynamicCost'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pDynamicCost, "Pointer<byte>");
	return 1;
}

static int tolua_get_CSearchBitmap_m_nWidth(lua_State* L)
{
	CSearchBitmap* self = (CSearchBitmap*)tolua_tousertype_dynamic(L, 1, 0, "CSearchBitmap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nWidth'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nWidth);
	return 1;
}

static int tolua_set_CSearchBitmap_m_nWidth(lua_State* L)
{
	CSearchBitmap* self = (CSearchBitmap*)tolua_tousertype_dynamic(L, 1, 0, "CSearchBitmap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nWidth'", NULL);
	self->m_nWidth = tolua_setter_tointeger<int>(L, "m_nWidth");
	return 0;
}

static int tolua_get_CSearchBitmap_reference_m_nWidth(lua_State* L)
{
	CSearchBitmap* self = (CSearchBitmap*)tolua_tousertype_dynamic(L, 1, 0, "CSearchBitmap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nWidth'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nWidth, "Primitive<int>");
	return 1;
}

static int tolua_get_CPtrList_m_pNodeHead(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeHead, "CPtrList_CNode");
	return 1;
}

static int tolua_set_CPtrList_m_pNodeHead(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	self->m_pNodeHead = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CPtrList_CNode");
	return 0;
}

static int tolua_get_CPtrList_reference_m_pNodeHead(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeHead, "Pointer<CPtrList_CNode>");
	return 1;
}

static int tolua_get_CPtrList_m_pNodeTail(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeTail, "CPtrList_CNode");
	return 1;
}

static int tolua_set_CPtrList_m_pNodeTail(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	self->m_pNodeTail = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CPtrList_CNode");
	return 0;
}

static int tolua_get_CPtrList_reference_m_pNodeTail(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeTail, "Pointer<CPtrList_CNode>");
	return 1;
}

static int tolua_get_CPtrList_m_nCount(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCount);
	return 1;
}

static int tolua_set_CPtrList_m_nCount(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	self->m_nCount = tolua_setter_tointeger<int>(L, "m_nCount");
	return 0;
}

static int tolua_get_CPtrList_reference_m_nCount(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCount, "Primitive<int>");
	return 1;
}

static int tolua_get_CPtrList_m_pNodeFree(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeFree, "CPtrList_CNode");
	return 1;
}

static int tolua_set_CPtrList_m_pNodeFree(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	self->m_pNodeFree = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CPtrList_CNode");
	return 0;
}

static int tolua_get_CPtrList_reference_m_pNodeFree(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeFree, "Pointer<CPtrList_CNode>");
	return 1;
}

static int tolua_get_CPtrList_m_pBlocks(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	tolua_pushusertype(L, (void*)self->m_pBlocks, "UnmappedUserType");
	return 1;
}

static int tolua_set_CPtrList_m_pBlocks(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	self->m_pBlocks = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CPtrList_reference_m_pBlocks(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pBlocks, "VoidPointer");
	return 1;
}

static int tolua_get_CPtrList_m_nBlockSize(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nBlockSize);
	return 1;
}

static int tolua_set_CPtrList_m_nBlockSize(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	self->m_nBlockSize = tolua_setter_tointeger<int>(L, "m_nBlockSize");
	return 0;
}

static int tolua_get_CPtrList_reference_m_nBlockSize(lua_State* L)
{
	CPtrList* self = (CPtrList*)tolua_tousertype_dynamic(L, 1, 0, "CPtrList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nBlockSize, "Primitive<int>");
	return 1;
}

static int tolua_get_CPoint_x(lua_State* L)
{
	CPoint* self = (CPoint*)tolua_tousertype_dynamic(L, 1, 0, "CPoint");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'x'", NULL);
	lua_pushinteger(L, (lua_Integer)self->x);
	return 1;
}

static int tolua_set_CPoint_x(lua_State* L)
{
	CPoint* self = (CPoint*)tolua_tousertype_dynamic(L, 1, 0, "CPoint");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'x'", NULL);
	self->x = tolua_setter_tointeger<int>(L, "x");
	return 0;
}

static int tolua_get_CPoint_reference_x(lua_State* L)
{
	CPoint* self = (CPoint*)tolua_tousertype_dynamic(L, 1, 0, "CPoint");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'x'", NULL);
	tolua_pushusertype(L, (void*)&self->x, "Primitive<int>");
	return 1;
}

static int tolua_get_CPoint_y(lua_State* L)
{
	CPoint* self = (CPoint*)tolua_tousertype_dynamic(L, 1, 0, "CPoint");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'y'", NULL);
	lua_pushinteger(L, (lua_Integer)self->y);
	return 1;
}

static int tolua_set_CPoint_y(lua_State* L)
{
	CPoint* self = (CPoint*)tolua_tousertype_dynamic(L, 1, 0, "CPoint");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'y'", NULL);
	self->y = tolua_setter_tointeger<int>(L, "y");
	return 0;
}

static int tolua_get_CPoint_reference_y(lua_State* L)
{
	CPoint* self = (CPoint*)tolua_tousertype_dynamic(L, 1, 0, "CPoint");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'y'", NULL);
	tolua_pushusertype(L, (void*)&self->y, "Primitive<int>");
	return 1;
}

static int tolua_get_CObList_m_pNodeHead(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeHead, "CObList_CNode");
	return 1;
}

static int tolua_set_CObList_m_pNodeHead(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	self->m_pNodeHead = (CObList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CObList_CNode");
	return 0;
}

static int tolua_get_CObList_reference_m_pNodeHead(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeHead, "Pointer<CObList_CNode>");
	return 1;
}

static int tolua_get_CObList_m_pNodeTail(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeTail, "CObList_CNode");
	return 1;
}

static int tolua_set_CObList_m_pNodeTail(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	self->m_pNodeTail = (CObList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CObList_CNode");
	return 0;
}

static int tolua_get_CObList_reference_m_pNodeTail(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeTail, "Pointer<CObList_CNode>");
	return 1;
}

static int tolua_get_CObList_m_nCount(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCount);
	return 1;
}

static int tolua_set_CObList_m_nCount(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	self->m_nCount = tolua_setter_tointeger<int>(L, "m_nCount");
	return 0;
}

static int tolua_get_CObList_reference_m_nCount(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCount, "Primitive<int>");
	return 1;
}

static int tolua_get_CObList_m_pNodeFree(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeFree, "CObList_CNode");
	return 1;
}

static int tolua_set_CObList_m_pNodeFree(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	self->m_pNodeFree = (CObList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CObList_CNode");
	return 0;
}

static int tolua_get_CObList_reference_m_pNodeFree(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeFree, "Pointer<CObList_CNode>");
	return 1;
}

static int tolua_get_CObList_m_pBlocks(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	tolua_pushusertype(L, (void*)self->m_pBlocks, "UnmappedUserType");
	return 1;
}

static int tolua_set_CObList_m_pBlocks(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	self->m_pBlocks = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CObList_reference_m_pBlocks(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pBlocks, "VoidPointer");
	return 1;
}

static int tolua_get_CObList_m_nBlockSize(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nBlockSize);
	return 1;
}

static int tolua_set_CObList_m_nBlockSize(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	self->m_nBlockSize = tolua_setter_tointeger<int>(L, "m_nBlockSize");
	return 0;
}

static int tolua_get_CObList_reference_m_nBlockSize(lua_State* L)
{
	CObList* self = (CObList*)tolua_tousertype_dynamic(L, 1, 0, "CObList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nBlockSize, "Primitive<int>");
	return 1;
}

static int tolua_get_UI_Control_st_id(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'id'", NULL);
	lua_pushinteger(L, (lua_Integer)self->id);
	return 1;
}

static int tolua_set_UI_Control_st_id(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'id'", NULL);
	self->id = tolua_setter_tointeger<int>(L, "id");
	return 0;
}

static int tolua_get_UI_Control_st_reference_id(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'id'", NULL);
	tolua_pushusertype(L, (void*)&self->id, "Primitive<int>");
	return 1;
}

static int tolua_get_UI_Control_st_x(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'x'", NULL);
	lua_pushinteger(L, (lua_Integer)self->x);
	return 1;
}

static int tolua_set_UI_Control_st_x(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'x'", NULL);
	self->x = tolua_setter_tointeger<short>(L, "x");
	return 0;
}

static int tolua_get_UI_Control_st_reference_x(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'x'", NULL);
	tolua_pushusertype(L, (void*)&self->x, "Primitive<short>");
	return 1;
}

static int tolua_get_UI_Control_st_y(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'y'", NULL);
	lua_pushinteger(L, (lua_Integer)self->y);
	return 1;
}

static int tolua_set_UI_Control_st_y(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'y'", NULL);
	self->y = tolua_setter_tointeger<short>(L, "y");
	return 0;
}

static int tolua_get_UI_Control_st_reference_y(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'y'", NULL);
	tolua_pushusertype(L, (void*)&self->y, "Primitive<short>");
	return 1;
}

static int tolua_get_UI_Control_st_width(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'width'", NULL);
	lua_pushinteger(L, (lua_Integer)self->width);
	return 1;
}

static int tolua_set_UI_Control_st_width(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'width'", NULL);
	self->width = tolua_setter_tointeger<short>(L, "width");
	return 0;
}

static int tolua_get_UI_Control_st_reference_width(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'width'", NULL);
	tolua_pushusertype(L, (void*)&self->width, "Primitive<short>");
	return 1;
}

static int tolua_get_UI_Control_st_height(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'height'", NULL);
	lua_pushinteger(L, (lua_Integer)self->height);
	return 1;
}

static int tolua_set_UI_Control_st_height(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'height'", NULL);
	self->height = tolua_setter_tointeger<short>(L, "height");
	return 0;
}

static int tolua_get_UI_Control_st_reference_height(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'height'", NULL);
	tolua_pushusertype(L, (void*)&self->height, "Primitive<short>");
	return 1;
}

static int tolua_get_UI_Control_st_type(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'type'", NULL);
	lua_pushinteger(L, (lua_Integer)self->type);
	return 1;
}

static int tolua_set_UI_Control_st_type(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'type'", NULL);
	self->type = tolua_setter_tointeger<byte>(L, "type");
	return 0;
}

static int tolua_get_UI_Control_st_reference_type(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'type'", NULL);
	tolua_pushusertype(L, (void*)&self->type, "Primitive<byte>");
	return 1;
}

static int tolua_get_UI_Control_st_flags(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'flags'", NULL);
	lua_pushinteger(L, (lua_Integer)self->flags);
	return 1;
}

static int tolua_set_UI_Control_st_flags(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'flags'", NULL);
	self->flags = tolua_setter_tointeger<byte>(L, "flags");
	return 0;
}

static int tolua_get_UI_Control_st_reference_flags(lua_State* L)
{
	UI_Control_st* self = (UI_Control_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_Control_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'flags'", NULL);
	tolua_pushusertype(L, (void*)&self->flags, "Primitive<byte>");
	return 1;
}

static int tolua_get_CVisibilityMap_m_pMap(lua_State* L)
{
	CVisibilityMap* self = (CVisibilityMap*)tolua_tousertype_dynamic(L, 1, 0, "CVisibilityMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pMap'", NULL);
	tolua_pushusertype(L, (void*)self->m_pMap, "Primitive<byte>");
	return 1;
}

static int tolua_set_CVisibilityMap_m_pMap(lua_State* L)
{
	CVisibilityMap* self = (CVisibilityMap*)tolua_tousertype_dynamic(L, 1, 0, "CVisibilityMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pMap'", NULL);
	self->m_pMap = (byte*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<byte>");
	return 0;
}

static int tolua_get_CVisibilityMap_reference_m_pMap(lua_State* L)
{
	CVisibilityMap* self = (CVisibilityMap*)tolua_tousertype_dynamic(L, 1, 0, "CVisibilityMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pMap'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pMap, "Pointer<byte>");
	return 1;
}

static int tolua_get_CVisibilityMap_m_nWidth(lua_State* L)
{
	CVisibilityMap* self = (CVisibilityMap*)tolua_tousertype_dynamic(L, 1, 0, "CVisibilityMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nWidth'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nWidth);
	return 1;
}

static int tolua_set_CVisibilityMap_m_nWidth(lua_State* L)
{
	CVisibilityMap* self = (CVisibilityMap*)tolua_tousertype_dynamic(L, 1, 0, "CVisibilityMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nWidth'", NULL);
	self->m_nWidth = tolua_setter_tointeger<short>(L, "m_nWidth");
	return 0;
}

static int tolua_get_CVisibilityMap_reference_m_nWidth(lua_State* L)
{
	CVisibilityMap* self = (CVisibilityMap*)tolua_tousertype_dynamic(L, 1, 0, "CVisibilityMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nWidth'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nWidth, "Primitive<short>");
	return 1;
}

static int tolua_get_CVisibilityMap_m_nHeight(lua_State* L)
{
	CVisibilityMap* self = (CVisibilityMap*)tolua_tousertype_dynamic(L, 1, 0, "CVisibilityMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nHeight'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nHeight);
	return 1;
}

static int tolua_set_CVisibilityMap_m_nHeight(lua_State* L)
{
	CVisibilityMap* self = (CVisibilityMap*)tolua_tousertype_dynamic(L, 1, 0, "CVisibilityMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nHeight'", NULL);
	self->m_nHeight = tolua_setter_tointeger<short>(L, "m_nHeight");
	return 0;
}

static int tolua_get_CVisibilityMap_reference_m_nHeight(lua_State* L)
{
	CVisibilityMap* self = (CVisibilityMap*)tolua_tousertype_dynamic(L, 1, 0, "CVisibilityMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nHeight'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nHeight, "Primitive<short>");
	return 1;
}

static int tolua_function_CVideoFunctions_Blt1(lua_State* L)
{
	CVideoFunctions* self = (CVideoFunctions*)tolua_tousertype_dynamic(L, 1, 0, "CVideoFunctions");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Blt1'", NULL);
	HRESULT returnVal = self->Blt1((CVideoFunctions*)tolua_tousertype_dynamic(L, 2, 0, "CVideoFunctions"), (IDirectDrawSurface*)tolua_tousertype_dynamic(L, 3, 0, "IDirectDrawSurface"), (CRect*)tolua_tousertype_dynamic(L, 4, 0, "CRect"), (IDirectDrawSurface*)tolua_tousertype_dynamic(L, 5, 0, "IDirectDrawSurface"), (CRect*)tolua_tousertype_dynamic(L, 6, 0, "CRect"), tolua_function_tointeger<DWORD>(L, 7, "Blt1"), (DDBLTFX*)tolua_tousertype_dynamic(L, 8, 0, "DDBLTFX"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CVideoFunctions_Blt2(lua_State* L)
{
	CVideoFunctions* self = (CVideoFunctions*)tolua_tousertype_dynamic(L, 1, 0, "CVideoFunctions");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Blt2'", NULL);
	HRESULT returnVal = self->Blt2((CVideoFunctions*)tolua_tousertype_dynamic(L, 2, 0, "CVideoFunctions"), (IDirectDrawSurface*)tolua_tousertype_dynamic(L, 3, 0, "IDirectDrawSurface"), (CRect*)tolua_tousertype_dynamic(L, 4, 0, "CRect"), (IDirectDrawSurface*)tolua_tousertype_dynamic(L, 5, 0, "IDirectDrawSurface"), (CRect*)tolua_tousertype_dynamic(L, 6, 0, "CRect"), tolua_function_tointeger<DWORD>(L, 7, "Blt2"), (DDBLTFX*)tolua_tousertype_dynamic(L, 8, 0, "DDBLTFX"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CVideoFunctions_Blt3(lua_State* L)
{
	CVideoFunctions* self = (CVideoFunctions*)tolua_tousertype_dynamic(L, 1, 0, "CVideoFunctions");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Blt3'", NULL);
	HRESULT returnVal = self->Blt3((CVideoFunctions*)tolua_tousertype_dynamic(L, 2, 0, "CVideoFunctions"), (IDirectDrawSurface*)tolua_tousertype_dynamic(L, 3, 0, "IDirectDrawSurface"), (CRect*)tolua_tousertype_dynamic(L, 4, 0, "CRect"), (IDirectDrawSurface*)tolua_tousertype_dynamic(L, 5, 0, "IDirectDrawSurface"), (CRect*)tolua_tousertype_dynamic(L, 6, 0, "CRect"), tolua_function_tointeger<DWORD>(L, 7, "Blt3"), (DDBLTFX*)tolua_tousertype_dynamic(L, 8, 0, "DDBLTFX"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CVideoFunctions_Blt4(lua_State* L)
{
	CVideoFunctions* self = (CVideoFunctions*)tolua_tousertype_dynamic(L, 1, 0, "CVideoFunctions");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Blt4'", NULL);
	HRESULT returnVal = self->Blt4((CVideoFunctions*)tolua_tousertype_dynamic(L, 2, 0, "CVideoFunctions"), (IDirectDrawSurface*)tolua_tousertype_dynamic(L, 3, 0, "IDirectDrawSurface"), (CRect*)tolua_tousertype_dynamic(L, 4, 0, "CRect"), (IDirectDrawSurface*)tolua_tousertype_dynamic(L, 5, 0, "IDirectDrawSurface"), (CRect*)tolua_tousertype_dynamic(L, 6, 0, "CRect"), tolua_function_tointeger<DWORD>(L, 7, "Blt4"), (DDBLTFX*)tolua_tousertype_dynamic(L, 8, 0, "DDBLTFX"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CVideoFunctions_BltFast1(lua_State* L)
{
	CVideoFunctions* self = (CVideoFunctions*)tolua_tousertype_dynamic(L, 1, 0, "CVideoFunctions");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'BltFast1'", NULL);
	HRESULT returnVal = self->BltFast1((CVideoFunctions*)tolua_tousertype_dynamic(L, 2, 0, "CVideoFunctions"), (IDirectDrawSurface*)tolua_tousertype_dynamic(L, 3, 0, "IDirectDrawSurface"), (CRect*)tolua_tousertype_dynamic(L, 4, 0, "CRect"), (IDirectDrawSurface*)tolua_tousertype_dynamic(L, 5, 0, "IDirectDrawSurface"), (CRect*)tolua_tousertype_dynamic(L, 6, 0, "CRect"), tolua_function_tointeger<uint>(L, 7, "BltFast1"), tolua_function_tointeger<int>(L, 8, "BltFast1"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CVideoFunctions_BltFast2(lua_State* L)
{
	CVideoFunctions* self = (CVideoFunctions*)tolua_tousertype_dynamic(L, 1, 0, "CVideoFunctions");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'BltFast2'", NULL);
	HRESULT returnVal = self->BltFast2((CVideoFunctions*)tolua_tousertype_dynamic(L, 2, 0, "CVideoFunctions"), (IDirectDrawSurface*)tolua_tousertype_dynamic(L, 3, 0, "IDirectDrawSurface"), (CRect*)tolua_tousertype_dynamic(L, 4, 0, "CRect"), (IDirectDrawSurface*)tolua_tousertype_dynamic(L, 5, 0, "IDirectDrawSurface"), (CRect*)tolua_tousertype_dynamic(L, 6, 0, "CRect"), tolua_function_tointeger<uint>(L, 7, "BltFast2"), tolua_function_tointeger<int>(L, 8, "BltFast2"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_CParticle_m_rgbColor(lua_State* L)
{
	CParticle* self = (CParticle*)tolua_tousertype_dynamic(L, 1, 0, "CParticle");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rgbColor'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_rgbColor);
	return 1;
}

static int tolua_set_CParticle_m_rgbColor(lua_State* L)
{
	CParticle* self = (CParticle*)tolua_tousertype_dynamic(L, 1, 0, "CParticle");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rgbColor'", NULL);
	self->m_rgbColor = tolua_setter_tointeger<uint>(L, "m_rgbColor");
	return 0;
}

static int tolua_get_CParticle_reference_m_rgbColor(lua_State* L)
{
	CParticle* self = (CParticle*)tolua_tousertype_dynamic(L, 1, 0, "CParticle");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rgbColor'", NULL);
	tolua_pushusertype(L, (void*)&self->m_rgbColor, "Primitive<uint>");
	return 1;
}

static int tolua_get_CDerivedStats_m_generalState(lua_State* L)
{
	CDerivedStats* self = (CDerivedStats*)tolua_tousertype_dynamic(L, 1, 0, "CDerivedStats");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_generalState'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_generalState);
	return 1;
}

static int tolua_set_CDerivedStats_m_generalState(lua_State* L)
{
	CDerivedStats* self = (CDerivedStats*)tolua_tousertype_dynamic(L, 1, 0, "CDerivedStats");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_generalState'", NULL);
	self->m_generalState = tolua_setter_tointeger<uint>(L, "m_generalState");
	return 0;
}

static int tolua_get_CDerivedStats_reference_m_generalState(lua_State* L)
{
	CDerivedStats* self = (CDerivedStats*)tolua_tousertype_dynamic(L, 1, 0, "CDerivedStats");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_generalState'", NULL);
	tolua_pushusertype(L, (void*)&self->m_generalState, "Primitive<uint>");
	return 1;
}

static int tolua_get_CDerivedStats_m_op182List(lua_State* L)
{
	CDerivedStats* self = (CDerivedStats*)tolua_tousertype_dynamic(L, 1, 0, "CDerivedStats");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_op182List'", NULL);
	tolua_pushusertype(L, (void*)&self->m_op182List, "CPtrList");
	return 1;
}

static int tolua_get_CDerivedStats_m_op183List(lua_State* L)
{
	CDerivedStats* self = (CDerivedStats*)tolua_tousertype_dynamic(L, 1, 0, "CDerivedStats");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_op183List'", NULL);
	tolua_pushusertype(L, (void*)&self->m_op183List, "CPtrList");
	return 1;
}

static int tolua_get_mosHeader_st_nFileType(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nFileType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nFileType);
	return 1;
}

static int tolua_set_mosHeader_st_nFileType(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nFileType'", NULL);
	self->nFileType = tolua_setter_tointeger<uint>(L, "nFileType");
	return 0;
}

static int tolua_get_mosHeader_st_reference_nFileType(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nFileType'", NULL);
	tolua_pushusertype(L, (void*)&self->nFileType, "Primitive<uint>");
	return 1;
}

static int tolua_get_mosHeader_st_nFileVersion(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nFileVersion'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nFileVersion);
	return 1;
}

static int tolua_set_mosHeader_st_nFileVersion(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nFileVersion'", NULL);
	self->nFileVersion = tolua_setter_tointeger<uint>(L, "nFileVersion");
	return 0;
}

static int tolua_get_mosHeader_st_reference_nFileVersion(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nFileVersion'", NULL);
	tolua_pushusertype(L, (void*)&self->nFileVersion, "Primitive<uint>");
	return 1;
}

static int tolua_get_mosHeader_st_nWidth(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nWidth'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nWidth);
	return 1;
}

static int tolua_set_mosHeader_st_nWidth(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nWidth'", NULL);
	self->nWidth = tolua_setter_tointeger<ushort>(L, "nWidth");
	return 0;
}

static int tolua_get_mosHeader_st_reference_nWidth(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nWidth'", NULL);
	tolua_pushusertype(L, (void*)&self->nWidth, "Primitive<ushort>");
	return 1;
}

static int tolua_get_mosHeader_st_nHeight(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nHeight'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nHeight);
	return 1;
}

static int tolua_set_mosHeader_st_nHeight(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nHeight'", NULL);
	self->nHeight = tolua_setter_tointeger<ushort>(L, "nHeight");
	return 0;
}

static int tolua_get_mosHeader_st_reference_nHeight(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nHeight'", NULL);
	tolua_pushusertype(L, (void*)&self->nHeight, "Primitive<ushort>");
	return 1;
}

static int tolua_get_mosHeader_st_nXTiles(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nXTiles'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nXTiles);
	return 1;
}

static int tolua_set_mosHeader_st_nXTiles(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nXTiles'", NULL);
	self->nXTiles = tolua_setter_tointeger<ushort>(L, "nXTiles");
	return 0;
}

static int tolua_get_mosHeader_st_reference_nXTiles(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nXTiles'", NULL);
	tolua_pushusertype(L, (void*)&self->nXTiles, "Primitive<ushort>");
	return 1;
}

static int tolua_get_mosHeader_st_nYTiles(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nYTiles'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nYTiles);
	return 1;
}

static int tolua_set_mosHeader_st_nYTiles(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nYTiles'", NULL);
	self->nYTiles = tolua_setter_tointeger<ushort>(L, "nYTiles");
	return 0;
}

static int tolua_get_mosHeader_st_reference_nYTiles(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nYTiles'", NULL);
	tolua_pushusertype(L, (void*)&self->nYTiles, "Primitive<ushort>");
	return 1;
}

static int tolua_get_mosHeader_st_nTileSize(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nTileSize'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nTileSize);
	return 1;
}

static int tolua_set_mosHeader_st_nTileSize(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nTileSize'", NULL);
	self->nTileSize = tolua_setter_tointeger<ushort>(L, "nTileSize");
	return 0;
}

static int tolua_get_mosHeader_st_reference_nTileSize(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nTileSize'", NULL);
	tolua_pushusertype(L, (void*)&self->nTileSize, "Primitive<ushort>");
	return 1;
}

static int tolua_get_mosHeader_st_nTransparentColor(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nTransparentColor'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nTransparentColor);
	return 1;
}

static int tolua_set_mosHeader_st_nTransparentColor(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nTransparentColor'", NULL);
	self->nTransparentColor = tolua_setter_tointeger<byte>(L, "nTransparentColor");
	return 0;
}

static int tolua_get_mosHeader_st_reference_nTransparentColor(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nTransparentColor'", NULL);
	tolua_pushusertype(L, (void*)&self->nTransparentColor, "Primitive<byte>");
	return 1;
}

static int tolua_get_mosHeader_st_nCompressed(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nCompressed'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nCompressed);
	return 1;
}

static int tolua_set_mosHeader_st_nCompressed(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nCompressed'", NULL);
	self->nCompressed = tolua_setter_tointeger<byte>(L, "nCompressed");
	return 0;
}

static int tolua_get_mosHeader_st_reference_nCompressed(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nCompressed'", NULL);
	tolua_pushusertype(L, (void*)&self->nCompressed, "Primitive<byte>");
	return 1;
}

static int tolua_get_mosHeader_st_nPaletteOffset(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nPaletteOffset'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nPaletteOffset);
	return 1;
}

static int tolua_set_mosHeader_st_nPaletteOffset(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nPaletteOffset'", NULL);
	self->nPaletteOffset = tolua_setter_tointeger<uint>(L, "nPaletteOffset");
	return 0;
}

static int tolua_get_mosHeader_st_reference_nPaletteOffset(lua_State* L)
{
	mosHeader_st* self = (mosHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "mosHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nPaletteOffset'", NULL);
	tolua_pushusertype(L, (void*)&self->nPaletteOffset, "Primitive<uint>");
	return 1;
}

static int tolua_get_WED_TileData_st_nStartingTile(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nStartingTile'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nStartingTile);
	return 1;
}

static int tolua_set_WED_TileData_st_nStartingTile(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nStartingTile'", NULL);
	self->nStartingTile = tolua_setter_tointeger<ushort>(L, "nStartingTile");
	return 0;
}

static int tolua_get_WED_TileData_st_reference_nStartingTile(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nStartingTile'", NULL);
	tolua_pushusertype(L, (void*)&self->nStartingTile, "Primitive<ushort>");
	return 1;
}

static int tolua_get_WED_TileData_st_nNumTiles(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nNumTiles'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nNumTiles);
	return 1;
}

static int tolua_set_WED_TileData_st_nNumTiles(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nNumTiles'", NULL);
	self->nNumTiles = tolua_setter_tointeger<ushort>(L, "nNumTiles");
	return 0;
}

static int tolua_get_WED_TileData_st_reference_nNumTiles(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nNumTiles'", NULL);
	tolua_pushusertype(L, (void*)&self->nNumTiles, "Primitive<ushort>");
	return 1;
}

static int tolua_get_WED_TileData_st_nSecondaryTile(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nSecondaryTile'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nSecondaryTile);
	return 1;
}

static int tolua_set_WED_TileData_st_nSecondaryTile(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nSecondaryTile'", NULL);
	self->nSecondaryTile = tolua_setter_tointeger<short>(L, "nSecondaryTile");
	return 0;
}

static int tolua_get_WED_TileData_st_reference_nSecondaryTile(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nSecondaryTile'", NULL);
	tolua_pushusertype(L, (void*)&self->nSecondaryTile, "Primitive<short>");
	return 1;
}

static int tolua_get_WED_TileData_st_bFlags(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'bFlags'", NULL);
	lua_pushinteger(L, (lua_Integer)self->bFlags);
	return 1;
}

static int tolua_set_WED_TileData_st_bFlags(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'bFlags'", NULL);
	self->bFlags = tolua_setter_tointeger<byte>(L, "bFlags");
	return 0;
}

static int tolua_get_WED_TileData_st_reference_bFlags(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'bFlags'", NULL);
	tolua_pushusertype(L, (void*)&self->bFlags, "Primitive<byte>");
	return 1;
}

static int tolua_get_WED_TileData_st_bAnimSpeed(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'bAnimSpeed'", NULL);
	lua_pushinteger(L, (lua_Integer)self->bAnimSpeed);
	return 1;
}

static int tolua_set_WED_TileData_st_bAnimSpeed(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'bAnimSpeed'", NULL);
	self->bAnimSpeed = tolua_setter_tointeger<byte>(L, "bAnimSpeed");
	return 0;
}

static int tolua_get_WED_TileData_st_reference_bAnimSpeed(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'bAnimSpeed'", NULL);
	tolua_pushusertype(L, (void*)&self->bAnimSpeed, "Primitive<byte>");
	return 1;
}

static int tolua_get_WED_TileData_st_wFlags(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'wFlags'", NULL);
	lua_pushinteger(L, (lua_Integer)self->wFlags);
	return 1;
}

static int tolua_set_WED_TileData_st_wFlags(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'wFlags'", NULL);
	self->wFlags = tolua_setter_tointeger<ushort>(L, "wFlags");
	return 0;
}

static int tolua_get_WED_TileData_st_reference_wFlags(lua_State* L)
{
	WED_TileData_st* self = (WED_TileData_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_TileData_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'wFlags'", NULL);
	tolua_pushusertype(L, (void*)&self->wFlags, "Primitive<ushort>");
	return 1;
}

static int tolua_function_VariableArray_CResourceManagerHashEntry__getReference(lua_State* L)
{
	VariableArray<CResourceManagerHashEntry>* self = (VariableArray<CResourceManagerHashEntry>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CResourceManagerHashEntry>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CResourceManagerHashEntry* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CResourceManagerHashEntry");
	return 1;
}

static int tolua_function_VariableArray_CResourceManagerHashEntry__set(lua_State* L)
{
	VariableArray<CResourceManagerHashEntry>* self = (VariableArray<CResourceManagerHashEntry>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CResourceManagerHashEntry>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 3, 0, "CResourceManagerHashEntry"));
	return 0;
}

static int tolua_function_VariableArray_CArchive__getReference(lua_State* L)
{
	VariableArray<CArchive>* self = (VariableArray<CArchive>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CArchive>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CArchive* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CArchive");
	return 1;
}

static int tolua_function_VariableArray_CArchive__set(lua_State* L)
{
	VariableArray<CArchive>* self = (VariableArray<CArchive>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CArchive>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CArchive*)tolua_tousertype_dynamic(L, 3, 0, "CArchive"));
	return 0;
}

static int tolua_function_VariableArray_CGameDialogEntry___get(lua_State* L)
{
	VariableArray<CGameDialogEntry*>* self = (VariableArray<CGameDialogEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameDialogEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	CGameDialogEntry* returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	tolua_pushusertype(L, (void*)returnVal, "CGameDialogEntry");
	return 1;
}

static int tolua_function_VariableArray_CGameDialogEntry___getReference(lua_State* L)
{
	VariableArray<CGameDialogEntry*>* self = (VariableArray<CGameDialogEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameDialogEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CGameDialogEntry** returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Pointer<CGameDialogEntry>");
	return 1;
}

static int tolua_function_VariableArray_CGameDialogEntry___set(lua_State* L)
{
	VariableArray<CGameDialogEntry*>* self = (VariableArray<CGameDialogEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameDialogEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), (CGameDialogEntry*)tolua_tousertype_dynamic(L, 3, 0, "CGameDialogEntry"));
	return 0;
}

static int tolua_function_VariableArray_CObList_CNode__getReference(lua_State* L)
{
	VariableArray<CObList_CNode>* self = (VariableArray<CObList_CNode>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CObList_CNode>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CObList_CNode* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CObList_CNode");
	return 1;
}

static int tolua_function_VariableArray_CObList_CNode__set(lua_State* L)
{
	VariableArray<CObList_CNode>* self = (VariableArray<CObList_CNode>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CObList_CNode>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CObList_CNode*)tolua_tousertype_dynamic(L, 3, 0, "CObList_CNode"));
	return 0;
}

static int tolua_function_VariableArray_CPtrList_CNode__getReference(lua_State* L)
{
	VariableArray<CPtrList_CNode>* self = (VariableArray<CPtrList_CNode>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CPtrList_CNode>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CPtrList_CNode* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CPtrList_CNode");
	return 1;
}

static int tolua_function_VariableArray_CPtrList_CNode__set(lua_State* L)
{
	VariableArray<CPtrList_CNode>* self = (VariableArray<CPtrList_CNode>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CPtrList_CNode>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CPtrList_CNode*)tolua_tousertype_dynamic(L, 3, 0, "CPtrList_CNode"));
	return 0;
}

static int tolua_function_VariableArray_CVRamPool__getReference(lua_State* L)
{
	VariableArray<CVRamPool>* self = (VariableArray<CVRamPool>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CVRamPool>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CVRamPool* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CVRamPool");
	return 1;
}

static int tolua_function_VariableArray_CVRamPool__set(lua_State* L)
{
	VariableArray<CVRamPool>* self = (VariableArray<CVRamPool>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CVRamPool>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CVRamPool*)tolua_tousertype_dynamic(L, 3, 0, "CVRamPool"));
	return 0;
}

static int tolua_function_VariableArray_CRect__getReference(lua_State* L)
{
	VariableArray<CRect>* self = (VariableArray<CRect>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CRect>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CRect* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CRect");
	return 1;
}

static int tolua_function_VariableArray_CRect__set(lua_State* L)
{
	VariableArray<CRect>* self = (VariableArray<CRect>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CRect>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CRect*)tolua_tousertype_dynamic(L, 3, 0, "CRect"));
	return 0;
}

static int tolua_function_VariableArray_byte___get(lua_State* L)
{
	VariableArray<byte*>* self = (VariableArray<byte*>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<byte*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	byte* returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	tolua_pushusertype(L, (void*)returnVal, "Primitive<byte>");
	return 1;
}

static int tolua_function_VariableArray_byte___getReference(lua_State* L)
{
	VariableArray<byte*>* self = (VariableArray<byte*>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<byte*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	byte** returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Pointer<byte>");
	return 1;
}

static int tolua_function_VariableArray_byte___set(lua_State* L)
{
	VariableArray<byte*>* self = (VariableArray<byte*>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<byte*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), (byte*)tolua_tousertype_dynamic(L, 3, 0, "Primitive<byte>"));
	return 0;
}

static int tolua_function_VariableArray_char__get(lua_State* L)
{
	VariableArray<char>* self = (VariableArray<char>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<char>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	char returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	lua_pushlstring(L, (const char*)&returnVal, 1);
	return 1;
}

static int tolua_function_VariableArray_char__getReference(lua_State* L)
{
	VariableArray<char>* self = (VariableArray<char>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<char>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	char* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushstring(L, (const char*)returnVal);
	return 1;
}

static int tolua_function_VariableArray_char__set(lua_State* L)
{
	VariableArray<char>* self = (VariableArray<char>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<char>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), tolua_function_tochar(L, 3, "set"));
	return 0;
}

static int tolua_function_VariableArray_CPtrList__getReference(lua_State* L)
{
	VariableArray<CPtrList>* self = (VariableArray<CPtrList>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CPtrList>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CPtrList* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CPtrList");
	return 1;
}

static int tolua_function_VariableArray_CPtrList__set(lua_State* L)
{
	VariableArray<CPtrList>* self = (VariableArray<CPtrList>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CPtrList>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CPtrList*)tolua_tousertype_dynamic(L, 3, 0, "CPtrList"));
	return 0;
}

static int tolua_function_VariableArray_CPoint__getReference(lua_State* L)
{
	VariableArray<CPoint>* self = (VariableArray<CPoint>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CPoint>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CPoint* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CPoint");
	return 1;
}

static int tolua_function_VariableArray_CPoint__set(lua_State* L)
{
	VariableArray<CPoint>* self = (VariableArray<CPoint>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CPoint>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CPoint*)tolua_tousertype_dynamic(L, 3, 0, "CPoint"));
	return 0;
}

static int tolua_function_VariableArray_UI_Control_st__getReference(lua_State* L)
{
	VariableArray<UI_Control_st>* self = (VariableArray<UI_Control_st>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<UI_Control_st>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	UI_Control_st* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "UI_Control_st");
	return 1;
}

static int tolua_function_VariableArray_UI_Control_st__set(lua_State* L)
{
	VariableArray<UI_Control_st>* self = (VariableArray<UI_Control_st>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<UI_Control_st>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(UI_Control_st*)tolua_tousertype_dynamic(L, 3, 0, "UI_Control_st"));
	return 0;
}

static int tolua_function_VariableArray_CVideoFunctions__getReference(lua_State* L)
{
	VariableArray<CVideoFunctions>* self = (VariableArray<CVideoFunctions>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CVideoFunctions>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CVideoFunctions* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CVideoFunctions");
	return 1;
}

static int tolua_function_VariableArray_CVideoFunctions__set(lua_State* L)
{
	VariableArray<CVideoFunctions>* self = (VariableArray<CVideoFunctions>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CVideoFunctions>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CVideoFunctions*)tolua_tousertype_dynamic(L, 3, 0, "CVideoFunctions"));
	return 0;
}

static int tolua_function_VariableArray_mosHeader_st__getReference(lua_State* L)
{
	VariableArray<mosHeader_st>* self = (VariableArray<mosHeader_st>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<mosHeader_st>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	mosHeader_st* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "mosHeader_st");
	return 1;
}

static int tolua_function_VariableArray_mosHeader_st__set(lua_State* L)
{
	VariableArray<mosHeader_st>* self = (VariableArray<mosHeader_st>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<mosHeader_st>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(mosHeader_st*)tolua_tousertype_dynamic(L, 3, 0, "mosHeader_st"));
	return 0;
}

static int tolua_function_VariableArray_void___get(lua_State* L)
{
	VariableArray<void*>* self = (VariableArray<void*>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<void*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	void* returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	tolua_pushusertype(L, (void*)returnVal, "UnmappedUserType");
	return 1;
}

static int tolua_function_VariableArray_void___getReference(lua_State* L)
{
	VariableArray<void*>* self = (VariableArray<void*>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<void*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	void** returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "VoidPointer");
	return 1;
}

static int tolua_function_VariableArray_void___set(lua_State* L)
{
	VariableArray<void*>* self = (VariableArray<void*>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<void*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), (void*)tolua_tousertype_dynamic(L, 3, 0, "UnmappedUserType"));
	return 0;
}

static int tolua_function_VariableArray_CRuntimeClass__getReference(lua_State* L)
{
	VariableArray<CRuntimeClass>* self = (VariableArray<CRuntimeClass>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CRuntimeClass>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CRuntimeClass* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CRuntimeClass");
	return 1;
}

static int tolua_function_VariableArray_CRuntimeClass__set(lua_State* L)
{
	VariableArray<CRuntimeClass>* self = (VariableArray<CRuntimeClass>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CRuntimeClass>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CRuntimeClass*)tolua_tousertype_dynamic(L, 3, 0, "CRuntimeClass"));
	return 0;
}

static int tolua_function_VariableArray_CUIControlBase__getReference(lua_State* L)
{
	VariableArray<CUIControlBase>* self = (VariableArray<CUIControlBase>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUIControlBase>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUIControlBase* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUIControlBase");
	return 1;
}

static int tolua_function_VariableArray_CUIControlBase__set(lua_State* L)
{
	VariableArray<CUIControlBase>* self = (VariableArray<CUIControlBase>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUIControlBase>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUIControlBase*)tolua_tousertype_dynamic(L, 3, 0, "CUIControlBase"));
	return 0;
}

static int tolua_function_VariableArray_CString__getReference(lua_State* L)
{
	VariableArray<CString>* self = (VariableArray<CString>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CString>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CString* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CString");
	return 1;
}

static int tolua_function_VariableArray_CString__set(lua_State* L)
{
	VariableArray<CString>* self = (VariableArray<CString>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CString>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CString*)tolua_tousertype_dynamic(L, 3, 0, "CString"));
	return 0;
}

static int tolua_function_VariableArray_CObject__getReference(lua_State* L)
{
	VariableArray<CObject>* self = (VariableArray<CObject>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CObject>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CObject* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CObject");
	return 1;
}

static int tolua_function_VariableArray_CObject__set(lua_State* L)
{
	VariableArray<CObject>* self = (VariableArray<CObject>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CObject>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CObject*)tolua_tousertype_dynamic(L, 3, 0, "CObject"));
	return 0;
}

static int tolua_function_VariableArray_CWarp__getReference(lua_State* L)
{
	VariableArray<CWarp>* self = (VariableArray<CWarp>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CWarp>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CWarp* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CWarp");
	return 1;
}

static int tolua_function_VariableArray_CWarp__set(lua_State* L)
{
	VariableArray<CWarp>* self = (VariableArray<CWarp>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CWarp>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CWarp*)tolua_tousertype_dynamic(L, 3, 0, "CWarp"));
	return 0;
}

static int tolua_function_VariableArray_CTypedPtrList_CPtrList_CGameEffect____CNode__getReference(lua_State* L)
{
	VariableArray<CTypedPtrList<CPtrList,CGameEffect*>::CNode>* self = (VariableArray<CTypedPtrList<CPtrList,CGameEffect*>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CTypedPtrList<CPtrList,CGameEffect*>::CNode* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 1;
}

static int tolua_function_VariableArray_CTypedPtrList_CPtrList_CGameEffect____CNode__set(lua_State* L)
{
	VariableArray<CTypedPtrList<CPtrList,CGameEffect*>::CNode>* self = (VariableArray<CTypedPtrList<CPtrList,CGameEffect*>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 3, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode"));
	return 0;
}

static int tolua_function_VariableArray_CSyncObject__getReference(lua_State* L)
{
	VariableArray<CSyncObject>* self = (VariableArray<CSyncObject>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CSyncObject>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CSyncObject* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CSyncObject");
	return 1;
}

static int tolua_function_VariableArray_CSyncObject__set(lua_State* L)
{
	VariableArray<CSyncObject>* self = (VariableArray<CSyncObject>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CSyncObject>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CSyncObject*)tolua_tousertype_dynamic(L, 3, 0, "CSyncObject"));
	return 0;
}

static int tolua_function_VariableArray_CRes__getReference(lua_State* L)
{
	VariableArray<CRes>* self = (VariableArray<CRes>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CRes>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CRes* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CRes");
	return 1;
}

static int tolua_function_VariableArray_CRes__set(lua_State* L)
{
	VariableArray<CRes>* self = (VariableArray<CRes>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CRes>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CRes*)tolua_tousertype_dynamic(L, 3, 0, "CRes"));
	return 0;
}

static int tolua_function_VariableArray_CResWED__getReference(lua_State* L)
{
	VariableArray<CResWED>* self = (VariableArray<CResWED>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CResWED>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CResWED* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CResWED");
	return 1;
}

static int tolua_function_VariableArray_CResWED__set(lua_State* L)
{
	VariableArray<CResWED>* self = (VariableArray<CResWED>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CResWED>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CResWED*)tolua_tousertype_dynamic(L, 3, 0, "CResWED"));
	return 0;
}

static int tolua_function_VariableArray_CMessage__getReference(lua_State* L)
{
	VariableArray<CMessage>* self = (VariableArray<CMessage>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CMessage>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CMessage* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CMessage");
	return 1;
}

static int tolua_function_VariableArray_CMessage__set(lua_State* L)
{
	VariableArray<CMessage>* self = (VariableArray<CMessage>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CMessage>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CMessage*)tolua_tousertype_dynamic(L, 3, 0, "CMessage"));
	return 0;
}

static int tolua_function_VariableArray_CInfCursor__getReference(lua_State* L)
{
	VariableArray<CInfCursor>* self = (VariableArray<CInfCursor>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CInfCursor>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CInfCursor* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CInfCursor");
	return 1;
}

static int tolua_function_VariableArray_CInfCursor__set(lua_State* L)
{
	VariableArray<CInfCursor>* self = (VariableArray<CInfCursor>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CInfCursor>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CInfCursor*)tolua_tousertype_dynamic(L, 3, 0, "CInfCursor"));
	return 0;
}

static int tolua_function_VariableArray_CGameAnimationType__getReference(lua_State* L)
{
	VariableArray<CGameAnimationType>* self = (VariableArray<CGameAnimationType>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameAnimationType>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CGameAnimationType* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CGameAnimationType");
	return 1;
}

static int tolua_function_VariableArray_CGameAnimationType__set(lua_State* L)
{
	VariableArray<CGameAnimationType>* self = (VariableArray<CGameAnimationType>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameAnimationType>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CGameAnimationType*)tolua_tousertype_dynamic(L, 3, 0, "CGameAnimationType"));
	return 0;
}

static int tolua_function_VariableArray_CResRef__getReference(lua_State* L)
{
	VariableArray<CResRef>* self = (VariableArray<CResRef>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CResRef>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CResRef* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CResRef");
	return 1;
}

static int tolua_function_VariableArray_CResRef__set(lua_State* L)
{
	VariableArray<CResRef>* self = (VariableArray<CResRef>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CResRef>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CResRef*)tolua_tousertype_dynamic(L, 3, 0, "CResRef"));
	return 0;
}

static int tolua_function_VariableArray_CVidFont__getReference(lua_State* L)
{
	VariableArray<CVidFont>* self = (VariableArray<CVidFont>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CVidFont>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CVidFont* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CVidFont");
	return 1;
}

static int tolua_function_VariableArray_CVidFont__set(lua_State* L)
{
	VariableArray<CVidFont>* self = (VariableArray<CVidFont>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CVidFont>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CVidFont*)tolua_tousertype_dynamic(L, 3, 0, "CVidFont"));
	return 0;
}

static int tolua_function_VariableArray_CUIControlButton__getReference(lua_State* L)
{
	VariableArray<CUIControlButton>* self = (VariableArray<CUIControlButton>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUIControlButton>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUIControlButton* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUIControlButton");
	return 1;
}

static int tolua_function_VariableArray_CUIControlButton__set(lua_State* L)
{
	VariableArray<CUIControlButton>* self = (VariableArray<CUIControlButton>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUIControlButton>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUIControlButton*)tolua_tousertype_dynamic(L, 3, 0, "CUIControlButton"));
	return 0;
}

static int tolua_function_VariableArray_CUIPanel__getReference(lua_State* L)
{
	VariableArray<CUIPanel>* self = (VariableArray<CUIPanel>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUIPanel>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUIPanel* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUIPanel");
	return 1;
}

static int tolua_function_VariableArray_CUIPanel__set(lua_State* L)
{
	VariableArray<CUIPanel>* self = (VariableArray<CUIPanel>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUIPanel>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUIPanel*)tolua_tousertype_dynamic(L, 3, 0, "CUIPanel"));
	return 0;
}

static int tolua_function_VariableArray_CItem__getReference(lua_State* L)
{
	VariableArray<CItem>* self = (VariableArray<CItem>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CItem>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CItem* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CItem");
	return 1;
}

static int tolua_function_VariableArray_CItem__set(lua_State* L)
{
	VariableArray<CItem>* self = (VariableArray<CItem>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CItem>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CItem*)tolua_tousertype_dynamic(L, 3, 0, "CItem"));
	return 0;
}

static int tolua_function_VariableArray_UI_PanelHeader_st__getReference(lua_State* L)
{
	VariableArray<UI_PanelHeader_st>* self = (VariableArray<UI_PanelHeader_st>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<UI_PanelHeader_st>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	UI_PanelHeader_st* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "UI_PanelHeader_st");
	return 1;
}

static int tolua_function_VariableArray_UI_PanelHeader_st__set(lua_State* L)
{
	VariableArray<UI_PanelHeader_st>* self = (VariableArray<UI_PanelHeader_st>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<UI_PanelHeader_st>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 3, 0, "UI_PanelHeader_st"));
	return 0;
}

static int tolua_function_VariableArray_CUIManager__getReference(lua_State* L)
{
	VariableArray<CUIManager>* self = (VariableArray<CUIManager>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUIManager>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUIManager* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUIManager");
	return 1;
}

static int tolua_function_VariableArray_CUIManager__set(lua_State* L)
{
	VariableArray<CUIManager>* self = (VariableArray<CUIManager>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUIManager>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUIManager*)tolua_tousertype_dynamic(L, 3, 0, "CUIManager"));
	return 0;
}

static int tolua_function_VariableArray_CBaldurEngine__getReference(lua_State* L)
{
	VariableArray<CBaldurEngine>* self = (VariableArray<CBaldurEngine>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CBaldurEngine>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CBaldurEngine* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CBaldurEngine");
	return 1;
}

static int tolua_function_VariableArray_CBaldurEngine__set(lua_State* L)
{
	VariableArray<CBaldurEngine>* self = (VariableArray<CBaldurEngine>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CBaldurEngine>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CBaldurEngine*)tolua_tousertype_dynamic(L, 3, 0, "CBaldurEngine"));
	return 0;
}

static int tolua_function_VariableArray_CBaldurProjector__getReference(lua_State* L)
{
	VariableArray<CBaldurProjector>* self = (VariableArray<CBaldurProjector>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CBaldurProjector>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CBaldurProjector* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CBaldurProjector");
	return 1;
}

static int tolua_function_VariableArray_CBaldurProjector__set(lua_State* L)
{
	VariableArray<CBaldurProjector>* self = (VariableArray<CBaldurProjector>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CBaldurProjector>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CBaldurProjector*)tolua_tousertype_dynamic(L, 3, 0, "CBaldurProjector"));
	return 0;
}

static int tolua_function_VariableArray_CScreenConnection__getReference(lua_State* L)
{
	VariableArray<CScreenConnection>* self = (VariableArray<CScreenConnection>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CScreenConnection>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CScreenConnection* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CScreenConnection");
	return 1;
}

static int tolua_function_VariableArray_CScreenConnection__set(lua_State* L)
{
	VariableArray<CScreenConnection>* self = (VariableArray<CScreenConnection>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CScreenConnection>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CScreenConnection*)tolua_tousertype_dynamic(L, 3, 0, "CScreenConnection"));
	return 0;
}

static int tolua_function_VariableArray_CScreenMap__getReference(lua_State* L)
{
	VariableArray<CScreenMap>* self = (VariableArray<CScreenMap>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CScreenMap>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CScreenMap* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CScreenMap");
	return 1;
}

static int tolua_function_VariableArray_CScreenMap__set(lua_State* L)
{
	VariableArray<CScreenMap>* self = (VariableArray<CScreenMap>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CScreenMap>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CScreenMap*)tolua_tousertype_dynamic(L, 3, 0, "CScreenMap"));
	return 0;
}

static int tolua_function_VariableArray_CScreenWorldMap__getReference(lua_State* L)
{
	VariableArray<CScreenWorldMap>* self = (VariableArray<CScreenWorldMap>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CScreenWorldMap>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CScreenWorldMap* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CScreenWorldMap");
	return 1;
}

static int tolua_function_VariableArray_CScreenWorldMap__set(lua_State* L)
{
	VariableArray<CScreenWorldMap>* self = (VariableArray<CScreenWorldMap>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CScreenWorldMap>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CScreenWorldMap*)tolua_tousertype_dynamic(L, 3, 0, "CScreenWorldMap"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine11__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine11>* self = (VariableArray<CUnknownEngine11>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine11>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine11* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine11");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine11__set(lua_State* L)
{
	VariableArray<CUnknownEngine11>* self = (VariableArray<CUnknownEngine11>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine11>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine11*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine11"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine12__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine12>* self = (VariableArray<CUnknownEngine12>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine12>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine12* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine12");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine12__set(lua_State* L)
{
	VariableArray<CUnknownEngine12>* self = (VariableArray<CUnknownEngine12>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine12>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine12*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine12"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine13__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine13>* self = (VariableArray<CUnknownEngine13>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine13>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine13* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine13");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine13__set(lua_State* L)
{
	VariableArray<CUnknownEngine13>* self = (VariableArray<CUnknownEngine13>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine13>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine13*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine13"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine14__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine14>* self = (VariableArray<CUnknownEngine14>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine14>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine14* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine14");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine14__set(lua_State* L)
{
	VariableArray<CUnknownEngine14>* self = (VariableArray<CUnknownEngine14>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine14>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine14*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine14"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine15__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine15>* self = (VariableArray<CUnknownEngine15>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine15>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine15* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine15");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine15__set(lua_State* L)
{
	VariableArray<CUnknownEngine15>* self = (VariableArray<CUnknownEngine15>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine15>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine15*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine15"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine16__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine16>* self = (VariableArray<CUnknownEngine16>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine16>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine16* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine16");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine16__set(lua_State* L)
{
	VariableArray<CUnknownEngine16>* self = (VariableArray<CUnknownEngine16>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine16>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine16*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine16"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine17__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine17>* self = (VariableArray<CUnknownEngine17>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine17>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine17* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine17");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine17__set(lua_State* L)
{
	VariableArray<CUnknownEngine17>* self = (VariableArray<CUnknownEngine17>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine17>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine17*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine17"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine18__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine18>* self = (VariableArray<CUnknownEngine18>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine18>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine18* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine18");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine18__set(lua_State* L)
{
	VariableArray<CUnknownEngine18>* self = (VariableArray<CUnknownEngine18>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine18>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine18*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine18"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine19__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine19>* self = (VariableArray<CUnknownEngine19>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine19>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine19* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine19");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine19__set(lua_State* L)
{
	VariableArray<CUnknownEngine19>* self = (VariableArray<CUnknownEngine19>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine19>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine19*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine19"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine2__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine2>* self = (VariableArray<CUnknownEngine2>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine2>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine2* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine2");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine2__set(lua_State* L)
{
	VariableArray<CUnknownEngine2>* self = (VariableArray<CUnknownEngine2>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine2>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine2*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine2"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine4__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine4>* self = (VariableArray<CUnknownEngine4>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine4>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine4* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine4");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine4__set(lua_State* L)
{
	VariableArray<CUnknownEngine4>* self = (VariableArray<CUnknownEngine4>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine4>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine4*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine4"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine5__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine5>* self = (VariableArray<CUnknownEngine5>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine5>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine5* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine5");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine5__set(lua_State* L)
{
	VariableArray<CUnknownEngine5>* self = (VariableArray<CUnknownEngine5>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine5>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine5*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine5"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine6__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine6>* self = (VariableArray<CUnknownEngine6>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine6>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine6* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine6");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine6__set(lua_State* L)
{
	VariableArray<CUnknownEngine6>* self = (VariableArray<CUnknownEngine6>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine6>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine6*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine6"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine7__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine7>* self = (VariableArray<CUnknownEngine7>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine7>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine7* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine7");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine7__set(lua_State* L)
{
	VariableArray<CUnknownEngine7>* self = (VariableArray<CUnknownEngine7>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine7>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine7*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine7"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine8__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine8>* self = (VariableArray<CUnknownEngine8>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine8>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine8* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine8");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine8__set(lua_State* L)
{
	VariableArray<CUnknownEngine8>* self = (VariableArray<CUnknownEngine8>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine8>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine8*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine8"));
	return 0;
}

static int tolua_function_VariableArray_CUnknownEngine9__getReference(lua_State* L)
{
	VariableArray<CUnknownEngine9>* self = (VariableArray<CUnknownEngine9>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine9>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUnknownEngine9* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine9");
	return 1;
}

static int tolua_function_VariableArray_CUnknownEngine9__set(lua_State* L)
{
	VariableArray<CUnknownEngine9>* self = (VariableArray<CUnknownEngine9>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CUnknownEngine9>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUnknownEngine9*)tolua_tousertype_dynamic(L, 3, 0, "CUnknownEngine9"));
	return 0;
}

static int tolua_function_VariableArray_CScreenWorld__getReference(lua_State* L)
{
	VariableArray<CScreenWorld>* self = (VariableArray<CScreenWorld>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CScreenWorld>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CScreenWorld* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CScreenWorld");
	return 1;
}

static int tolua_function_VariableArray_CScreenWorld__set(lua_State* L)
{
	VariableArray<CScreenWorld>* self = (VariableArray<CScreenWorld>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CScreenWorld>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CScreenWorld*)tolua_tousertype_dynamic(L, 3, 0, "CScreenWorld"));
	return 0;
}

static int tolua_function_VariableArray_CInfinity__getReference(lua_State* L)
{
	VariableArray<CInfinity>* self = (VariableArray<CInfinity>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CInfinity>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CInfinity* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CInfinity");
	return 1;
}

static int tolua_function_VariableArray_CInfinity__set(lua_State* L)
{
	VariableArray<CInfinity>* self = (VariableArray<CInfinity>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CInfinity>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CInfinity*)tolua_tousertype_dynamic(L, 3, 0, "CInfinity"));
	return 0;
}

static int tolua_function_VariableArray_CInfGame__getReference(lua_State* L)
{
	VariableArray<CInfGame>* self = (VariableArray<CInfGame>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CInfGame>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CInfGame* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CInfGame");
	return 1;
}

static int tolua_function_VariableArray_CInfGame__set(lua_State* L)
{
	VariableArray<CInfGame>* self = (VariableArray<CInfGame>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CInfGame>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CInfGame*)tolua_tousertype_dynamic(L, 3, 0, "CInfGame"));
	return 0;
}

static int tolua_function_VariableArray_CGameObjectArrayEntry__getReference(lua_State* L)
{
	VariableArray<CGameObjectArrayEntry>* self = (VariableArray<CGameObjectArrayEntry>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameObjectArrayEntry>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CGameObjectArrayEntry* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CGameObjectArrayEntry");
	return 1;
}

static int tolua_function_VariableArray_CGameObjectArrayEntry__set(lua_State* L)
{
	VariableArray<CGameObjectArrayEntry>* self = (VariableArray<CGameObjectArrayEntry>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameObjectArrayEntry>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CGameObjectArrayEntry*)tolua_tousertype_dynamic(L, 3, 0, "CGameObjectArrayEntry"));
	return 0;
}

static int tolua_function_VariableArray_CGameEffect__getReference(lua_State* L)
{
	VariableArray<CGameEffect>* self = (VariableArray<CGameEffect>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameEffect>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CGameEffect* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CGameEffect");
	return 1;
}

static int tolua_function_VariableArray_CGameEffect__set(lua_State* L)
{
	VariableArray<CGameEffect>* self = (VariableArray<CGameEffect>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameEffect>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CGameEffect*)tolua_tousertype_dynamic(L, 3, 0, "CGameEffect"));
	return 0;
}

static int tolua_function_VariableArray_CChitin__getReference(lua_State* L)
{
	VariableArray<CChitin>* self = (VariableArray<CChitin>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CChitin>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CChitin* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CChitin");
	return 1;
}

static int tolua_function_VariableArray_CChitin__set(lua_State* L)
{
	VariableArray<CChitin>* self = (VariableArray<CChitin>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CChitin>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CChitin*)tolua_tousertype_dynamic(L, 3, 0, "CChitin"));
	return 0;
}

static int tolua_function_VariableArray_CBaldurChitin__getReference(lua_State* L)
{
	VariableArray<CBaldurChitin>* self = (VariableArray<CBaldurChitin>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CBaldurChitin>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CBaldurChitin* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CBaldurChitin");
	return 1;
}

static int tolua_function_VariableArray_CBaldurChitin__set(lua_State* L)
{
	VariableArray<CBaldurChitin>* self = (VariableArray<CBaldurChitin>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CBaldurChitin>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CBaldurChitin*)tolua_tousertype_dynamic(L, 3, 0, "CBaldurChitin"));
	return 0;
}

static int tolua_function_VariableArray_CAIObjectType__getReference(lua_State* L)
{
	VariableArray<CAIObjectType>* self = (VariableArray<CAIObjectType>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CAIObjectType>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CAIObjectType* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CAIObjectType");
	return 1;
}

static int tolua_function_VariableArray_CAIObjectType__set(lua_State* L)
{
	VariableArray<CAIObjectType>* self = (VariableArray<CAIObjectType>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CAIObjectType>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CAIObjectType*)tolua_tousertype_dynamic(L, 3, 0, "CAIObjectType"));
	return 0;
}

static int tolua_function_VariableArray_CGameObject__getReference(lua_State* L)
{
	VariableArray<CGameObject>* self = (VariableArray<CGameObject>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameObject>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CGameObject* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CGameObject");
	return 1;
}

static int tolua_function_VariableArray_CGameObject__set(lua_State* L)
{
	VariableArray<CGameObject>* self = (VariableArray<CGameObject>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameObject>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CGameObject*)tolua_tousertype_dynamic(L, 3, 0, "CGameObject"));
	return 0;
}

static int tolua_function_VariableArray_CProjectile__getReference(lua_State* L)
{
	VariableArray<CProjectile>* self = (VariableArray<CProjectile>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CProjectile>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CProjectile* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CProjectile");
	return 1;
}

static int tolua_function_VariableArray_CProjectile__set(lua_State* L)
{
	VariableArray<CProjectile>* self = (VariableArray<CProjectile>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CProjectile>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CProjectile*)tolua_tousertype_dynamic(L, 3, 0, "CProjectile"));
	return 0;
}

static int tolua_function_VariableArray_CGameAIBase__getReference(lua_State* L)
{
	VariableArray<CGameAIBase>* self = (VariableArray<CGameAIBase>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameAIBase>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CGameAIBase* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CGameAIBase");
	return 1;
}

static int tolua_function_VariableArray_CGameAIBase__set(lua_State* L)
{
	VariableArray<CGameAIBase>* self = (VariableArray<CGameAIBase>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameAIBase>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CGameAIBase*)tolua_tousertype_dynamic(L, 3, 0, "CGameAIBase"));
	return 0;
}

static int tolua_function_VariableArray_CGameSprite__getReference(lua_State* L)
{
	VariableArray<CGameSprite>* self = (VariableArray<CGameSprite>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameSprite>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CGameSprite* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CGameSprite");
	return 1;
}

static int tolua_function_VariableArray_CGameSprite__set(lua_State* L)
{
	VariableArray<CGameSprite>* self = (VariableArray<CGameSprite>*)tolua_tousertype_dynamic(L, 1, 0, "VariableArray<CGameSprite>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CGameSprite*)tolua_tousertype_dynamic(L, 3, 0, "CGameSprite"));
	return 0;
}

static int tolua_get_Pointer_CBaldurChitin__reference(lua_State* L)
{
	Pointer<CBaldurChitin>* self = (Pointer<CBaldurChitin>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurChitin>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CBaldurChitin");
	return 1;
}

static int tolua_set_Pointer_CBaldurChitin__reference(lua_State* L)
{
	Pointer<CBaldurChitin>* self = (Pointer<CBaldurChitin>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurChitin>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CBaldurChitin*)tolua_tousertype_dynamic(L, 2, 0, "CBaldurChitin");
	return 0;
}

static int tolua_function_Pointer_CBaldurChitin__setValue(lua_State* L)
{
	Pointer<CBaldurChitin>* self = (Pointer<CBaldurChitin>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurChitin>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CBaldurChitin*)tolua_tousertype_dynamic(L, 2, 0, "CBaldurChitin"));
	return 0;
}

static int tolua_get_Pointer_const_MSG__reference(lua_State* L)
{
	Pointer<const MSG>* self = (Pointer<const MSG>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<const MSG>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "MSG");
	return 1;
}

static int tolua_set_Pointer_const_MSG__reference(lua_State* L)
{
	Pointer<const MSG>* self = (Pointer<const MSG>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<const MSG>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (const MSG*)tolua_tousertype_dynamic(L, 2, 0, "MSG");
	return 0;
}

static int tolua_get_Pointer_CInfCursor__reference(lua_State* L)
{
	Pointer<CInfCursor>* self = (Pointer<CInfCursor>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfCursor>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CInfCursor");
	return 1;
}

static int tolua_set_Pointer_CInfCursor__reference(lua_State* L)
{
	Pointer<CInfCursor>* self = (Pointer<CInfCursor>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfCursor>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CInfCursor*)tolua_tousertype_dynamic(L, 2, 0, "CInfCursor");
	return 0;
}

static int tolua_function_Pointer_CInfCursor__setValue(lua_State* L)
{
	Pointer<CInfCursor>* self = (Pointer<CInfCursor>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfCursor>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CInfCursor*)tolua_tousertype_dynamic(L, 2, 0, "CInfCursor"));
	return 0;
}

static int tolua_get_Pointer_CInfGame__reference(lua_State* L)
{
	Pointer<CInfGame>* self = (Pointer<CInfGame>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfGame>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CInfGame");
	return 1;
}

static int tolua_set_Pointer_CInfGame__reference(lua_State* L)
{
	Pointer<CInfGame>* self = (Pointer<CInfGame>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfGame>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CInfGame*)tolua_tousertype_dynamic(L, 2, 0, "CInfGame");
	return 0;
}

static int tolua_function_Pointer_CInfGame__setValue(lua_State* L)
{
	Pointer<CInfGame>* self = (Pointer<CInfGame>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfGame>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CInfGame*)tolua_tousertype_dynamic(L, 2, 0, "CInfGame"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine4__reference(lua_State* L)
{
	Pointer<CUnknownEngine4>* self = (Pointer<CUnknownEngine4>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine4>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine4");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine4__reference(lua_State* L)
{
	Pointer<CUnknownEngine4>* self = (Pointer<CUnknownEngine4>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine4>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine4*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine4");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine4__setValue(lua_State* L)
{
	Pointer<CUnknownEngine4>* self = (Pointer<CUnknownEngine4>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine4>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine4*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine4"));
	return 0;
}

static int tolua_get_Pointer_CBaldurProjector__reference(lua_State* L)
{
	Pointer<CBaldurProjector>* self = (Pointer<CBaldurProjector>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurProjector>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CBaldurProjector");
	return 1;
}

static int tolua_set_Pointer_CBaldurProjector__reference(lua_State* L)
{
	Pointer<CBaldurProjector>* self = (Pointer<CBaldurProjector>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurProjector>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CBaldurProjector*)tolua_tousertype_dynamic(L, 2, 0, "CBaldurProjector");
	return 0;
}

static int tolua_function_Pointer_CBaldurProjector__setValue(lua_State* L)
{
	Pointer<CBaldurProjector>* self = (Pointer<CBaldurProjector>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurProjector>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CBaldurProjector*)tolua_tousertype_dynamic(L, 2, 0, "CBaldurProjector"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine2__reference(lua_State* L)
{
	Pointer<CUnknownEngine2>* self = (Pointer<CUnknownEngine2>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine2>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine2");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine2__reference(lua_State* L)
{
	Pointer<CUnknownEngine2>* self = (Pointer<CUnknownEngine2>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine2>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine2*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine2");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine2__setValue(lua_State* L)
{
	Pointer<CUnknownEngine2>* self = (Pointer<CUnknownEngine2>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine2>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine2*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine2"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine5__reference(lua_State* L)
{
	Pointer<CUnknownEngine5>* self = (Pointer<CUnknownEngine5>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine5>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine5");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine5__reference(lua_State* L)
{
	Pointer<CUnknownEngine5>* self = (Pointer<CUnknownEngine5>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine5>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine5*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine5");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine5__setValue(lua_State* L)
{
	Pointer<CUnknownEngine5>* self = (Pointer<CUnknownEngine5>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine5>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine5*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine5"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine6__reference(lua_State* L)
{
	Pointer<CUnknownEngine6>* self = (Pointer<CUnknownEngine6>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine6>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine6");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine6__reference(lua_State* L)
{
	Pointer<CUnknownEngine6>* self = (Pointer<CUnknownEngine6>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine6>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine6*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine6");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine6__setValue(lua_State* L)
{
	Pointer<CUnknownEngine6>* self = (Pointer<CUnknownEngine6>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine6>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine6*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine6"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine7__reference(lua_State* L)
{
	Pointer<CUnknownEngine7>* self = (Pointer<CUnknownEngine7>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine7>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine7");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine7__reference(lua_State* L)
{
	Pointer<CUnknownEngine7>* self = (Pointer<CUnknownEngine7>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine7>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine7*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine7");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine7__setValue(lua_State* L)
{
	Pointer<CUnknownEngine7>* self = (Pointer<CUnknownEngine7>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine7>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine7*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine7"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine8__reference(lua_State* L)
{
	Pointer<CUnknownEngine8>* self = (Pointer<CUnknownEngine8>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine8>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine8");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine8__reference(lua_State* L)
{
	Pointer<CUnknownEngine8>* self = (Pointer<CUnknownEngine8>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine8>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine8*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine8");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine8__setValue(lua_State* L)
{
	Pointer<CUnknownEngine8>* self = (Pointer<CUnknownEngine8>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine8>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine8*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine8"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine9__reference(lua_State* L)
{
	Pointer<CUnknownEngine9>* self = (Pointer<CUnknownEngine9>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine9>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine9");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine9__reference(lua_State* L)
{
	Pointer<CUnknownEngine9>* self = (Pointer<CUnknownEngine9>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine9>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine9*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine9");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine9__setValue(lua_State* L)
{
	Pointer<CUnknownEngine9>* self = (Pointer<CUnknownEngine9>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine9>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine9*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine9"));
	return 0;
}

static int tolua_get_Pointer_CScreenMap__reference(lua_State* L)
{
	Pointer<CScreenMap>* self = (Pointer<CScreenMap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenMap>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CScreenMap");
	return 1;
}

static int tolua_set_Pointer_CScreenMap__reference(lua_State* L)
{
	Pointer<CScreenMap>* self = (Pointer<CScreenMap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenMap>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CScreenMap*)tolua_tousertype_dynamic(L, 2, 0, "CScreenMap");
	return 0;
}

static int tolua_function_Pointer_CScreenMap__setValue(lua_State* L)
{
	Pointer<CScreenMap>* self = (Pointer<CScreenMap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenMap>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CScreenMap*)tolua_tousertype_dynamic(L, 2, 0, "CScreenMap"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine11__reference(lua_State* L)
{
	Pointer<CUnknownEngine11>* self = (Pointer<CUnknownEngine11>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine11>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine11");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine11__reference(lua_State* L)
{
	Pointer<CUnknownEngine11>* self = (Pointer<CUnknownEngine11>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine11>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine11*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine11");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine11__setValue(lua_State* L)
{
	Pointer<CUnknownEngine11>* self = (Pointer<CUnknownEngine11>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine11>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine11*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine11"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine12__reference(lua_State* L)
{
	Pointer<CUnknownEngine12>* self = (Pointer<CUnknownEngine12>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine12>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine12");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine12__reference(lua_State* L)
{
	Pointer<CUnknownEngine12>* self = (Pointer<CUnknownEngine12>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine12>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine12*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine12");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine12__setValue(lua_State* L)
{
	Pointer<CUnknownEngine12>* self = (Pointer<CUnknownEngine12>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine12>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine12*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine12"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine13__reference(lua_State* L)
{
	Pointer<CUnknownEngine13>* self = (Pointer<CUnknownEngine13>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine13>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine13");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine13__reference(lua_State* L)
{
	Pointer<CUnknownEngine13>* self = (Pointer<CUnknownEngine13>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine13>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine13*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine13");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine13__setValue(lua_State* L)
{
	Pointer<CUnknownEngine13>* self = (Pointer<CUnknownEngine13>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine13>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine13*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine13"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine14__reference(lua_State* L)
{
	Pointer<CUnknownEngine14>* self = (Pointer<CUnknownEngine14>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine14>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine14");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine14__reference(lua_State* L)
{
	Pointer<CUnknownEngine14>* self = (Pointer<CUnknownEngine14>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine14>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine14*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine14");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine14__setValue(lua_State* L)
{
	Pointer<CUnknownEngine14>* self = (Pointer<CUnknownEngine14>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine14>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine14*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine14"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine15__reference(lua_State* L)
{
	Pointer<CUnknownEngine15>* self = (Pointer<CUnknownEngine15>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine15>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine15");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine15__reference(lua_State* L)
{
	Pointer<CUnknownEngine15>* self = (Pointer<CUnknownEngine15>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine15>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine15*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine15");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine15__setValue(lua_State* L)
{
	Pointer<CUnknownEngine15>* self = (Pointer<CUnknownEngine15>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine15>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine15*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine15"));
	return 0;
}

static int tolua_get_Pointer_CScreenWorld__reference(lua_State* L)
{
	Pointer<CScreenWorld>* self = (Pointer<CScreenWorld>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenWorld>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CScreenWorld");
	return 1;
}

static int tolua_set_Pointer_CScreenWorld__reference(lua_State* L)
{
	Pointer<CScreenWorld>* self = (Pointer<CScreenWorld>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenWorld>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CScreenWorld*)tolua_tousertype_dynamic(L, 2, 0, "CScreenWorld");
	return 0;
}

static int tolua_function_Pointer_CScreenWorld__setValue(lua_State* L)
{
	Pointer<CScreenWorld>* self = (Pointer<CScreenWorld>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenWorld>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CScreenWorld*)tolua_tousertype_dynamic(L, 2, 0, "CScreenWorld"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine16__reference(lua_State* L)
{
	Pointer<CUnknownEngine16>* self = (Pointer<CUnknownEngine16>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine16>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine16");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine16__reference(lua_State* L)
{
	Pointer<CUnknownEngine16>* self = (Pointer<CUnknownEngine16>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine16>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine16*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine16");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine16__setValue(lua_State* L)
{
	Pointer<CUnknownEngine16>* self = (Pointer<CUnknownEngine16>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine16>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine16*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine16"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine17__reference(lua_State* L)
{
	Pointer<CUnknownEngine17>* self = (Pointer<CUnknownEngine17>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine17>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine17");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine17__reference(lua_State* L)
{
	Pointer<CUnknownEngine17>* self = (Pointer<CUnknownEngine17>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine17>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine17*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine17");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine17__setValue(lua_State* L)
{
	Pointer<CUnknownEngine17>* self = (Pointer<CUnknownEngine17>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine17>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine17*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine17"));
	return 0;
}

static int tolua_get_Pointer_CScreenConnection__reference(lua_State* L)
{
	Pointer<CScreenConnection>* self = (Pointer<CScreenConnection>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenConnection>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CScreenConnection");
	return 1;
}

static int tolua_set_Pointer_CScreenConnection__reference(lua_State* L)
{
	Pointer<CScreenConnection>* self = (Pointer<CScreenConnection>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenConnection>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CScreenConnection*)tolua_tousertype_dynamic(L, 2, 0, "CScreenConnection");
	return 0;
}

static int tolua_function_Pointer_CScreenConnection__setValue(lua_State* L)
{
	Pointer<CScreenConnection>* self = (Pointer<CScreenConnection>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenConnection>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CScreenConnection*)tolua_tousertype_dynamic(L, 2, 0, "CScreenConnection"));
	return 0;
}

static int tolua_get_Pointer_CScreenWorldMap__reference(lua_State* L)
{
	Pointer<CScreenWorldMap>* self = (Pointer<CScreenWorldMap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenWorldMap>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CScreenWorldMap");
	return 1;
}

static int tolua_set_Pointer_CScreenWorldMap__reference(lua_State* L)
{
	Pointer<CScreenWorldMap>* self = (Pointer<CScreenWorldMap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenWorldMap>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CScreenWorldMap*)tolua_tousertype_dynamic(L, 2, 0, "CScreenWorldMap");
	return 0;
}

static int tolua_function_Pointer_CScreenWorldMap__setValue(lua_State* L)
{
	Pointer<CScreenWorldMap>* self = (Pointer<CScreenWorldMap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenWorldMap>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CScreenWorldMap*)tolua_tousertype_dynamic(L, 2, 0, "CScreenWorldMap"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine18__reference(lua_State* L)
{
	Pointer<CUnknownEngine18>* self = (Pointer<CUnknownEngine18>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine18>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine18");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine18__reference(lua_State* L)
{
	Pointer<CUnknownEngine18>* self = (Pointer<CUnknownEngine18>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine18>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine18*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine18");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine18__setValue(lua_State* L)
{
	Pointer<CUnknownEngine18>* self = (Pointer<CUnknownEngine18>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine18>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine18*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine18"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine19__reference(lua_State* L)
{
	Pointer<CUnknownEngine19>* self = (Pointer<CUnknownEngine19>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine19>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUnknownEngine19");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine19__reference(lua_State* L)
{
	Pointer<CUnknownEngine19>* self = (Pointer<CUnknownEngine19>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine19>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine19*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine19");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine19__setValue(lua_State* L)
{
	Pointer<CUnknownEngine19>* self = (Pointer<CUnknownEngine19>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine19>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUnknownEngine19*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine19"));
	return 0;
}

static int tolua_get_Pointer_CWarp__reference(lua_State* L)
{
	Pointer<CWarp>* self = (Pointer<CWarp>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CWarp>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CWarp");
	return 1;
}

static int tolua_set_Pointer_CWarp__reference(lua_State* L)
{
	Pointer<CWarp>* self = (Pointer<CWarp>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CWarp>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CWarp*)tolua_tousertype_dynamic(L, 2, 0, "CWarp");
	return 0;
}

static int tolua_function_Pointer_CWarp__setValue(lua_State* L)
{
	Pointer<CWarp>* self = (Pointer<CWarp>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CWarp>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CWarp*)tolua_tousertype_dynamic(L, 2, 0, "CWarp"));
	return 0;
}

static int tolua_get_Pointer_CPoint__reference(lua_State* L)
{
	Pointer<CPoint>* self = (Pointer<CPoint>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPoint>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CPoint");
	return 1;
}

static int tolua_set_Pointer_CPoint__reference(lua_State* L)
{
	Pointer<CPoint>* self = (Pointer<CPoint>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPoint>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CPoint*)tolua_tousertype_dynamic(L, 2, 0, "CPoint");
	return 0;
}

static int tolua_function_Pointer_CPoint__setValue(lua_State* L)
{
	Pointer<CPoint>* self = (Pointer<CPoint>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPoint>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CPoint*)tolua_tousertype_dynamic(L, 2, 0, "CPoint"));
	return 0;
}

static int tolua_get_Pointer_CResWED__reference(lua_State* L)
{
	Pointer<CResWED>* self = (Pointer<CResWED>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResWED>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResWED");
	return 1;
}

static int tolua_set_Pointer_CResWED__reference(lua_State* L)
{
	Pointer<CResWED>* self = (Pointer<CResWED>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResWED>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResWED*)tolua_tousertype_dynamic(L, 2, 0, "CResWED");
	return 0;
}

static int tolua_function_Pointer_CResWED__setValue(lua_State* L)
{
	Pointer<CResWED>* self = (Pointer<CResWED>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResWED>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResWED*)tolua_tousertype_dynamic(L, 2, 0, "CResWED"));
	return 0;
}

static int tolua_get_Pointer_CInfTileSet__reference(lua_State* L)
{
	Pointer<CInfTileSet>* self = (Pointer<CInfTileSet>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfTileSet>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CInfTileSet");
	return 1;
}

static int tolua_set_Pointer_CInfTileSet__reference(lua_State* L)
{
	Pointer<CInfTileSet>* self = (Pointer<CInfTileSet>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfTileSet>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CInfTileSet*)tolua_tousertype_dynamic(L, 2, 0, "CInfTileSet");
	return 0;
}

static int tolua_function_Pointer_CInfTileSet__setValue(lua_State* L)
{
	Pointer<CInfTileSet>* self = (Pointer<CInfTileSet>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfTileSet>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CInfTileSet*)tolua_tousertype_dynamic(L, 2, 0, "CInfTileSet"));
	return 0;
}

static int tolua_get_Pointer_CVRamPool__reference(lua_State* L)
{
	Pointer<CVRamPool>* self = (Pointer<CVRamPool>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVRamPool>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVRamPool");
	return 1;
}

static int tolua_set_Pointer_CVRamPool__reference(lua_State* L)
{
	Pointer<CVRamPool>* self = (Pointer<CVRamPool>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVRamPool>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVRamPool*)tolua_tousertype_dynamic(L, 2, 0, "CVRamPool");
	return 0;
}

static int tolua_function_Pointer_CVRamPool__setValue(lua_State* L)
{
	Pointer<CVRamPool>* self = (Pointer<CVRamPool>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVRamPool>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVRamPool*)tolua_tousertype_dynamic(L, 2, 0, "CVRamPool"));
	return 0;
}

static int tolua_get_Pointer_CVidMode__reference(lua_State* L)
{
	Pointer<CVidMode>* self = (Pointer<CVidMode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVidMode");
	return 1;
}

static int tolua_set_Pointer_CVidMode__reference(lua_State* L)
{
	Pointer<CVidMode>* self = (Pointer<CVidMode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidMode*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode");
	return 0;
}

static int tolua_function_Pointer_CVidMode__setValue(lua_State* L)
{
	Pointer<CVidMode>* self = (Pointer<CVidMode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVidMode*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode"));
	return 0;
}

static int tolua_get_Pointer_CGameArea__reference(lua_State* L)
{
	Pointer<CGameArea>* self = (Pointer<CGameArea>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameArea>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameArea");
	return 1;
}

static int tolua_set_Pointer_CGameArea__reference(lua_State* L)
{
	Pointer<CGameArea>* self = (Pointer<CGameArea>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameArea>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameArea*)tolua_tousertype_dynamic(L, 2, 0, "CGameArea");
	return 0;
}

static int tolua_function_Pointer_CGameArea__setValue(lua_State* L)
{
	Pointer<CGameArea>* self = (Pointer<CGameArea>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameArea>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameArea*)tolua_tousertype_dynamic(L, 2, 0, "CGameArea"));
	return 0;
}

static int tolua_get_Pointer_CPtrList__reference(lua_State* L)
{
	Pointer<CPtrList>* self = (Pointer<CPtrList>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPtrList>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CPtrList");
	return 1;
}

static int tolua_set_Pointer_CPtrList__reference(lua_State* L)
{
	Pointer<CPtrList>* self = (Pointer<CPtrList>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPtrList>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CPtrList*)tolua_tousertype_dynamic(L, 2, 0, "CPtrList");
	return 0;
}

static int tolua_function_Pointer_CPtrList__setValue(lua_State* L)
{
	Pointer<CPtrList>* self = (Pointer<CPtrList>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPtrList>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CPtrList*)tolua_tousertype_dynamic(L, 2, 0, "CPtrList"));
	return 0;
}

static int tolua_get_Pointer_CPtrList_CNode__reference(lua_State* L)
{
	Pointer<CPtrList_CNode>* self = (Pointer<CPtrList_CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPtrList_CNode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CPtrList_CNode");
	return 1;
}

static int tolua_set_Pointer_CPtrList_CNode__reference(lua_State* L)
{
	Pointer<CPtrList_CNode>* self = (Pointer<CPtrList_CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPtrList_CNode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CPtrList_CNode");
	return 0;
}

static int tolua_function_Pointer_CPtrList_CNode__setValue(lua_State* L)
{
	Pointer<CPtrList_CNode>* self = (Pointer<CPtrList_CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPtrList_CNode>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CPtrList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CPtrList_CNode"));
	return 0;
}

static int tolua_get_Pointer_mosHeader_st__reference(lua_State* L)
{
	Pointer<mosHeader_st>* self = (Pointer<mosHeader_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<mosHeader_st>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "mosHeader_st");
	return 1;
}

static int tolua_set_Pointer_mosHeader_st__reference(lua_State* L)
{
	Pointer<mosHeader_st>* self = (Pointer<mosHeader_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<mosHeader_st>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (mosHeader_st*)tolua_tousertype_dynamic(L, 2, 0, "mosHeader_st");
	return 0;
}

static int tolua_function_Pointer_mosHeader_st__setValue(lua_State* L)
{
	Pointer<mosHeader_st>* self = (Pointer<mosHeader_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<mosHeader_st>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(mosHeader_st*)tolua_tousertype_dynamic(L, 2, 0, "mosHeader_st"));
	return 0;
}

static int tolua_get_Pointer_CRes__reference(lua_State* L)
{
	Pointer<CRes>* self = (Pointer<CRes>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRes>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CRes");
	return 1;
}

static int tolua_set_Pointer_CRes__reference(lua_State* L)
{
	Pointer<CRes>* self = (Pointer<CRes>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRes>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CRes*)tolua_tousertype_dynamic(L, 2, 0, "CRes");
	return 0;
}

static int tolua_function_Pointer_CRes__setValue(lua_State* L)
{
	Pointer<CRes>* self = (Pointer<CRes>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRes>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CRes*)tolua_tousertype_dynamic(L, 2, 0, "CRes"));
	return 0;
}

static int tolua_get_Pointer_CResRef__reference(lua_State* L)
{
	Pointer<CResRef>* self = (Pointer<CResRef>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResRef>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResRef");
	return 1;
}

static int tolua_set_Pointer_CResRef__reference(lua_State* L)
{
	Pointer<CResRef>* self = (Pointer<CResRef>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResRef>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResRef*)tolua_tousertype_dynamic(L, 2, 0, "CResRef");
	return 0;
}

static int tolua_function_Pointer_CResRef__setValue(lua_State* L)
{
	Pointer<CResRef>* self = (Pointer<CResRef>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResRef>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResRef*)tolua_tousertype_dynamic(L, 2, 0, "CResRef"));
	return 0;
}

static int tolua_get_Pointer_UI_Control_st__reference(lua_State* L)
{
	Pointer<UI_Control_st>* self = (Pointer<UI_Control_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UI_Control_st>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "UI_Control_st");
	return 1;
}

static int tolua_set_Pointer_UI_Control_st__reference(lua_State* L)
{
	Pointer<UI_Control_st>* self = (Pointer<UI_Control_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UI_Control_st>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (UI_Control_st*)tolua_tousertype_dynamic(L, 2, 0, "UI_Control_st");
	return 0;
}

static int tolua_function_Pointer_UI_Control_st__setValue(lua_State* L)
{
	Pointer<UI_Control_st>* self = (Pointer<UI_Control_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UI_Control_st>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(UI_Control_st*)tolua_tousertype_dynamic(L, 2, 0, "UI_Control_st"));
	return 0;
}

static int tolua_get_Pointer_UI_PanelHeader_st__reference(lua_State* L)
{
	Pointer<UI_PanelHeader_st>* self = (Pointer<UI_PanelHeader_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UI_PanelHeader_st>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "UI_PanelHeader_st");
	return 1;
}

static int tolua_set_Pointer_UI_PanelHeader_st__reference(lua_State* L)
{
	Pointer<UI_PanelHeader_st>* self = (Pointer<UI_PanelHeader_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UI_PanelHeader_st>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 2, 0, "UI_PanelHeader_st");
	return 0;
}

static int tolua_function_Pointer_UI_PanelHeader_st__setValue(lua_State* L)
{
	Pointer<UI_PanelHeader_st>* self = (Pointer<UI_PanelHeader_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UI_PanelHeader_st>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 2, 0, "UI_PanelHeader_st"));
	return 0;
}

static int tolua_get_Pointer_CSyncObject__reference(lua_State* L)
{
	Pointer<CSyncObject>* self = (Pointer<CSyncObject>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSyncObject>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CSyncObject");
	return 1;
}

static int tolua_set_Pointer_CSyncObject__reference(lua_State* L)
{
	Pointer<CSyncObject>* self = (Pointer<CSyncObject>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSyncObject>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CSyncObject*)tolua_tousertype_dynamic(L, 2, 0, "CSyncObject");
	return 0;
}

static int tolua_function_Pointer_CSyncObject__setValue(lua_State* L)
{
	Pointer<CSyncObject>* self = (Pointer<CSyncObject>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSyncObject>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CSyncObject*)tolua_tousertype_dynamic(L, 2, 0, "CSyncObject"));
	return 0;
}

static int tolua_get_Pointer_CUIControlBase__reference(lua_State* L)
{
	Pointer<CUIControlBase>* self = (Pointer<CUIControlBase>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlBase>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUIControlBase");
	return 1;
}

static int tolua_set_Pointer_CUIControlBase__reference(lua_State* L)
{
	Pointer<CUIControlBase>* self = (Pointer<CUIControlBase>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlBase>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUIControlBase*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlBase");
	return 0;
}

static int tolua_function_Pointer_CUIControlBase__setValue(lua_State* L)
{
	Pointer<CUIControlBase>* self = (Pointer<CUIControlBase>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlBase>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUIControlBase*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlBase"));
	return 0;
}

static int tolua_get_Pointer_CUIPanel__reference(lua_State* L)
{
	Pointer<CUIPanel>* self = (Pointer<CUIPanel>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIPanel>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUIPanel");
	return 1;
}

static int tolua_set_Pointer_CUIPanel__reference(lua_State* L)
{
	Pointer<CUIPanel>* self = (Pointer<CUIPanel>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIPanel>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUIPanel*)tolua_tousertype_dynamic(L, 2, 0, "CUIPanel");
	return 0;
}

static int tolua_function_Pointer_CUIPanel__setValue(lua_State* L)
{
	Pointer<CUIPanel>* self = (Pointer<CUIPanel>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIPanel>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUIPanel*)tolua_tousertype_dynamic(L, 2, 0, "CUIPanel"));
	return 0;
}

static int tolua_get_Pointer_CBaldurEngine__reference(lua_State* L)
{
	Pointer<CBaldurEngine>* self = (Pointer<CBaldurEngine>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurEngine>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CBaldurEngine");
	return 1;
}

static int tolua_set_Pointer_CBaldurEngine__reference(lua_State* L)
{
	Pointer<CBaldurEngine>* self = (Pointer<CBaldurEngine>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurEngine>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CBaldurEngine*)tolua_tousertype_dynamic(L, 2, 0, "CBaldurEngine");
	return 0;
}

static int tolua_function_Pointer_CBaldurEngine__setValue(lua_State* L)
{
	Pointer<CBaldurEngine>* self = (Pointer<CBaldurEngine>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurEngine>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CBaldurEngine*)tolua_tousertype_dynamic(L, 2, 0, "CBaldurEngine"));
	return 0;
}

static int tolua_get_Pointer_CUIManager__reference(lua_State* L)
{
	Pointer<CUIManager>* self = (Pointer<CUIManager>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIManager>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUIManager");
	return 1;
}

static int tolua_set_Pointer_CUIManager__reference(lua_State* L)
{
	Pointer<CUIManager>* self = (Pointer<CUIManager>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIManager>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUIManager*)tolua_tousertype_dynamic(L, 2, 0, "CUIManager");
	return 0;
}

static int tolua_function_Pointer_CUIManager__setValue(lua_State* L)
{
	Pointer<CUIManager>* self = (Pointer<CUIManager>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIManager>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUIManager*)tolua_tousertype_dynamic(L, 2, 0, "CUIManager"));
	return 0;
}

static int tolua_get_Pointer_CRect__reference(lua_State* L)
{
	Pointer<CRect>* self = (Pointer<CRect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRect>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CRect");
	return 1;
}

static int tolua_set_Pointer_CRect__reference(lua_State* L)
{
	Pointer<CRect>* self = (Pointer<CRect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRect>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CRect*)tolua_tousertype_dynamic(L, 2, 0, "CRect");
	return 0;
}

static int tolua_function_Pointer_CRect__setValue(lua_State* L)
{
	Pointer<CRect>* self = (Pointer<CRect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRect>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CRect*)tolua_tousertype_dynamic(L, 2, 0, "CRect"));
	return 0;
}

static int tolua_get_Pointer_CString__reference(lua_State* L)
{
	Pointer<CString>* self = (Pointer<CString>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CString>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CString");
	return 1;
}

static int tolua_set_Pointer_CString__reference(lua_State* L)
{
	Pointer<CString>* self = (Pointer<CString>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CString>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CString*)tolua_tousertype_dynamic(L, 2, 0, "CString");
	return 0;
}

static int tolua_function_Pointer_CString__setValue(lua_State* L)
{
	Pointer<CString>* self = (Pointer<CString>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CString>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CString*)tolua_tousertype_dynamic(L, 2, 0, "CString"));
	return 0;
}

static int tolua_get_Pointer_DDSURFACEDESC__reference(lua_State* L)
{
	Pointer<DDSURFACEDESC>* self = (Pointer<DDSURFACEDESC>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DDSURFACEDESC>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "DDSURFACEDESC");
	return 1;
}

static int tolua_set_Pointer_DDSURFACEDESC__reference(lua_State* L)
{
	Pointer<DDSURFACEDESC>* self = (Pointer<DDSURFACEDESC>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DDSURFACEDESC>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (DDSURFACEDESC*)tolua_tousertype_dynamic(L, 2, 0, "DDSURFACEDESC");
	return 0;
}

static int tolua_function_Pointer_DDSURFACEDESC__setValue(lua_State* L)
{
	Pointer<DDSURFACEDESC>* self = (Pointer<DDSURFACEDESC>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DDSURFACEDESC>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(DDSURFACEDESC*)tolua_tousertype_dynamic(L, 2, 0, "DDSURFACEDESC"));
	return 0;
}

static int tolua_get_Pointer_CVidFont__reference(lua_State* L)
{
	Pointer<CVidFont>* self = (Pointer<CVidFont>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidFont>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVidFont");
	return 1;
}

static int tolua_set_Pointer_CVidFont__reference(lua_State* L)
{
	Pointer<CVidFont>* self = (Pointer<CVidFont>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidFont>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidFont*)tolua_tousertype_dynamic(L, 2, 0, "CVidFont");
	return 0;
}

static int tolua_function_Pointer_CVidFont__setValue(lua_State* L)
{
	Pointer<CVidFont>* self = (Pointer<CVidFont>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidFont>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVidFont*)tolua_tousertype_dynamic(L, 2, 0, "CVidFont"));
	return 0;
}

static int tolua_get_Pointer_IDirectDrawSurface___reference(lua_State* L)
{
	Pointer<IDirectDrawSurface*>* self = (Pointer<IDirectDrawSurface*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDrawSurface*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<IDirectDrawSurface>");
	return 1;
}

static int tolua_set_Pointer_IDirectDrawSurface___reference(lua_State* L)
{
	Pointer<IDirectDrawSurface*>* self = (Pointer<IDirectDrawSurface*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDrawSurface*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (IDirectDrawSurface**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<IDirectDrawSurface>");
	return 0;
}

static int tolua_function_Pointer_IDirectDrawSurface___getValue(lua_State* L)
{
	Pointer<IDirectDrawSurface*>* self = (Pointer<IDirectDrawSurface*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDrawSurface*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	IDirectDrawSurface* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "IDirectDrawSurface");
	return 1;
}

static int tolua_function_Pointer_IDirectDrawSurface___setValue(lua_State* L)
{
	Pointer<IDirectDrawSurface*>* self = (Pointer<IDirectDrawSurface*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDrawSurface*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((IDirectDrawSurface*)tolua_tousertype_dynamic(L, 2, 0, "IDirectDrawSurface"));
	return 0;
}

static int tolua_get_Pointer_void___reference(lua_State* L)
{
	Pointer<void*>* self = (Pointer<void*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<void*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "VoidPointer");
	return 1;
}

static int tolua_set_Pointer_void___reference(lua_State* L)
{
	Pointer<void*>* self = (Pointer<void*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<void*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (void**)tolua_tousertype_dynamic(L, 2, 0, "VoidPointer");
	return 0;
}

static int tolua_function_Pointer_void___getValue(lua_State* L)
{
	Pointer<void*>* self = (Pointer<void*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<void*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	void* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "UnmappedUserType");
	return 1;
}

static int tolua_function_Pointer_void___setValue(lua_State* L)
{
	Pointer<void*>* self = (Pointer<void*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<void*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType"));
	return 0;
}

static int tolua_get_Pointer_uint__reference(lua_State* L)
{
	Pointer<uint>* self = (Pointer<uint>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<uint>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<uint>");
	return 1;
}

static int tolua_set_Pointer_uint__reference(lua_State* L)
{
	Pointer<uint>* self = (Pointer<uint>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<uint>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (uint*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uint>");
	return 0;
}

static int tolua_function_Pointer_uint__getValue(lua_State* L)
{
	Pointer<uint>* self = (Pointer<uint>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<uint>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	uint returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_uint__setValue(lua_State* L)
{
	Pointer<uint>* self = (Pointer<uint>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<uint>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<uint>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_CGameEffect__reference(lua_State* L)
{
	Pointer<CGameEffect>* self = (Pointer<CGameEffect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffect>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameEffect");
	return 1;
}

static int tolua_set_Pointer_CGameEffect__reference(lua_State* L)
{
	Pointer<CGameEffect>* self = (Pointer<CGameEffect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffect>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameEffect*)tolua_tousertype_dynamic(L, 2, 0, "CGameEffect");
	return 0;
}

static int tolua_function_Pointer_CGameEffect__setValue(lua_State* L)
{
	Pointer<CGameEffect>* self = (Pointer<CGameEffect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffect>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameEffect*)tolua_tousertype_dynamic(L, 2, 0, "CGameEffect"));
	return 0;
}

static int tolua_get_Pointer_CTypedPtrList_CPtrList_CGameEffect____CNode__reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 1;
}

static int tolua_set_Pointer_CTypedPtrList_CPtrList_CGameEffect____CNode__reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 0;
}

static int tolua_function_Pointer_CTypedPtrList_CPtrList_CGameEffect____CNode__setValue(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode"));
	return 0;
}

static int tolua_get_Pointer_tagRGBQUAD__reference(lua_State* L)
{
	Pointer<tagRGBQUAD>* self = (Pointer<tagRGBQUAD>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<tagRGBQUAD>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "tagRGBQUAD");
	return 1;
}

static int tolua_set_Pointer_tagRGBQUAD__reference(lua_State* L)
{
	Pointer<tagRGBQUAD>* self = (Pointer<tagRGBQUAD>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<tagRGBQUAD>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (tagRGBQUAD*)tolua_tousertype_dynamic(L, 2, 0, "tagRGBQUAD");
	return 0;
}

static int tolua_function_Pointer_tagRGBQUAD__setValue(lua_State* L)
{
	Pointer<tagRGBQUAD>* self = (Pointer<tagRGBQUAD>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<tagRGBQUAD>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(tagRGBQUAD*)tolua_tousertype_dynamic(L, 2, 0, "tagRGBQUAD"));
	return 0;
}

static int tolua_get_Pointer_CGameObject__reference(lua_State* L)
{
	Pointer<CGameObject>* self = (Pointer<CGameObject>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObject>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameObject");
	return 1;
}

static int tolua_set_Pointer_CGameObject__reference(lua_State* L)
{
	Pointer<CGameObject>* self = (Pointer<CGameObject>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObject>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameObject*)tolua_tousertype_dynamic(L, 2, 0, "CGameObject");
	return 0;
}

static int tolua_function_Pointer_CGameObject__setValue(lua_State* L)
{
	Pointer<CGameObject>* self = (Pointer<CGameObject>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObject>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameObject*)tolua_tousertype_dynamic(L, 2, 0, "CGameObject"));
	return 0;
}

static int tolua_get_Pointer_CAIObjectType__reference(lua_State* L)
{
	Pointer<CAIObjectType>* self = (Pointer<CAIObjectType>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAIObjectType>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CAIObjectType");
	return 1;
}

static int tolua_set_Pointer_CAIObjectType__reference(lua_State* L)
{
	Pointer<CAIObjectType>* self = (Pointer<CAIObjectType>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAIObjectType>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CAIObjectType*)tolua_tousertype_dynamic(L, 2, 0, "CAIObjectType");
	return 0;
}

static int tolua_function_Pointer_CAIObjectType__setValue(lua_State* L)
{
	Pointer<CAIObjectType>* self = (Pointer<CAIObjectType>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAIObjectType>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CAIObjectType*)tolua_tousertype_dynamic(L, 2, 0, "CAIObjectType"));
	return 0;
}

static int tolua_get_Pointer_CItem__reference(lua_State* L)
{
	Pointer<CItem>* self = (Pointer<CItem>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CItem>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CItem");
	return 1;
}

static int tolua_set_Pointer_CItem__reference(lua_State* L)
{
	Pointer<CItem>* self = (Pointer<CItem>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CItem>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CItem*)tolua_tousertype_dynamic(L, 2, 0, "CItem");
	return 0;
}

static int tolua_function_Pointer_CItem__setValue(lua_State* L)
{
	Pointer<CItem>* self = (Pointer<CItem>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CItem>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CItem*)tolua_tousertype_dynamic(L, 2, 0, "CItem"));
	return 0;
}

static int tolua_get_Pointer_CUIControlButton__reference(lua_State* L)
{
	Pointer<CUIControlButton>* self = (Pointer<CUIControlButton>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButton>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUIControlButton");
	return 1;
}

static int tolua_set_Pointer_CUIControlButton__reference(lua_State* L)
{
	Pointer<CUIControlButton>* self = (Pointer<CUIControlButton>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButton>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUIControlButton*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlButton");
	return 0;
}

static int tolua_function_Pointer_CUIControlButton__setValue(lua_State* L)
{
	Pointer<CUIControlButton>* self = (Pointer<CUIControlButton>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButton>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUIControlButton*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlButton"));
	return 0;
}

static int tolua_get_Pointer_CGameAnimationType__reference(lua_State* L)
{
	Pointer<CGameAnimationType>* self = (Pointer<CGameAnimationType>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimationType>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameAnimationType");
	return 1;
}

static int tolua_set_Pointer_CGameAnimationType__reference(lua_State* L)
{
	Pointer<CGameAnimationType>* self = (Pointer<CGameAnimationType>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimationType>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameAnimationType*)tolua_tousertype_dynamic(L, 2, 0, "CGameAnimationType");
	return 0;
}

static int tolua_function_Pointer_CGameAnimationType__setValue(lua_State* L)
{
	Pointer<CGameAnimationType>* self = (Pointer<CGameAnimationType>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimationType>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameAnimationType*)tolua_tousertype_dynamic(L, 2, 0, "CGameAnimationType"));
	return 0;
}

static int tolua_get_Pointer_CProjectile__reference(lua_State* L)
{
	Pointer<CProjectile>* self = (Pointer<CProjectile>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProjectile>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CProjectile");
	return 1;
}

static int tolua_set_Pointer_CProjectile__reference(lua_State* L)
{
	Pointer<CProjectile>* self = (Pointer<CProjectile>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProjectile>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CProjectile*)tolua_tousertype_dynamic(L, 2, 0, "CProjectile");
	return 0;
}

static int tolua_function_Pointer_CProjectile__setValue(lua_State* L)
{
	Pointer<CProjectile>* self = (Pointer<CProjectile>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProjectile>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CProjectile*)tolua_tousertype_dynamic(L, 2, 0, "CProjectile"));
	return 0;
}

static int tolua_get_Pointer_CChitin__reference(lua_State* L)
{
	Pointer<CChitin>* self = (Pointer<CChitin>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CChitin>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CChitin");
	return 1;
}

static int tolua_set_Pointer_CChitin__reference(lua_State* L)
{
	Pointer<CChitin>* self = (Pointer<CChitin>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CChitin>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CChitin*)tolua_tousertype_dynamic(L, 2, 0, "CChitin");
	return 0;
}

static int tolua_function_Pointer_CChitin__setValue(lua_State* L)
{
	Pointer<CChitin>* self = (Pointer<CChitin>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CChitin>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CChitin*)tolua_tousertype_dynamic(L, 2, 0, "CChitin"));
	return 0;
}

static int tolua_get_Pointer_IDirectDraw__reference(lua_State* L)
{
	Pointer<IDirectDraw>* self = (Pointer<IDirectDraw>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDraw>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "IDirectDraw");
	return 1;
}

static int tolua_set_Pointer_IDirectDraw__reference(lua_State* L)
{
	Pointer<IDirectDraw>* self = (Pointer<IDirectDraw>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDraw>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (IDirectDraw*)tolua_tousertype_dynamic(L, 2, 0, "IDirectDraw");
	return 0;
}

static int tolua_get_Pointer_byte__reference(lua_State* L)
{
	Pointer<byte>* self = (Pointer<byte>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<byte>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<byte>");
	return 1;
}

static int tolua_set_Pointer_byte__reference(lua_State* L)
{
	Pointer<byte>* self = (Pointer<byte>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<byte>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (byte*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<byte>");
	return 0;
}

static int tolua_function_Pointer_byte__getValue(lua_State* L)
{
	Pointer<byte>* self = (Pointer<byte>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<byte>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	byte returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_byte__setValue(lua_State* L)
{
	Pointer<byte>* self = (Pointer<byte>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<byte>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<byte>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_CObList_CNode__reference(lua_State* L)
{
	Pointer<CObList_CNode>* self = (Pointer<CObList_CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObList_CNode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CObList_CNode");
	return 1;
}

static int tolua_set_Pointer_CObList_CNode__reference(lua_State* L)
{
	Pointer<CObList_CNode>* self = (Pointer<CObList_CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObList_CNode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CObList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CObList_CNode");
	return 0;
}

static int tolua_function_Pointer_CObList_CNode__setValue(lua_State* L)
{
	Pointer<CObList_CNode>* self = (Pointer<CObList_CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObList_CNode>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CObList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CObList_CNode"));
	return 0;
}

static int tolua_get_Pointer_CVideoFunctions__reference(lua_State* L)
{
	Pointer<CVideoFunctions>* self = (Pointer<CVideoFunctions>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVideoFunctions>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVideoFunctions");
	return 1;
}

static int tolua_set_Pointer_CVideoFunctions__reference(lua_State* L)
{
	Pointer<CVideoFunctions>* self = (Pointer<CVideoFunctions>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVideoFunctions>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVideoFunctions*)tolua_tousertype_dynamic(L, 2, 0, "CVideoFunctions");
	return 0;
}

static int tolua_function_Pointer_CVideoFunctions__setValue(lua_State* L)
{
	Pointer<CVideoFunctions>* self = (Pointer<CVideoFunctions>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVideoFunctions>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVideoFunctions*)tolua_tousertype_dynamic(L, 2, 0, "CVideoFunctions"));
	return 0;
}

static int tolua_get_Pointer_IDirectDrawSurface__reference(lua_State* L)
{
	Pointer<IDirectDrawSurface>* self = (Pointer<IDirectDrawSurface>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDrawSurface>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "IDirectDrawSurface");
	return 1;
}

static int tolua_set_Pointer_IDirectDrawSurface__reference(lua_State* L)
{
	Pointer<IDirectDrawSurface>* self = (Pointer<IDirectDrawSurface>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDrawSurface>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (IDirectDrawSurface*)tolua_tousertype_dynamic(L, 2, 0, "IDirectDrawSurface");
	return 0;
}

static int tolua_get_Pointer_DDBLTFX__reference(lua_State* L)
{
	Pointer<DDBLTFX>* self = (Pointer<DDBLTFX>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DDBLTFX>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "DDBLTFX");
	return 1;
}

static int tolua_set_Pointer_DDBLTFX__reference(lua_State* L)
{
	Pointer<DDBLTFX>* self = (Pointer<DDBLTFX>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DDBLTFX>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (DDBLTFX*)tolua_tousertype_dynamic(L, 2, 0, "DDBLTFX");
	return 0;
}

static int tolua_function_Pointer_DDBLTFX__setValue(lua_State* L)
{
	Pointer<DDBLTFX>* self = (Pointer<DDBLTFX>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DDBLTFX>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(DDBLTFX*)tolua_tousertype_dynamic(L, 2, 0, "DDBLTFX"));
	return 0;
}

static int tolua_get_Pointer_CGameSprite__reference(lua_State* L)
{
	Pointer<CGameSprite>* self = (Pointer<CGameSprite>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameSprite>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameSprite");
	return 1;
}

static int tolua_set_Pointer_CGameSprite__reference(lua_State* L)
{
	Pointer<CGameSprite>* self = (Pointer<CGameSprite>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameSprite>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameSprite*)tolua_tousertype_dynamic(L, 2, 0, "CGameSprite");
	return 0;
}

static int tolua_function_Pointer_CGameSprite__setValue(lua_State* L)
{
	Pointer<CGameSprite>* self = (Pointer<CGameSprite>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameSprite>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameSprite*)tolua_tousertype_dynamic(L, 2, 0, "CGameSprite"));
	return 0;
}

static int tolua_get_Pointer_CRuntimeClass__reference(lua_State* L)
{
	Pointer<CRuntimeClass>* self = (Pointer<CRuntimeClass>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRuntimeClass>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CRuntimeClass");
	return 1;
}

static int tolua_set_Pointer_CRuntimeClass__reference(lua_State* L)
{
	Pointer<CRuntimeClass>* self = (Pointer<CRuntimeClass>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRuntimeClass>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CRuntimeClass*)tolua_tousertype_dynamic(L, 2, 0, "CRuntimeClass");
	return 0;
}

static int tolua_function_Pointer_CRuntimeClass__setValue(lua_State* L)
{
	Pointer<CRuntimeClass>* self = (Pointer<CRuntimeClass>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRuntimeClass>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CRuntimeClass*)tolua_tousertype_dynamic(L, 2, 0, "CRuntimeClass"));
	return 0;
}

static int tolua_get_Pointer_CObject__reference(lua_State* L)
{
	Pointer<CObject>* self = (Pointer<CObject>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObject>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CObject");
	return 1;
}

static int tolua_set_Pointer_CObject__reference(lua_State* L)
{
	Pointer<CObject>* self = (Pointer<CObject>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObject>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CObject*)tolua_tousertype_dynamic(L, 2, 0, "CObject");
	return 0;
}

static int tolua_function_Pointer_CObject__setValue(lua_State* L)
{
	Pointer<CObject>* self = (Pointer<CObject>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObject>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CObject*)tolua_tousertype_dynamic(L, 2, 0, "CObject"));
	return 0;
}

static int tolua_get_Pointer_CArchive__reference(lua_State* L)
{
	Pointer<CArchive>* self = (Pointer<CArchive>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CArchive>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CArchive");
	return 1;
}

static int tolua_set_Pointer_CArchive__reference(lua_State* L)
{
	Pointer<CArchive>* self = (Pointer<CArchive>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CArchive>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CArchive*)tolua_tousertype_dynamic(L, 2, 0, "CArchive");
	return 0;
}

static int tolua_function_Pointer_CArchive__setValue(lua_State* L)
{
	Pointer<CArchive>* self = (Pointer<CArchive>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CArchive>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CArchive*)tolua_tousertype_dynamic(L, 2, 0, "CArchive"));
	return 0;
}

static int tolua_get_Pointer_CGameAIBase__reference(lua_State* L)
{
	Pointer<CGameAIBase>* self = (Pointer<CGameAIBase>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAIBase>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameAIBase");
	return 1;
}

static int tolua_set_Pointer_CGameAIBase__reference(lua_State* L)
{
	Pointer<CGameAIBase>* self = (Pointer<CGameAIBase>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAIBase>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameAIBase*)tolua_tousertype_dynamic(L, 2, 0, "CGameAIBase");
	return 0;
}

static int tolua_function_Pointer_CGameAIBase__setValue(lua_State* L)
{
	Pointer<CGameAIBase>* self = (Pointer<CGameAIBase>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAIBase>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameAIBase*)tolua_tousertype_dynamic(L, 2, 0, "CGameAIBase"));
	return 0;
}

static int tolua_get_Pointer_CResourceManagerHashEntry__reference(lua_State* L)
{
	Pointer<CResourceManagerHashEntry>* self = (Pointer<CResourceManagerHashEntry>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResourceManagerHashEntry>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResourceManagerHashEntry");
	return 1;
}

static int tolua_set_Pointer_CResourceManagerHashEntry__reference(lua_State* L)
{
	Pointer<CResourceManagerHashEntry>* self = (Pointer<CResourceManagerHashEntry>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResourceManagerHashEntry>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 2, 0, "CResourceManagerHashEntry");
	return 0;
}

static int tolua_function_Pointer_CResourceManagerHashEntry__setValue(lua_State* L)
{
	Pointer<CResourceManagerHashEntry>* self = (Pointer<CResourceManagerHashEntry>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResourceManagerHashEntry>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 2, 0, "CResourceManagerHashEntry"));
	return 0;
}

static int tolua_get_Pointer_CGameObjectArrayEntry__reference(lua_State* L)
{
	Pointer<CGameObjectArrayEntry>* self = (Pointer<CGameObjectArrayEntry>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObjectArrayEntry>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameObjectArrayEntry");
	return 1;
}

static int tolua_set_Pointer_CGameObjectArrayEntry__reference(lua_State* L)
{
	Pointer<CGameObjectArrayEntry>* self = (Pointer<CGameObjectArrayEntry>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObjectArrayEntry>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameObjectArrayEntry*)tolua_tousertype_dynamic(L, 2, 0, "CGameObjectArrayEntry");
	return 0;
}

static int tolua_function_Pointer_CGameObjectArrayEntry__setValue(lua_State* L)
{
	Pointer<CGameObjectArrayEntry>* self = (Pointer<CGameObjectArrayEntry>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObjectArrayEntry>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameObjectArrayEntry*)tolua_tousertype_dynamic(L, 2, 0, "CGameObjectArrayEntry"));
	return 0;
}

static int tolua_get_Pointer_CInfinity__reference(lua_State* L)
{
	Pointer<CInfinity>* self = (Pointer<CInfinity>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfinity>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CInfinity");
	return 1;
}

static int tolua_set_Pointer_CInfinity__reference(lua_State* L)
{
	Pointer<CInfinity>* self = (Pointer<CInfinity>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfinity>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CInfinity*)tolua_tousertype_dynamic(L, 2, 0, "CInfinity");
	return 0;
}

static int tolua_function_Pointer_CInfinity__setValue(lua_State* L)
{
	Pointer<CInfinity>* self = (Pointer<CInfinity>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfinity>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CInfinity*)tolua_tousertype_dynamic(L, 2, 0, "CInfinity"));
	return 0;
}

static int tolua_get_Pointer_CGameDialogEntry___reference(lua_State* L)
{
	Pointer<CGameDialogEntry*>* self = (Pointer<CGameDialogEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameDialogEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CGameDialogEntry>");
	return 1;
}

static int tolua_set_Pointer_CGameDialogEntry___reference(lua_State* L)
{
	Pointer<CGameDialogEntry*>* self = (Pointer<CGameDialogEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameDialogEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameDialogEntry**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CGameDialogEntry>");
	return 0;
}

static int tolua_function_Pointer_CGameDialogEntry___getValue(lua_State* L)
{
	Pointer<CGameDialogEntry*>* self = (Pointer<CGameDialogEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameDialogEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CGameDialogEntry* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CGameDialogEntry");
	return 1;
}

static int tolua_function_Pointer_CGameDialogEntry___setValue(lua_State* L)
{
	Pointer<CGameDialogEntry*>* self = (Pointer<CGameDialogEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameDialogEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CGameDialogEntry*)tolua_tousertype_dynamic(L, 2, 0, "CGameDialogEntry"));
	return 0;
}

static int tolua_get_Pointer_CMessage__reference(lua_State* L)
{
	Pointer<CMessage>* self = (Pointer<CMessage>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessage>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CMessage");
	return 1;
}

static int tolua_set_Pointer_CMessage__reference(lua_State* L)
{
	Pointer<CMessage>* self = (Pointer<CMessage>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessage>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CMessage*)tolua_tousertype_dynamic(L, 2, 0, "CMessage");
	return 0;
}

static int tolua_function_Pointer_CMessage__setValue(lua_State* L)
{
	Pointer<CMessage>* self = (Pointer<CMessage>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessage>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CMessage*)tolua_tousertype_dynamic(L, 2, 0, "CMessage"));
	return 0;
}

static int tolua_get_Pointer_byte___reference(lua_State* L)
{
	Pointer<byte*>* self = (Pointer<byte*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<byte*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<byte>");
	return 1;
}

static int tolua_set_Pointer_byte___reference(lua_State* L)
{
	Pointer<byte*>* self = (Pointer<byte*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<byte*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (byte**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<byte>");
	return 0;
}

static int tolua_function_Pointer_byte___getValue(lua_State* L)
{
	Pointer<byte*>* self = (Pointer<byte*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<byte*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	byte* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "Primitive<byte>");
	return 1;
}

static int tolua_function_Pointer_byte___setValue(lua_State* L)
{
	Pointer<byte*>* self = (Pointer<byte*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<byte*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((byte*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<byte>"));
	return 0;
}

static int tolua_get_Pointer_VariableArray_CResourceManagerHashEntry___reference(lua_State* L)
{
	Pointer<VariableArray<CResourceManagerHashEntry>>* self = (Pointer<VariableArray<CResourceManagerHashEntry>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<VariableArray<CResourceManagerHashEntry>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "VariableArray<CResourceManagerHashEntry>");
	return 1;
}

static int tolua_set_Pointer_VariableArray_CResourceManagerHashEntry___reference(lua_State* L)
{
	Pointer<VariableArray<CResourceManagerHashEntry>>* self = (Pointer<VariableArray<CResourceManagerHashEntry>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<VariableArray<CResourceManagerHashEntry>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (VariableArray<CResourceManagerHashEntry>*)tolua_tousertype_dynamic(L, 2, 0, "VariableArray<CResourceManagerHashEntry>");
	return 0;
}

static int tolua_function_Pointer_VariableArray_CResourceManagerHashEntry___setValue(lua_State* L)
{
	Pointer<VariableArray<CResourceManagerHashEntry>>* self = (Pointer<VariableArray<CResourceManagerHashEntry>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<VariableArray<CResourceManagerHashEntry>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(VariableArray<CResourceManagerHashEntry>*)tolua_tousertype_dynamic(L, 2, 0, "VariableArray<CResourceManagerHashEntry>"));
	return 0;
}

static int tolua_get_Pointer_CBaldurChitin___reference(lua_State* L)
{
	Pointer<CBaldurChitin*>* self = (Pointer<CBaldurChitin*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurChitin*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CBaldurChitin>");
	return 1;
}

static int tolua_set_Pointer_CBaldurChitin___reference(lua_State* L)
{
	Pointer<CBaldurChitin*>* self = (Pointer<CBaldurChitin*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurChitin*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CBaldurChitin**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CBaldurChitin>");
	return 0;
}

static int tolua_function_Pointer_CBaldurChitin___getValue(lua_State* L)
{
	Pointer<CBaldurChitin*>* self = (Pointer<CBaldurChitin*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurChitin*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CBaldurChitin* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CBaldurChitin");
	return 1;
}

static int tolua_function_Pointer_CBaldurChitin___setValue(lua_State* L)
{
	Pointer<CBaldurChitin*>* self = (Pointer<CBaldurChitin*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurChitin*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CBaldurChitin*)tolua_tousertype_dynamic(L, 2, 0, "CBaldurChitin"));
	return 0;
}

static int tolua_get_Pointer_const_MSG___reference(lua_State* L)
{
	Pointer<const MSG*>* self = (Pointer<const MSG*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<const MSG*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<const MSG>");
	return 1;
}

static int tolua_set_Pointer_const_MSG___reference(lua_State* L)
{
	Pointer<const MSG*>* self = (Pointer<const MSG*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<const MSG*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (const MSG**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<const MSG>");
	return 0;
}

static int tolua_function_Pointer_const_MSG___getValue(lua_State* L)
{
	Pointer<const MSG*>* self = (Pointer<const MSG*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<const MSG*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	const MSG* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "MSG");
	return 1;
}

static int tolua_get_Pointer_CInfCursor___reference(lua_State* L)
{
	Pointer<CInfCursor*>* self = (Pointer<CInfCursor*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfCursor*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CInfCursor>");
	return 1;
}

static int tolua_set_Pointer_CInfCursor___reference(lua_State* L)
{
	Pointer<CInfCursor*>* self = (Pointer<CInfCursor*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfCursor*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CInfCursor**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CInfCursor>");
	return 0;
}

static int tolua_function_Pointer_CInfCursor___getValue(lua_State* L)
{
	Pointer<CInfCursor*>* self = (Pointer<CInfCursor*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfCursor*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CInfCursor* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CInfCursor");
	return 1;
}

static int tolua_function_Pointer_CInfCursor___setValue(lua_State* L)
{
	Pointer<CInfCursor*>* self = (Pointer<CInfCursor*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfCursor*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CInfCursor*)tolua_tousertype_dynamic(L, 2, 0, "CInfCursor"));
	return 0;
}

static int tolua_get_Pointer_CInfGame___reference(lua_State* L)
{
	Pointer<CInfGame*>* self = (Pointer<CInfGame*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfGame*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CInfGame>");
	return 1;
}

static int tolua_set_Pointer_CInfGame___reference(lua_State* L)
{
	Pointer<CInfGame*>* self = (Pointer<CInfGame*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfGame*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CInfGame**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CInfGame>");
	return 0;
}

static int tolua_function_Pointer_CInfGame___getValue(lua_State* L)
{
	Pointer<CInfGame*>* self = (Pointer<CInfGame*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfGame*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CInfGame* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CInfGame");
	return 1;
}

static int tolua_function_Pointer_CInfGame___setValue(lua_State* L)
{
	Pointer<CInfGame*>* self = (Pointer<CInfGame*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfGame*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CInfGame*)tolua_tousertype_dynamic(L, 2, 0, "CInfGame"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine4___reference(lua_State* L)
{
	Pointer<CUnknownEngine4*>* self = (Pointer<CUnknownEngine4*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine4*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine4>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine4___reference(lua_State* L)
{
	Pointer<CUnknownEngine4*>* self = (Pointer<CUnknownEngine4*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine4*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine4**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine4>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine4___getValue(lua_State* L)
{
	Pointer<CUnknownEngine4*>* self = (Pointer<CUnknownEngine4*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine4*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine4* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine4");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine4___setValue(lua_State* L)
{
	Pointer<CUnknownEngine4*>* self = (Pointer<CUnknownEngine4*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine4*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine4*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine4"));
	return 0;
}

static int tolua_get_Pointer_CBaldurProjector___reference(lua_State* L)
{
	Pointer<CBaldurProjector*>* self = (Pointer<CBaldurProjector*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurProjector*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CBaldurProjector>");
	return 1;
}

static int tolua_set_Pointer_CBaldurProjector___reference(lua_State* L)
{
	Pointer<CBaldurProjector*>* self = (Pointer<CBaldurProjector*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurProjector*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CBaldurProjector**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CBaldurProjector>");
	return 0;
}

static int tolua_function_Pointer_CBaldurProjector___getValue(lua_State* L)
{
	Pointer<CBaldurProjector*>* self = (Pointer<CBaldurProjector*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurProjector*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CBaldurProjector* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CBaldurProjector");
	return 1;
}

static int tolua_function_Pointer_CBaldurProjector___setValue(lua_State* L)
{
	Pointer<CBaldurProjector*>* self = (Pointer<CBaldurProjector*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurProjector*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CBaldurProjector*)tolua_tousertype_dynamic(L, 2, 0, "CBaldurProjector"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine2___reference(lua_State* L)
{
	Pointer<CUnknownEngine2*>* self = (Pointer<CUnknownEngine2*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine2*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine2>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine2___reference(lua_State* L)
{
	Pointer<CUnknownEngine2*>* self = (Pointer<CUnknownEngine2*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine2*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine2**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine2>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine2___getValue(lua_State* L)
{
	Pointer<CUnknownEngine2*>* self = (Pointer<CUnknownEngine2*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine2*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine2* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine2");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine2___setValue(lua_State* L)
{
	Pointer<CUnknownEngine2*>* self = (Pointer<CUnknownEngine2*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine2*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine2*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine2"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine5___reference(lua_State* L)
{
	Pointer<CUnknownEngine5*>* self = (Pointer<CUnknownEngine5*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine5*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine5>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine5___reference(lua_State* L)
{
	Pointer<CUnknownEngine5*>* self = (Pointer<CUnknownEngine5*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine5*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine5**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine5>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine5___getValue(lua_State* L)
{
	Pointer<CUnknownEngine5*>* self = (Pointer<CUnknownEngine5*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine5*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine5* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine5");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine5___setValue(lua_State* L)
{
	Pointer<CUnknownEngine5*>* self = (Pointer<CUnknownEngine5*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine5*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine5*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine5"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine6___reference(lua_State* L)
{
	Pointer<CUnknownEngine6*>* self = (Pointer<CUnknownEngine6*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine6*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine6>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine6___reference(lua_State* L)
{
	Pointer<CUnknownEngine6*>* self = (Pointer<CUnknownEngine6*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine6*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine6**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine6>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine6___getValue(lua_State* L)
{
	Pointer<CUnknownEngine6*>* self = (Pointer<CUnknownEngine6*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine6*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine6* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine6");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine6___setValue(lua_State* L)
{
	Pointer<CUnknownEngine6*>* self = (Pointer<CUnknownEngine6*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine6*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine6*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine6"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine7___reference(lua_State* L)
{
	Pointer<CUnknownEngine7*>* self = (Pointer<CUnknownEngine7*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine7*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine7>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine7___reference(lua_State* L)
{
	Pointer<CUnknownEngine7*>* self = (Pointer<CUnknownEngine7*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine7*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine7**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine7>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine7___getValue(lua_State* L)
{
	Pointer<CUnknownEngine7*>* self = (Pointer<CUnknownEngine7*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine7*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine7* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine7");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine7___setValue(lua_State* L)
{
	Pointer<CUnknownEngine7*>* self = (Pointer<CUnknownEngine7*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine7*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine7*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine7"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine8___reference(lua_State* L)
{
	Pointer<CUnknownEngine8*>* self = (Pointer<CUnknownEngine8*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine8*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine8>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine8___reference(lua_State* L)
{
	Pointer<CUnknownEngine8*>* self = (Pointer<CUnknownEngine8*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine8*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine8**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine8>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine8___getValue(lua_State* L)
{
	Pointer<CUnknownEngine8*>* self = (Pointer<CUnknownEngine8*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine8*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine8* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine8");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine8___setValue(lua_State* L)
{
	Pointer<CUnknownEngine8*>* self = (Pointer<CUnknownEngine8*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine8*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine8*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine8"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine9___reference(lua_State* L)
{
	Pointer<CUnknownEngine9*>* self = (Pointer<CUnknownEngine9*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine9*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine9>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine9___reference(lua_State* L)
{
	Pointer<CUnknownEngine9*>* self = (Pointer<CUnknownEngine9*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine9*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine9**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine9>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine9___getValue(lua_State* L)
{
	Pointer<CUnknownEngine9*>* self = (Pointer<CUnknownEngine9*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine9*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine9* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine9");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine9___setValue(lua_State* L)
{
	Pointer<CUnknownEngine9*>* self = (Pointer<CUnknownEngine9*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine9*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine9*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine9"));
	return 0;
}

static int tolua_get_Pointer_CScreenMap___reference(lua_State* L)
{
	Pointer<CScreenMap*>* self = (Pointer<CScreenMap*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenMap*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CScreenMap>");
	return 1;
}

static int tolua_set_Pointer_CScreenMap___reference(lua_State* L)
{
	Pointer<CScreenMap*>* self = (Pointer<CScreenMap*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenMap*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CScreenMap**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CScreenMap>");
	return 0;
}

static int tolua_function_Pointer_CScreenMap___getValue(lua_State* L)
{
	Pointer<CScreenMap*>* self = (Pointer<CScreenMap*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenMap*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CScreenMap* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CScreenMap");
	return 1;
}

static int tolua_function_Pointer_CScreenMap___setValue(lua_State* L)
{
	Pointer<CScreenMap*>* self = (Pointer<CScreenMap*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenMap*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CScreenMap*)tolua_tousertype_dynamic(L, 2, 0, "CScreenMap"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine11___reference(lua_State* L)
{
	Pointer<CUnknownEngine11*>* self = (Pointer<CUnknownEngine11*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine11*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine11>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine11___reference(lua_State* L)
{
	Pointer<CUnknownEngine11*>* self = (Pointer<CUnknownEngine11*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine11*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine11**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine11>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine11___getValue(lua_State* L)
{
	Pointer<CUnknownEngine11*>* self = (Pointer<CUnknownEngine11*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine11*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine11* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine11");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine11___setValue(lua_State* L)
{
	Pointer<CUnknownEngine11*>* self = (Pointer<CUnknownEngine11*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine11*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine11*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine11"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine12___reference(lua_State* L)
{
	Pointer<CUnknownEngine12*>* self = (Pointer<CUnknownEngine12*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine12*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine12>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine12___reference(lua_State* L)
{
	Pointer<CUnknownEngine12*>* self = (Pointer<CUnknownEngine12*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine12*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine12**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine12>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine12___getValue(lua_State* L)
{
	Pointer<CUnknownEngine12*>* self = (Pointer<CUnknownEngine12*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine12*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine12* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine12");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine12___setValue(lua_State* L)
{
	Pointer<CUnknownEngine12*>* self = (Pointer<CUnknownEngine12*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine12*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine12*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine12"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine13___reference(lua_State* L)
{
	Pointer<CUnknownEngine13*>* self = (Pointer<CUnknownEngine13*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine13*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine13>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine13___reference(lua_State* L)
{
	Pointer<CUnknownEngine13*>* self = (Pointer<CUnknownEngine13*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine13*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine13**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine13>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine13___getValue(lua_State* L)
{
	Pointer<CUnknownEngine13*>* self = (Pointer<CUnknownEngine13*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine13*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine13* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine13");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine13___setValue(lua_State* L)
{
	Pointer<CUnknownEngine13*>* self = (Pointer<CUnknownEngine13*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine13*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine13*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine13"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine14___reference(lua_State* L)
{
	Pointer<CUnknownEngine14*>* self = (Pointer<CUnknownEngine14*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine14*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine14>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine14___reference(lua_State* L)
{
	Pointer<CUnknownEngine14*>* self = (Pointer<CUnknownEngine14*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine14*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine14**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine14>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine14___getValue(lua_State* L)
{
	Pointer<CUnknownEngine14*>* self = (Pointer<CUnknownEngine14*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine14*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine14* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine14");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine14___setValue(lua_State* L)
{
	Pointer<CUnknownEngine14*>* self = (Pointer<CUnknownEngine14*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine14*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine14*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine14"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine15___reference(lua_State* L)
{
	Pointer<CUnknownEngine15*>* self = (Pointer<CUnknownEngine15*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine15*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine15>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine15___reference(lua_State* L)
{
	Pointer<CUnknownEngine15*>* self = (Pointer<CUnknownEngine15*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine15*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine15**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine15>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine15___getValue(lua_State* L)
{
	Pointer<CUnknownEngine15*>* self = (Pointer<CUnknownEngine15*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine15*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine15* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine15");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine15___setValue(lua_State* L)
{
	Pointer<CUnknownEngine15*>* self = (Pointer<CUnknownEngine15*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine15*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine15*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine15"));
	return 0;
}

static int tolua_get_Pointer_CScreenWorld___reference(lua_State* L)
{
	Pointer<CScreenWorld*>* self = (Pointer<CScreenWorld*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenWorld*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CScreenWorld>");
	return 1;
}

static int tolua_set_Pointer_CScreenWorld___reference(lua_State* L)
{
	Pointer<CScreenWorld*>* self = (Pointer<CScreenWorld*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenWorld*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CScreenWorld**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CScreenWorld>");
	return 0;
}

static int tolua_function_Pointer_CScreenWorld___getValue(lua_State* L)
{
	Pointer<CScreenWorld*>* self = (Pointer<CScreenWorld*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenWorld*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CScreenWorld* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CScreenWorld");
	return 1;
}

static int tolua_function_Pointer_CScreenWorld___setValue(lua_State* L)
{
	Pointer<CScreenWorld*>* self = (Pointer<CScreenWorld*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenWorld*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CScreenWorld*)tolua_tousertype_dynamic(L, 2, 0, "CScreenWorld"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine16___reference(lua_State* L)
{
	Pointer<CUnknownEngine16*>* self = (Pointer<CUnknownEngine16*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine16*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine16>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine16___reference(lua_State* L)
{
	Pointer<CUnknownEngine16*>* self = (Pointer<CUnknownEngine16*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine16*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine16**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine16>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine16___getValue(lua_State* L)
{
	Pointer<CUnknownEngine16*>* self = (Pointer<CUnknownEngine16*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine16*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine16* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine16");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine16___setValue(lua_State* L)
{
	Pointer<CUnknownEngine16*>* self = (Pointer<CUnknownEngine16*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine16*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine16*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine16"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine17___reference(lua_State* L)
{
	Pointer<CUnknownEngine17*>* self = (Pointer<CUnknownEngine17*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine17*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine17>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine17___reference(lua_State* L)
{
	Pointer<CUnknownEngine17*>* self = (Pointer<CUnknownEngine17*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine17*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine17**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine17>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine17___getValue(lua_State* L)
{
	Pointer<CUnknownEngine17*>* self = (Pointer<CUnknownEngine17*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine17*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine17* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine17");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine17___setValue(lua_State* L)
{
	Pointer<CUnknownEngine17*>* self = (Pointer<CUnknownEngine17*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine17*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine17*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine17"));
	return 0;
}

static int tolua_get_Pointer_CScreenConnection___reference(lua_State* L)
{
	Pointer<CScreenConnection*>* self = (Pointer<CScreenConnection*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenConnection*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CScreenConnection>");
	return 1;
}

static int tolua_set_Pointer_CScreenConnection___reference(lua_State* L)
{
	Pointer<CScreenConnection*>* self = (Pointer<CScreenConnection*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenConnection*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CScreenConnection**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CScreenConnection>");
	return 0;
}

static int tolua_function_Pointer_CScreenConnection___getValue(lua_State* L)
{
	Pointer<CScreenConnection*>* self = (Pointer<CScreenConnection*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenConnection*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CScreenConnection* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CScreenConnection");
	return 1;
}

static int tolua_function_Pointer_CScreenConnection___setValue(lua_State* L)
{
	Pointer<CScreenConnection*>* self = (Pointer<CScreenConnection*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenConnection*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CScreenConnection*)tolua_tousertype_dynamic(L, 2, 0, "CScreenConnection"));
	return 0;
}

static int tolua_get_Pointer_CScreenWorldMap___reference(lua_State* L)
{
	Pointer<CScreenWorldMap*>* self = (Pointer<CScreenWorldMap*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenWorldMap*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CScreenWorldMap>");
	return 1;
}

static int tolua_set_Pointer_CScreenWorldMap___reference(lua_State* L)
{
	Pointer<CScreenWorldMap*>* self = (Pointer<CScreenWorldMap*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenWorldMap*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CScreenWorldMap**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CScreenWorldMap>");
	return 0;
}

static int tolua_function_Pointer_CScreenWorldMap___getValue(lua_State* L)
{
	Pointer<CScreenWorldMap*>* self = (Pointer<CScreenWorldMap*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenWorldMap*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CScreenWorldMap* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CScreenWorldMap");
	return 1;
}

static int tolua_function_Pointer_CScreenWorldMap___setValue(lua_State* L)
{
	Pointer<CScreenWorldMap*>* self = (Pointer<CScreenWorldMap*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CScreenWorldMap*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CScreenWorldMap*)tolua_tousertype_dynamic(L, 2, 0, "CScreenWorldMap"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine18___reference(lua_State* L)
{
	Pointer<CUnknownEngine18*>* self = (Pointer<CUnknownEngine18*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine18*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine18>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine18___reference(lua_State* L)
{
	Pointer<CUnknownEngine18*>* self = (Pointer<CUnknownEngine18*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine18*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine18**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine18>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine18___getValue(lua_State* L)
{
	Pointer<CUnknownEngine18*>* self = (Pointer<CUnknownEngine18*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine18*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine18* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine18");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine18___setValue(lua_State* L)
{
	Pointer<CUnknownEngine18*>* self = (Pointer<CUnknownEngine18*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine18*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine18*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine18"));
	return 0;
}

static int tolua_get_Pointer_CUnknownEngine19___reference(lua_State* L)
{
	Pointer<CUnknownEngine19*>* self = (Pointer<CUnknownEngine19*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine19*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUnknownEngine19>");
	return 1;
}

static int tolua_set_Pointer_CUnknownEngine19___reference(lua_State* L)
{
	Pointer<CUnknownEngine19*>* self = (Pointer<CUnknownEngine19*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine19*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUnknownEngine19**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUnknownEngine19>");
	return 0;
}

static int tolua_function_Pointer_CUnknownEngine19___getValue(lua_State* L)
{
	Pointer<CUnknownEngine19*>* self = (Pointer<CUnknownEngine19*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine19*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUnknownEngine19* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUnknownEngine19");
	return 1;
}

static int tolua_function_Pointer_CUnknownEngine19___setValue(lua_State* L)
{
	Pointer<CUnknownEngine19*>* self = (Pointer<CUnknownEngine19*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUnknownEngine19*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUnknownEngine19*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine19"));
	return 0;
}

static int tolua_get_Pointer_CWarp___reference(lua_State* L)
{
	Pointer<CWarp*>* self = (Pointer<CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CWarp>");
	return 1;
}

static int tolua_set_Pointer_CWarp___reference(lua_State* L)
{
	Pointer<CWarp*>* self = (Pointer<CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CWarp**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CWarp>");
	return 0;
}

static int tolua_function_Pointer_CWarp___getValue(lua_State* L)
{
	Pointer<CWarp*>* self = (Pointer<CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CWarp* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CWarp");
	return 1;
}

static int tolua_function_Pointer_CWarp___setValue(lua_State* L)
{
	Pointer<CWarp*>* self = (Pointer<CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CWarp*)tolua_tousertype_dynamic(L, 2, 0, "CWarp"));
	return 0;
}

static int tolua_get_Pointer_CPoint___reference(lua_State* L)
{
	Pointer<CPoint*>* self = (Pointer<CPoint*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPoint*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CPoint>");
	return 1;
}

static int tolua_set_Pointer_CPoint___reference(lua_State* L)
{
	Pointer<CPoint*>* self = (Pointer<CPoint*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPoint*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CPoint**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CPoint>");
	return 0;
}

static int tolua_function_Pointer_CPoint___getValue(lua_State* L)
{
	Pointer<CPoint*>* self = (Pointer<CPoint*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPoint*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CPoint* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CPoint");
	return 1;
}

static int tolua_function_Pointer_CPoint___setValue(lua_State* L)
{
	Pointer<CPoint*>* self = (Pointer<CPoint*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPoint*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CPoint*)tolua_tousertype_dynamic(L, 2, 0, "CPoint"));
	return 0;
}

static int tolua_get_Pointer_CResWED___reference(lua_State* L)
{
	Pointer<CResWED*>* self = (Pointer<CResWED*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResWED*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CResWED>");
	return 1;
}

static int tolua_set_Pointer_CResWED___reference(lua_State* L)
{
	Pointer<CResWED*>* self = (Pointer<CResWED*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResWED*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResWED**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CResWED>");
	return 0;
}

static int tolua_function_Pointer_CResWED___getValue(lua_State* L)
{
	Pointer<CResWED*>* self = (Pointer<CResWED*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResWED*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CResWED* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CResWED");
	return 1;
}

static int tolua_function_Pointer_CResWED___setValue(lua_State* L)
{
	Pointer<CResWED*>* self = (Pointer<CResWED*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResWED*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CResWED*)tolua_tousertype_dynamic(L, 2, 0, "CResWED"));
	return 0;
}

static int tolua_get_Pointer_CInfTileSet___reference(lua_State* L)
{
	Pointer<CInfTileSet*>* self = (Pointer<CInfTileSet*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfTileSet*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CInfTileSet>");
	return 1;
}

static int tolua_set_Pointer_CInfTileSet___reference(lua_State* L)
{
	Pointer<CInfTileSet*>* self = (Pointer<CInfTileSet*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfTileSet*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CInfTileSet**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CInfTileSet>");
	return 0;
}

static int tolua_function_Pointer_CInfTileSet___getValue(lua_State* L)
{
	Pointer<CInfTileSet*>* self = (Pointer<CInfTileSet*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfTileSet*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CInfTileSet* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CInfTileSet");
	return 1;
}

static int tolua_function_Pointer_CInfTileSet___setValue(lua_State* L)
{
	Pointer<CInfTileSet*>* self = (Pointer<CInfTileSet*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfTileSet*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CInfTileSet*)tolua_tousertype_dynamic(L, 2, 0, "CInfTileSet"));
	return 0;
}

static int tolua_get_Pointer_CVRamPool___reference(lua_State* L)
{
	Pointer<CVRamPool*>* self = (Pointer<CVRamPool*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVRamPool*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CVRamPool>");
	return 1;
}

static int tolua_set_Pointer_CVRamPool___reference(lua_State* L)
{
	Pointer<CVRamPool*>* self = (Pointer<CVRamPool*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVRamPool*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVRamPool**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CVRamPool>");
	return 0;
}

static int tolua_function_Pointer_CVRamPool___getValue(lua_State* L)
{
	Pointer<CVRamPool*>* self = (Pointer<CVRamPool*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVRamPool*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CVRamPool* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CVRamPool");
	return 1;
}

static int tolua_function_Pointer_CVRamPool___setValue(lua_State* L)
{
	Pointer<CVRamPool*>* self = (Pointer<CVRamPool*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVRamPool*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CVRamPool*)tolua_tousertype_dynamic(L, 2, 0, "CVRamPool"));
	return 0;
}

static int tolua_get_Pointer_CVidMode___reference(lua_State* L)
{
	Pointer<CVidMode*>* self = (Pointer<CVidMode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CVidMode>");
	return 1;
}

static int tolua_set_Pointer_CVidMode___reference(lua_State* L)
{
	Pointer<CVidMode*>* self = (Pointer<CVidMode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidMode**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CVidMode>");
	return 0;
}

static int tolua_function_Pointer_CVidMode___getValue(lua_State* L)
{
	Pointer<CVidMode*>* self = (Pointer<CVidMode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CVidMode* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CVidMode");
	return 1;
}

static int tolua_function_Pointer_CVidMode___setValue(lua_State* L)
{
	Pointer<CVidMode*>* self = (Pointer<CVidMode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CVidMode*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode"));
	return 0;
}

static int tolua_get_Pointer_CGameArea___reference(lua_State* L)
{
	Pointer<CGameArea*>* self = (Pointer<CGameArea*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameArea*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CGameArea>");
	return 1;
}

static int tolua_set_Pointer_CGameArea___reference(lua_State* L)
{
	Pointer<CGameArea*>* self = (Pointer<CGameArea*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameArea*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameArea**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CGameArea>");
	return 0;
}

static int tolua_function_Pointer_CGameArea___getValue(lua_State* L)
{
	Pointer<CGameArea*>* self = (Pointer<CGameArea*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameArea*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CGameArea* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CGameArea");
	return 1;
}

static int tolua_function_Pointer_CGameArea___setValue(lua_State* L)
{
	Pointer<CGameArea*>* self = (Pointer<CGameArea*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameArea*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CGameArea*)tolua_tousertype_dynamic(L, 2, 0, "CGameArea"));
	return 0;
}

static int tolua_get_Pointer_CPtrList___reference(lua_State* L)
{
	Pointer<CPtrList*>* self = (Pointer<CPtrList*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPtrList*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CPtrList>");
	return 1;
}

static int tolua_set_Pointer_CPtrList___reference(lua_State* L)
{
	Pointer<CPtrList*>* self = (Pointer<CPtrList*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPtrList*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CPtrList**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CPtrList>");
	return 0;
}

static int tolua_function_Pointer_CPtrList___getValue(lua_State* L)
{
	Pointer<CPtrList*>* self = (Pointer<CPtrList*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPtrList*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CPtrList* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CPtrList");
	return 1;
}

static int tolua_function_Pointer_CPtrList___setValue(lua_State* L)
{
	Pointer<CPtrList*>* self = (Pointer<CPtrList*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPtrList*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CPtrList*)tolua_tousertype_dynamic(L, 2, 0, "CPtrList"));
	return 0;
}

static int tolua_get_Pointer_CPtrList_CNode___reference(lua_State* L)
{
	Pointer<CPtrList_CNode*>* self = (Pointer<CPtrList_CNode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPtrList_CNode*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CPtrList_CNode>");
	return 1;
}

static int tolua_set_Pointer_CPtrList_CNode___reference(lua_State* L)
{
	Pointer<CPtrList_CNode*>* self = (Pointer<CPtrList_CNode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPtrList_CNode*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CPtrList_CNode**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CPtrList_CNode>");
	return 0;
}

static int tolua_function_Pointer_CPtrList_CNode___getValue(lua_State* L)
{
	Pointer<CPtrList_CNode*>* self = (Pointer<CPtrList_CNode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPtrList_CNode*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CPtrList_CNode* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CPtrList_CNode");
	return 1;
}

static int tolua_function_Pointer_CPtrList_CNode___setValue(lua_State* L)
{
	Pointer<CPtrList_CNode*>* self = (Pointer<CPtrList_CNode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CPtrList_CNode*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CPtrList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CPtrList_CNode"));
	return 0;
}

static int tolua_get_Pointer_mosHeader_st___reference(lua_State* L)
{
	Pointer<mosHeader_st*>* self = (Pointer<mosHeader_st*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<mosHeader_st*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<mosHeader_st>");
	return 1;
}

static int tolua_set_Pointer_mosHeader_st___reference(lua_State* L)
{
	Pointer<mosHeader_st*>* self = (Pointer<mosHeader_st*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<mosHeader_st*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (mosHeader_st**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<mosHeader_st>");
	return 0;
}

static int tolua_function_Pointer_mosHeader_st___getValue(lua_State* L)
{
	Pointer<mosHeader_st*>* self = (Pointer<mosHeader_st*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<mosHeader_st*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	mosHeader_st* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "mosHeader_st");
	return 1;
}

static int tolua_function_Pointer_mosHeader_st___setValue(lua_State* L)
{
	Pointer<mosHeader_st*>* self = (Pointer<mosHeader_st*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<mosHeader_st*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((mosHeader_st*)tolua_tousertype_dynamic(L, 2, 0, "mosHeader_st"));
	return 0;
}

static int tolua_get_Pointer_CRes___reference(lua_State* L)
{
	Pointer<CRes*>* self = (Pointer<CRes*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRes*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CRes>");
	return 1;
}

static int tolua_set_Pointer_CRes___reference(lua_State* L)
{
	Pointer<CRes*>* self = (Pointer<CRes*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRes*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CRes**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CRes>");
	return 0;
}

static int tolua_function_Pointer_CRes___getValue(lua_State* L)
{
	Pointer<CRes*>* self = (Pointer<CRes*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRes*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CRes* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CRes");
	return 1;
}

static int tolua_function_Pointer_CRes___setValue(lua_State* L)
{
	Pointer<CRes*>* self = (Pointer<CRes*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRes*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CRes*)tolua_tousertype_dynamic(L, 2, 0, "CRes"));
	return 0;
}

static int tolua_get_Pointer_CResRef___reference(lua_State* L)
{
	Pointer<CResRef*>* self = (Pointer<CResRef*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResRef*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CResRef>");
	return 1;
}

static int tolua_set_Pointer_CResRef___reference(lua_State* L)
{
	Pointer<CResRef*>* self = (Pointer<CResRef*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResRef*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResRef**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CResRef>");
	return 0;
}

static int tolua_function_Pointer_CResRef___getValue(lua_State* L)
{
	Pointer<CResRef*>* self = (Pointer<CResRef*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResRef*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CResRef* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CResRef");
	return 1;
}

static int tolua_function_Pointer_CResRef___setValue(lua_State* L)
{
	Pointer<CResRef*>* self = (Pointer<CResRef*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResRef*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CResRef*)tolua_tousertype_dynamic(L, 2, 0, "CResRef"));
	return 0;
}

static int tolua_get_Pointer_UI_Control_st___reference(lua_State* L)
{
	Pointer<UI_Control_st*>* self = (Pointer<UI_Control_st*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UI_Control_st*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<UI_Control_st>");
	return 1;
}

static int tolua_set_Pointer_UI_Control_st___reference(lua_State* L)
{
	Pointer<UI_Control_st*>* self = (Pointer<UI_Control_st*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UI_Control_st*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (UI_Control_st**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<UI_Control_st>");
	return 0;
}

static int tolua_function_Pointer_UI_Control_st___getValue(lua_State* L)
{
	Pointer<UI_Control_st*>* self = (Pointer<UI_Control_st*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UI_Control_st*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	UI_Control_st* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "UI_Control_st");
	return 1;
}

static int tolua_function_Pointer_UI_Control_st___setValue(lua_State* L)
{
	Pointer<UI_Control_st*>* self = (Pointer<UI_Control_st*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UI_Control_st*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((UI_Control_st*)tolua_tousertype_dynamic(L, 2, 0, "UI_Control_st"));
	return 0;
}

static int tolua_get_Pointer_UI_PanelHeader_st___reference(lua_State* L)
{
	Pointer<UI_PanelHeader_st*>* self = (Pointer<UI_PanelHeader_st*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UI_PanelHeader_st*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<UI_PanelHeader_st>");
	return 1;
}

static int tolua_set_Pointer_UI_PanelHeader_st___reference(lua_State* L)
{
	Pointer<UI_PanelHeader_st*>* self = (Pointer<UI_PanelHeader_st*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UI_PanelHeader_st*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (UI_PanelHeader_st**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<UI_PanelHeader_st>");
	return 0;
}

static int tolua_function_Pointer_UI_PanelHeader_st___getValue(lua_State* L)
{
	Pointer<UI_PanelHeader_st*>* self = (Pointer<UI_PanelHeader_st*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UI_PanelHeader_st*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	UI_PanelHeader_st* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "UI_PanelHeader_st");
	return 1;
}

static int tolua_function_Pointer_UI_PanelHeader_st___setValue(lua_State* L)
{
	Pointer<UI_PanelHeader_st*>* self = (Pointer<UI_PanelHeader_st*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UI_PanelHeader_st*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 2, 0, "UI_PanelHeader_st"));
	return 0;
}

static int tolua_get_Pointer_CSyncObject___reference(lua_State* L)
{
	Pointer<CSyncObject*>* self = (Pointer<CSyncObject*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSyncObject*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CSyncObject>");
	return 1;
}

static int tolua_set_Pointer_CSyncObject___reference(lua_State* L)
{
	Pointer<CSyncObject*>* self = (Pointer<CSyncObject*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSyncObject*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CSyncObject**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CSyncObject>");
	return 0;
}

static int tolua_function_Pointer_CSyncObject___getValue(lua_State* L)
{
	Pointer<CSyncObject*>* self = (Pointer<CSyncObject*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSyncObject*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CSyncObject* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CSyncObject");
	return 1;
}

static int tolua_function_Pointer_CSyncObject___setValue(lua_State* L)
{
	Pointer<CSyncObject*>* self = (Pointer<CSyncObject*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSyncObject*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CSyncObject*)tolua_tousertype_dynamic(L, 2, 0, "CSyncObject"));
	return 0;
}

static int tolua_get_Pointer_CUIControlBase___reference(lua_State* L)
{
	Pointer<CUIControlBase*>* self = (Pointer<CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUIControlBase>");
	return 1;
}

static int tolua_set_Pointer_CUIControlBase___reference(lua_State* L)
{
	Pointer<CUIControlBase*>* self = (Pointer<CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUIControlBase**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUIControlBase>");
	return 0;
}

static int tolua_function_Pointer_CUIControlBase___getValue(lua_State* L)
{
	Pointer<CUIControlBase*>* self = (Pointer<CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUIControlBase* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUIControlBase");
	return 1;
}

static int tolua_function_Pointer_CUIControlBase___setValue(lua_State* L)
{
	Pointer<CUIControlBase*>* self = (Pointer<CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUIControlBase*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlBase"));
	return 0;
}

static int tolua_get_Pointer_CUIPanel___reference(lua_State* L)
{
	Pointer<CUIPanel*>* self = (Pointer<CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUIPanel>");
	return 1;
}

static int tolua_set_Pointer_CUIPanel___reference(lua_State* L)
{
	Pointer<CUIPanel*>* self = (Pointer<CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUIPanel**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUIPanel>");
	return 0;
}

static int tolua_function_Pointer_CUIPanel___getValue(lua_State* L)
{
	Pointer<CUIPanel*>* self = (Pointer<CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUIPanel* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUIPanel");
	return 1;
}

static int tolua_function_Pointer_CUIPanel___setValue(lua_State* L)
{
	Pointer<CUIPanel*>* self = (Pointer<CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUIPanel*)tolua_tousertype_dynamic(L, 2, 0, "CUIPanel"));
	return 0;
}

static int tolua_get_Pointer_CBaldurEngine___reference(lua_State* L)
{
	Pointer<CBaldurEngine*>* self = (Pointer<CBaldurEngine*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurEngine*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CBaldurEngine>");
	return 1;
}

static int tolua_set_Pointer_CBaldurEngine___reference(lua_State* L)
{
	Pointer<CBaldurEngine*>* self = (Pointer<CBaldurEngine*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurEngine*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CBaldurEngine**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CBaldurEngine>");
	return 0;
}

static int tolua_function_Pointer_CBaldurEngine___getValue(lua_State* L)
{
	Pointer<CBaldurEngine*>* self = (Pointer<CBaldurEngine*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurEngine*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CBaldurEngine* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CBaldurEngine");
	return 1;
}

static int tolua_function_Pointer_CBaldurEngine___setValue(lua_State* L)
{
	Pointer<CBaldurEngine*>* self = (Pointer<CBaldurEngine*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurEngine*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CBaldurEngine*)tolua_tousertype_dynamic(L, 2, 0, "CBaldurEngine"));
	return 0;
}

static int tolua_get_Pointer_CUIManager___reference(lua_State* L)
{
	Pointer<CUIManager*>* self = (Pointer<CUIManager*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIManager*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUIManager>");
	return 1;
}

static int tolua_set_Pointer_CUIManager___reference(lua_State* L)
{
	Pointer<CUIManager*>* self = (Pointer<CUIManager*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIManager*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUIManager**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUIManager>");
	return 0;
}

static int tolua_function_Pointer_CUIManager___getValue(lua_State* L)
{
	Pointer<CUIManager*>* self = (Pointer<CUIManager*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIManager*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUIManager* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUIManager");
	return 1;
}

static int tolua_function_Pointer_CUIManager___setValue(lua_State* L)
{
	Pointer<CUIManager*>* self = (Pointer<CUIManager*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIManager*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUIManager*)tolua_tousertype_dynamic(L, 2, 0, "CUIManager"));
	return 0;
}

static int tolua_get_Pointer_CRect___reference(lua_State* L)
{
	Pointer<CRect*>* self = (Pointer<CRect*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CRect>");
	return 1;
}

static int tolua_set_Pointer_CRect___reference(lua_State* L)
{
	Pointer<CRect*>* self = (Pointer<CRect*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CRect**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CRect>");
	return 0;
}

static int tolua_function_Pointer_CRect___getValue(lua_State* L)
{
	Pointer<CRect*>* self = (Pointer<CRect*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRect*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CRect* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CRect");
	return 1;
}

static int tolua_function_Pointer_CRect___setValue(lua_State* L)
{
	Pointer<CRect*>* self = (Pointer<CRect*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRect*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CRect*)tolua_tousertype_dynamic(L, 2, 0, "CRect"));
	return 0;
}

static int tolua_get_Pointer_CString___reference(lua_State* L)
{
	Pointer<CString*>* self = (Pointer<CString*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CString*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CString>");
	return 1;
}

static int tolua_set_Pointer_CString___reference(lua_State* L)
{
	Pointer<CString*>* self = (Pointer<CString*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CString*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CString**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CString>");
	return 0;
}

static int tolua_function_Pointer_CString___getValue(lua_State* L)
{
	Pointer<CString*>* self = (Pointer<CString*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CString*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CString* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CString");
	return 1;
}

static int tolua_function_Pointer_CString___setValue(lua_State* L)
{
	Pointer<CString*>* self = (Pointer<CString*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CString*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CString*)tolua_tousertype_dynamic(L, 2, 0, "CString"));
	return 0;
}

static int tolua_get_Pointer_DDSURFACEDESC___reference(lua_State* L)
{
	Pointer<DDSURFACEDESC*>* self = (Pointer<DDSURFACEDESC*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DDSURFACEDESC*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<DDSURFACEDESC>");
	return 1;
}

static int tolua_set_Pointer_DDSURFACEDESC___reference(lua_State* L)
{
	Pointer<DDSURFACEDESC*>* self = (Pointer<DDSURFACEDESC*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DDSURFACEDESC*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (DDSURFACEDESC**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<DDSURFACEDESC>");
	return 0;
}

static int tolua_function_Pointer_DDSURFACEDESC___getValue(lua_State* L)
{
	Pointer<DDSURFACEDESC*>* self = (Pointer<DDSURFACEDESC*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DDSURFACEDESC*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	DDSURFACEDESC* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "DDSURFACEDESC");
	return 1;
}

static int tolua_function_Pointer_DDSURFACEDESC___setValue(lua_State* L)
{
	Pointer<DDSURFACEDESC*>* self = (Pointer<DDSURFACEDESC*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DDSURFACEDESC*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((DDSURFACEDESC*)tolua_tousertype_dynamic(L, 2, 0, "DDSURFACEDESC"));
	return 0;
}

static int tolua_get_Pointer_CVidFont___reference(lua_State* L)
{
	Pointer<CVidFont*>* self = (Pointer<CVidFont*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidFont*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CVidFont>");
	return 1;
}

static int tolua_set_Pointer_CVidFont___reference(lua_State* L)
{
	Pointer<CVidFont*>* self = (Pointer<CVidFont*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidFont*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidFont**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CVidFont>");
	return 0;
}

static int tolua_function_Pointer_CVidFont___getValue(lua_State* L)
{
	Pointer<CVidFont*>* self = (Pointer<CVidFont*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidFont*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CVidFont* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CVidFont");
	return 1;
}

static int tolua_function_Pointer_CVidFont___setValue(lua_State* L)
{
	Pointer<CVidFont*>* self = (Pointer<CVidFont*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidFont*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CVidFont*)tolua_tousertype_dynamic(L, 2, 0, "CVidFont"));
	return 0;
}

static int tolua_get_Pointer_IDirectDrawSurface____reference(lua_State* L)
{
	Pointer<IDirectDrawSurface**>* self = (Pointer<IDirectDrawSurface**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDrawSurface**>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<IDirectDrawSurface*>");
	return 1;
}

static int tolua_set_Pointer_IDirectDrawSurface____reference(lua_State* L)
{
	Pointer<IDirectDrawSurface**>* self = (Pointer<IDirectDrawSurface**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDrawSurface**>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (IDirectDrawSurface***)tolua_tousertype_dynamic(L, 2, 0, "Pointer<IDirectDrawSurface*>");
	return 0;
}

static int tolua_function_Pointer_IDirectDrawSurface____getValue(lua_State* L)
{
	Pointer<IDirectDrawSurface**>* self = (Pointer<IDirectDrawSurface**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDrawSurface**>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	IDirectDrawSurface** returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "Pointer<IDirectDrawSurface>");
	return 1;
}

static int tolua_function_Pointer_IDirectDrawSurface____setValue(lua_State* L)
{
	Pointer<IDirectDrawSurface**>* self = (Pointer<IDirectDrawSurface**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDrawSurface**>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((IDirectDrawSurface**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<IDirectDrawSurface>"));
	return 0;
}

static int tolua_get_Pointer_void____reference(lua_State* L)
{
	Pointer<void**>* self = (Pointer<void**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<void**>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<void*>");
	return 1;
}

static int tolua_set_Pointer_void____reference(lua_State* L)
{
	Pointer<void**>* self = (Pointer<void**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<void**>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (void***)tolua_tousertype_dynamic(L, 2, 0, "Pointer<void*>");
	return 0;
}

static int tolua_function_Pointer_void____getValue(lua_State* L)
{
	Pointer<void**>* self = (Pointer<void**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<void**>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	void** returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "VoidPointer");
	return 1;
}

static int tolua_function_Pointer_void____setValue(lua_State* L)
{
	Pointer<void**>* self = (Pointer<void**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<void**>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((void**)tolua_tousertype_dynamic(L, 2, 0, "VoidPointer"));
	return 0;
}

static int tolua_get_Pointer_uint___reference(lua_State* L)
{
	Pointer<uint*>* self = (Pointer<uint*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<uint*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<uint>");
	return 1;
}

static int tolua_set_Pointer_uint___reference(lua_State* L)
{
	Pointer<uint*>* self = (Pointer<uint*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<uint*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (uint**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<uint>");
	return 0;
}

static int tolua_function_Pointer_uint___getValue(lua_State* L)
{
	Pointer<uint*>* self = (Pointer<uint*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<uint*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	uint* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "Primitive<uint>");
	return 1;
}

static int tolua_function_Pointer_uint___setValue(lua_State* L)
{
	Pointer<uint*>* self = (Pointer<uint*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<uint*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((uint*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uint>"));
	return 0;
}

static int tolua_get_Pointer_CGameEffect___reference(lua_State* L)
{
	Pointer<CGameEffect*>* self = (Pointer<CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CGameEffect>");
	return 1;
}

static int tolua_set_Pointer_CGameEffect___reference(lua_State* L)
{
	Pointer<CGameEffect*>* self = (Pointer<CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameEffect**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CGameEffect>");
	return 0;
}

static int tolua_function_Pointer_CGameEffect___getValue(lua_State* L)
{
	Pointer<CGameEffect*>* self = (Pointer<CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CGameEffect* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CGameEffect");
	return 1;
}

static int tolua_function_Pointer_CGameEffect___setValue(lua_State* L)
{
	Pointer<CGameEffect*>* self = (Pointer<CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CGameEffect*)tolua_tousertype_dynamic(L, 2, 0, "CGameEffect"));
	return 0;
}

static int tolua_get_Pointer_CTypedPtrList_CPtrList_CGameEffect____CNode___reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>* self = (Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	return 1;
}

static int tolua_set_Pointer_CTypedPtrList_CPtrList_CGameEffect____CNode___reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>* self = (Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CTypedPtrList<CPtrList,CGameEffect*>::CNode**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	return 0;
}

static int tolua_function_Pointer_CTypedPtrList_CPtrList_CGameEffect____CNode___getValue(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>* self = (Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CTypedPtrList<CPtrList,CGameEffect*>::CNode* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 1;
}

static int tolua_function_Pointer_CTypedPtrList_CPtrList_CGameEffect____CNode___setValue(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>* self = (Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode"));
	return 0;
}

static int tolua_get_Pointer_tagRGBQUAD___reference(lua_State* L)
{
	Pointer<tagRGBQUAD*>* self = (Pointer<tagRGBQUAD*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<tagRGBQUAD*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<tagRGBQUAD>");
	return 1;
}

static int tolua_set_Pointer_tagRGBQUAD___reference(lua_State* L)
{
	Pointer<tagRGBQUAD*>* self = (Pointer<tagRGBQUAD*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<tagRGBQUAD*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (tagRGBQUAD**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<tagRGBQUAD>");
	return 0;
}

static int tolua_function_Pointer_tagRGBQUAD___getValue(lua_State* L)
{
	Pointer<tagRGBQUAD*>* self = (Pointer<tagRGBQUAD*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<tagRGBQUAD*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	tagRGBQUAD* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "tagRGBQUAD");
	return 1;
}

static int tolua_function_Pointer_tagRGBQUAD___setValue(lua_State* L)
{
	Pointer<tagRGBQUAD*>* self = (Pointer<tagRGBQUAD*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<tagRGBQUAD*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((tagRGBQUAD*)tolua_tousertype_dynamic(L, 2, 0, "tagRGBQUAD"));
	return 0;
}

static int tolua_get_Pointer_CGameObject___reference(lua_State* L)
{
	Pointer<CGameObject*>* self = (Pointer<CGameObject*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObject*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CGameObject>");
	return 1;
}

static int tolua_set_Pointer_CGameObject___reference(lua_State* L)
{
	Pointer<CGameObject*>* self = (Pointer<CGameObject*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObject*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameObject**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CGameObject>");
	return 0;
}

static int tolua_function_Pointer_CGameObject___getValue(lua_State* L)
{
	Pointer<CGameObject*>* self = (Pointer<CGameObject*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObject*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CGameObject* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CGameObject");
	return 1;
}

static int tolua_function_Pointer_CGameObject___setValue(lua_State* L)
{
	Pointer<CGameObject*>* self = (Pointer<CGameObject*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObject*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CGameObject*)tolua_tousertype_dynamic(L, 2, 0, "CGameObject"));
	return 0;
}

static int tolua_get_Pointer_CAIObjectType___reference(lua_State* L)
{
	Pointer<CAIObjectType*>* self = (Pointer<CAIObjectType*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAIObjectType*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CAIObjectType>");
	return 1;
}

static int tolua_set_Pointer_CAIObjectType___reference(lua_State* L)
{
	Pointer<CAIObjectType*>* self = (Pointer<CAIObjectType*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAIObjectType*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CAIObjectType**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CAIObjectType>");
	return 0;
}

static int tolua_function_Pointer_CAIObjectType___getValue(lua_State* L)
{
	Pointer<CAIObjectType*>* self = (Pointer<CAIObjectType*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAIObjectType*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CAIObjectType* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CAIObjectType");
	return 1;
}

static int tolua_function_Pointer_CAIObjectType___setValue(lua_State* L)
{
	Pointer<CAIObjectType*>* self = (Pointer<CAIObjectType*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAIObjectType*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CAIObjectType*)tolua_tousertype_dynamic(L, 2, 0, "CAIObjectType"));
	return 0;
}

static int tolua_get_Pointer_CItem___reference(lua_State* L)
{
	Pointer<CItem*>* self = (Pointer<CItem*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CItem*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CItem>");
	return 1;
}

static int tolua_set_Pointer_CItem___reference(lua_State* L)
{
	Pointer<CItem*>* self = (Pointer<CItem*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CItem*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CItem**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CItem>");
	return 0;
}

static int tolua_function_Pointer_CItem___getValue(lua_State* L)
{
	Pointer<CItem*>* self = (Pointer<CItem*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CItem*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CItem* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CItem");
	return 1;
}

static int tolua_function_Pointer_CItem___setValue(lua_State* L)
{
	Pointer<CItem*>* self = (Pointer<CItem*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CItem*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CItem*)tolua_tousertype_dynamic(L, 2, 0, "CItem"));
	return 0;
}

static int tolua_get_Pointer_CUIControlButton___reference(lua_State* L)
{
	Pointer<CUIControlButton*>* self = (Pointer<CUIControlButton*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButton*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUIControlButton>");
	return 1;
}

static int tolua_set_Pointer_CUIControlButton___reference(lua_State* L)
{
	Pointer<CUIControlButton*>* self = (Pointer<CUIControlButton*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButton*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUIControlButton**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUIControlButton>");
	return 0;
}

static int tolua_function_Pointer_CUIControlButton___getValue(lua_State* L)
{
	Pointer<CUIControlButton*>* self = (Pointer<CUIControlButton*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButton*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUIControlButton* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUIControlButton");
	return 1;
}

static int tolua_function_Pointer_CUIControlButton___setValue(lua_State* L)
{
	Pointer<CUIControlButton*>* self = (Pointer<CUIControlButton*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButton*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUIControlButton*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlButton"));
	return 0;
}

static int tolua_get_Pointer_CGameAnimationType___reference(lua_State* L)
{
	Pointer<CGameAnimationType*>* self = (Pointer<CGameAnimationType*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimationType*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CGameAnimationType>");
	return 1;
}

static int tolua_set_Pointer_CGameAnimationType___reference(lua_State* L)
{
	Pointer<CGameAnimationType*>* self = (Pointer<CGameAnimationType*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimationType*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameAnimationType**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CGameAnimationType>");
	return 0;
}

static int tolua_function_Pointer_CGameAnimationType___getValue(lua_State* L)
{
	Pointer<CGameAnimationType*>* self = (Pointer<CGameAnimationType*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimationType*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CGameAnimationType* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CGameAnimationType");
	return 1;
}

static int tolua_function_Pointer_CGameAnimationType___setValue(lua_State* L)
{
	Pointer<CGameAnimationType*>* self = (Pointer<CGameAnimationType*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimationType*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CGameAnimationType*)tolua_tousertype_dynamic(L, 2, 0, "CGameAnimationType"));
	return 0;
}

static int tolua_get_Pointer_CProjectile___reference(lua_State* L)
{
	Pointer<CProjectile*>* self = (Pointer<CProjectile*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProjectile*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CProjectile>");
	return 1;
}

static int tolua_set_Pointer_CProjectile___reference(lua_State* L)
{
	Pointer<CProjectile*>* self = (Pointer<CProjectile*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProjectile*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CProjectile**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CProjectile>");
	return 0;
}

static int tolua_function_Pointer_CProjectile___getValue(lua_State* L)
{
	Pointer<CProjectile*>* self = (Pointer<CProjectile*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProjectile*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CProjectile* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CProjectile");
	return 1;
}

static int tolua_function_Pointer_CProjectile___setValue(lua_State* L)
{
	Pointer<CProjectile*>* self = (Pointer<CProjectile*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProjectile*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CProjectile*)tolua_tousertype_dynamic(L, 2, 0, "CProjectile"));
	return 0;
}

static int tolua_get_Pointer_CChitin___reference(lua_State* L)
{
	Pointer<CChitin*>* self = (Pointer<CChitin*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CChitin*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CChitin>");
	return 1;
}

static int tolua_set_Pointer_CChitin___reference(lua_State* L)
{
	Pointer<CChitin*>* self = (Pointer<CChitin*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CChitin*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CChitin**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CChitin>");
	return 0;
}

static int tolua_function_Pointer_CChitin___getValue(lua_State* L)
{
	Pointer<CChitin*>* self = (Pointer<CChitin*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CChitin*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CChitin* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CChitin");
	return 1;
}

static int tolua_function_Pointer_CChitin___setValue(lua_State* L)
{
	Pointer<CChitin*>* self = (Pointer<CChitin*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CChitin*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CChitin*)tolua_tousertype_dynamic(L, 2, 0, "CChitin"));
	return 0;
}

static int tolua_get_Pointer_IDirectDraw___reference(lua_State* L)
{
	Pointer<IDirectDraw*>* self = (Pointer<IDirectDraw*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDraw*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<IDirectDraw>");
	return 1;
}

static int tolua_set_Pointer_IDirectDraw___reference(lua_State* L)
{
	Pointer<IDirectDraw*>* self = (Pointer<IDirectDraw*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDraw*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (IDirectDraw**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<IDirectDraw>");
	return 0;
}

static int tolua_function_Pointer_IDirectDraw___getValue(lua_State* L)
{
	Pointer<IDirectDraw*>* self = (Pointer<IDirectDraw*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDraw*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	IDirectDraw* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "IDirectDraw");
	return 1;
}

static int tolua_function_Pointer_IDirectDraw___setValue(lua_State* L)
{
	Pointer<IDirectDraw*>* self = (Pointer<IDirectDraw*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<IDirectDraw*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((IDirectDraw*)tolua_tousertype_dynamic(L, 2, 0, "IDirectDraw"));
	return 0;
}

static int tolua_get_Pointer_CObList_CNode___reference(lua_State* L)
{
	Pointer<CObList_CNode*>* self = (Pointer<CObList_CNode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObList_CNode*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CObList_CNode>");
	return 1;
}

static int tolua_set_Pointer_CObList_CNode___reference(lua_State* L)
{
	Pointer<CObList_CNode*>* self = (Pointer<CObList_CNode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObList_CNode*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CObList_CNode**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CObList_CNode>");
	return 0;
}

static int tolua_function_Pointer_CObList_CNode___getValue(lua_State* L)
{
	Pointer<CObList_CNode*>* self = (Pointer<CObList_CNode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObList_CNode*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CObList_CNode* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CObList_CNode");
	return 1;
}

static int tolua_function_Pointer_CObList_CNode___setValue(lua_State* L)
{
	Pointer<CObList_CNode*>* self = (Pointer<CObList_CNode*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObList_CNode*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CObList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CObList_CNode"));
	return 0;
}

static int tolua_get_Pointer_CVideoFunctions___reference(lua_State* L)
{
	Pointer<CVideoFunctions*>* self = (Pointer<CVideoFunctions*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVideoFunctions*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CVideoFunctions>");
	return 1;
}

static int tolua_set_Pointer_CVideoFunctions___reference(lua_State* L)
{
	Pointer<CVideoFunctions*>* self = (Pointer<CVideoFunctions*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVideoFunctions*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVideoFunctions**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CVideoFunctions>");
	return 0;
}

static int tolua_function_Pointer_CVideoFunctions___getValue(lua_State* L)
{
	Pointer<CVideoFunctions*>* self = (Pointer<CVideoFunctions*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVideoFunctions*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CVideoFunctions* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CVideoFunctions");
	return 1;
}

static int tolua_function_Pointer_CVideoFunctions___setValue(lua_State* L)
{
	Pointer<CVideoFunctions*>* self = (Pointer<CVideoFunctions*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVideoFunctions*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CVideoFunctions*)tolua_tousertype_dynamic(L, 2, 0, "CVideoFunctions"));
	return 0;
}

static int tolua_get_Pointer_DDBLTFX___reference(lua_State* L)
{
	Pointer<DDBLTFX*>* self = (Pointer<DDBLTFX*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DDBLTFX*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<DDBLTFX>");
	return 1;
}

static int tolua_set_Pointer_DDBLTFX___reference(lua_State* L)
{
	Pointer<DDBLTFX*>* self = (Pointer<DDBLTFX*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DDBLTFX*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (DDBLTFX**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<DDBLTFX>");
	return 0;
}

static int tolua_function_Pointer_DDBLTFX___getValue(lua_State* L)
{
	Pointer<DDBLTFX*>* self = (Pointer<DDBLTFX*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DDBLTFX*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	DDBLTFX* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "DDBLTFX");
	return 1;
}

static int tolua_function_Pointer_DDBLTFX___setValue(lua_State* L)
{
	Pointer<DDBLTFX*>* self = (Pointer<DDBLTFX*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DDBLTFX*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((DDBLTFX*)tolua_tousertype_dynamic(L, 2, 0, "DDBLTFX"));
	return 0;
}

static int tolua_get_Pointer_CGameSprite___reference(lua_State* L)
{
	Pointer<CGameSprite*>* self = (Pointer<CGameSprite*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameSprite*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CGameSprite>");
	return 1;
}

static int tolua_set_Pointer_CGameSprite___reference(lua_State* L)
{
	Pointer<CGameSprite*>* self = (Pointer<CGameSprite*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameSprite*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameSprite**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CGameSprite>");
	return 0;
}

static int tolua_function_Pointer_CGameSprite___getValue(lua_State* L)
{
	Pointer<CGameSprite*>* self = (Pointer<CGameSprite*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameSprite*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CGameSprite* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CGameSprite");
	return 1;
}

static int tolua_function_Pointer_CGameSprite___setValue(lua_State* L)
{
	Pointer<CGameSprite*>* self = (Pointer<CGameSprite*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameSprite*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CGameSprite*)tolua_tousertype_dynamic(L, 2, 0, "CGameSprite"));
	return 0;
}

static int tolua_get_Pointer_CRuntimeClass___reference(lua_State* L)
{
	Pointer<CRuntimeClass*>* self = (Pointer<CRuntimeClass*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRuntimeClass*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CRuntimeClass>");
	return 1;
}

static int tolua_set_Pointer_CRuntimeClass___reference(lua_State* L)
{
	Pointer<CRuntimeClass*>* self = (Pointer<CRuntimeClass*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRuntimeClass*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CRuntimeClass**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CRuntimeClass>");
	return 0;
}

static int tolua_function_Pointer_CRuntimeClass___getValue(lua_State* L)
{
	Pointer<CRuntimeClass*>* self = (Pointer<CRuntimeClass*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRuntimeClass*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CRuntimeClass* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CRuntimeClass");
	return 1;
}

static int tolua_function_Pointer_CRuntimeClass___setValue(lua_State* L)
{
	Pointer<CRuntimeClass*>* self = (Pointer<CRuntimeClass*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRuntimeClass*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CRuntimeClass*)tolua_tousertype_dynamic(L, 2, 0, "CRuntimeClass"));
	return 0;
}

static int tolua_get_Pointer_CObject___reference(lua_State* L)
{
	Pointer<CObject*>* self = (Pointer<CObject*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObject*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CObject>");
	return 1;
}

static int tolua_set_Pointer_CObject___reference(lua_State* L)
{
	Pointer<CObject*>* self = (Pointer<CObject*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObject*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CObject**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CObject>");
	return 0;
}

static int tolua_function_Pointer_CObject___getValue(lua_State* L)
{
	Pointer<CObject*>* self = (Pointer<CObject*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObject*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CObject* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CObject");
	return 1;
}

static int tolua_function_Pointer_CObject___setValue(lua_State* L)
{
	Pointer<CObject*>* self = (Pointer<CObject*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObject*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CObject*)tolua_tousertype_dynamic(L, 2, 0, "CObject"));
	return 0;
}

static int tolua_get_Pointer_CArchive___reference(lua_State* L)
{
	Pointer<CArchive*>* self = (Pointer<CArchive*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CArchive*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CArchive>");
	return 1;
}

static int tolua_set_Pointer_CArchive___reference(lua_State* L)
{
	Pointer<CArchive*>* self = (Pointer<CArchive*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CArchive*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CArchive**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CArchive>");
	return 0;
}

static int tolua_function_Pointer_CArchive___getValue(lua_State* L)
{
	Pointer<CArchive*>* self = (Pointer<CArchive*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CArchive*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CArchive* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CArchive");
	return 1;
}

static int tolua_function_Pointer_CArchive___setValue(lua_State* L)
{
	Pointer<CArchive*>* self = (Pointer<CArchive*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CArchive*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CArchive*)tolua_tousertype_dynamic(L, 2, 0, "CArchive"));
	return 0;
}

static int tolua_get_Pointer_CGameAIBase___reference(lua_State* L)
{
	Pointer<CGameAIBase*>* self = (Pointer<CGameAIBase*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAIBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CGameAIBase>");
	return 1;
}

static int tolua_set_Pointer_CGameAIBase___reference(lua_State* L)
{
	Pointer<CGameAIBase*>* self = (Pointer<CGameAIBase*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAIBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameAIBase**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CGameAIBase>");
	return 0;
}

static int tolua_function_Pointer_CGameAIBase___getValue(lua_State* L)
{
	Pointer<CGameAIBase*>* self = (Pointer<CGameAIBase*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAIBase*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CGameAIBase* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CGameAIBase");
	return 1;
}

static int tolua_function_Pointer_CGameAIBase___setValue(lua_State* L)
{
	Pointer<CGameAIBase*>* self = (Pointer<CGameAIBase*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAIBase*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CGameAIBase*)tolua_tousertype_dynamic(L, 2, 0, "CGameAIBase"));
	return 0;
}

static int tolua_get_Pointer_CResourceManagerHashEntry___reference(lua_State* L)
{
	Pointer<CResourceManagerHashEntry*>* self = (Pointer<CResourceManagerHashEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResourceManagerHashEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CResourceManagerHashEntry>");
	return 1;
}

static int tolua_set_Pointer_CResourceManagerHashEntry___reference(lua_State* L)
{
	Pointer<CResourceManagerHashEntry*>* self = (Pointer<CResourceManagerHashEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResourceManagerHashEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResourceManagerHashEntry**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CResourceManagerHashEntry>");
	return 0;
}

static int tolua_function_Pointer_CResourceManagerHashEntry___getValue(lua_State* L)
{
	Pointer<CResourceManagerHashEntry*>* self = (Pointer<CResourceManagerHashEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResourceManagerHashEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CResourceManagerHashEntry* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CResourceManagerHashEntry");
	return 1;
}

static int tolua_function_Pointer_CResourceManagerHashEntry___setValue(lua_State* L)
{
	Pointer<CResourceManagerHashEntry*>* self = (Pointer<CResourceManagerHashEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResourceManagerHashEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 2, 0, "CResourceManagerHashEntry"));
	return 0;
}

static int tolua_get_Pointer_CGameObjectArrayEntry___reference(lua_State* L)
{
	Pointer<CGameObjectArrayEntry*>* self = (Pointer<CGameObjectArrayEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObjectArrayEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CGameObjectArrayEntry>");
	return 1;
}

static int tolua_set_Pointer_CGameObjectArrayEntry___reference(lua_State* L)
{
	Pointer<CGameObjectArrayEntry*>* self = (Pointer<CGameObjectArrayEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObjectArrayEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameObjectArrayEntry**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CGameObjectArrayEntry>");
	return 0;
}

static int tolua_function_Pointer_CGameObjectArrayEntry___getValue(lua_State* L)
{
	Pointer<CGameObjectArrayEntry*>* self = (Pointer<CGameObjectArrayEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObjectArrayEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CGameObjectArrayEntry* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CGameObjectArrayEntry");
	return 1;
}

static int tolua_function_Pointer_CGameObjectArrayEntry___setValue(lua_State* L)
{
	Pointer<CGameObjectArrayEntry*>* self = (Pointer<CGameObjectArrayEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObjectArrayEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CGameObjectArrayEntry*)tolua_tousertype_dynamic(L, 2, 0, "CGameObjectArrayEntry"));
	return 0;
}

static int tolua_get_Pointer_CInfinity___reference(lua_State* L)
{
	Pointer<CInfinity*>* self = (Pointer<CInfinity*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfinity*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CInfinity>");
	return 1;
}

static int tolua_set_Pointer_CInfinity___reference(lua_State* L)
{
	Pointer<CInfinity*>* self = (Pointer<CInfinity*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfinity*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CInfinity**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CInfinity>");
	return 0;
}

static int tolua_function_Pointer_CInfinity___getValue(lua_State* L)
{
	Pointer<CInfinity*>* self = (Pointer<CInfinity*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfinity*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CInfinity* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CInfinity");
	return 1;
}

static int tolua_function_Pointer_CInfinity___setValue(lua_State* L)
{
	Pointer<CInfinity*>* self = (Pointer<CInfinity*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfinity*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CInfinity*)tolua_tousertype_dynamic(L, 2, 0, "CInfinity"));
	return 0;
}

static int tolua_get_Pointer_CGameDialogEntry____reference(lua_State* L)
{
	Pointer<CGameDialogEntry**>* self = (Pointer<CGameDialogEntry**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameDialogEntry**>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CGameDialogEntry*>");
	return 1;
}

static int tolua_set_Pointer_CGameDialogEntry____reference(lua_State* L)
{
	Pointer<CGameDialogEntry**>* self = (Pointer<CGameDialogEntry**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameDialogEntry**>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameDialogEntry***)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CGameDialogEntry*>");
	return 0;
}

static int tolua_function_Pointer_CGameDialogEntry____getValue(lua_State* L)
{
	Pointer<CGameDialogEntry**>* self = (Pointer<CGameDialogEntry**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameDialogEntry**>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CGameDialogEntry** returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "Pointer<CGameDialogEntry>");
	return 1;
}

static int tolua_function_Pointer_CGameDialogEntry____setValue(lua_State* L)
{
	Pointer<CGameDialogEntry**>* self = (Pointer<CGameDialogEntry**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameDialogEntry**>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CGameDialogEntry**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CGameDialogEntry>"));
	return 0;
}

static int tolua_get_Pointer_CMessage___reference(lua_State* L)
{
	Pointer<CMessage*>* self = (Pointer<CMessage*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessage*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CMessage>");
	return 1;
}

static int tolua_set_Pointer_CMessage___reference(lua_State* L)
{
	Pointer<CMessage*>* self = (Pointer<CMessage*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessage*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CMessage**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CMessage>");
	return 0;
}

static int tolua_function_Pointer_CMessage___getValue(lua_State* L)
{
	Pointer<CMessage*>* self = (Pointer<CMessage*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessage*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CMessage* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CMessage");
	return 1;
}

static int tolua_function_Pointer_CMessage___setValue(lua_State* L)
{
	Pointer<CMessage*>* self = (Pointer<CMessage*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessage*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CMessage*)tolua_tousertype_dynamic(L, 2, 0, "CMessage"));
	return 0;
}

static int tolua_get_Pointer_byte____reference(lua_State* L)
{
	Pointer<byte**>* self = (Pointer<byte**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<byte**>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<byte*>");
	return 1;
}

static int tolua_set_Pointer_byte____reference(lua_State* L)
{
	Pointer<byte**>* self = (Pointer<byte**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<byte**>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (byte***)tolua_tousertype_dynamic(L, 2, 0, "Pointer<byte*>");
	return 0;
}

static int tolua_function_Pointer_byte____getValue(lua_State* L)
{
	Pointer<byte**>* self = (Pointer<byte**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<byte**>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	byte** returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "Pointer<byte>");
	return 1;
}

static int tolua_function_Pointer_byte____setValue(lua_State* L)
{
	Pointer<byte**>* self = (Pointer<byte**>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<byte**>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((byte**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<byte>"));
	return 0;
}

static int tolua_get_Pointer_VariableArray_CResourceManagerHashEntry____reference(lua_State* L)
{
	Pointer<VariableArray<CResourceManagerHashEntry>*>* self = (Pointer<VariableArray<CResourceManagerHashEntry>*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<VariableArray<CResourceManagerHashEntry>*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<VariableArray<CResourceManagerHashEntry>>");
	return 1;
}

static int tolua_set_Pointer_VariableArray_CResourceManagerHashEntry____reference(lua_State* L)
{
	Pointer<VariableArray<CResourceManagerHashEntry>*>* self = (Pointer<VariableArray<CResourceManagerHashEntry>*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<VariableArray<CResourceManagerHashEntry>*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (VariableArray<CResourceManagerHashEntry>**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<VariableArray<CResourceManagerHashEntry>>");
	return 0;
}

static int tolua_function_Pointer_VariableArray_CResourceManagerHashEntry____getValue(lua_State* L)
{
	Pointer<VariableArray<CResourceManagerHashEntry>*>* self = (Pointer<VariableArray<CResourceManagerHashEntry>*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<VariableArray<CResourceManagerHashEntry>*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	VariableArray<CResourceManagerHashEntry>* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "VariableArray<CResourceManagerHashEntry>");
	return 1;
}

static int tolua_function_Pointer_VariableArray_CResourceManagerHashEntry____setValue(lua_State* L)
{
	Pointer<VariableArray<CResourceManagerHashEntry>*>* self = (Pointer<VariableArray<CResourceManagerHashEntry>*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<VariableArray<CResourceManagerHashEntry>*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((VariableArray<CResourceManagerHashEntry>*)tolua_tousertype_dynamic(L, 2, 0, "VariableArray<CResourceManagerHashEntry>"));
	return 0;
}

static int tolua_get_Pointer_BOOL__reference(lua_State* L)
{
	Pointer<BOOL>* self = (Pointer<BOOL>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<BOOL>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<BOOL>");
	return 1;
}

static int tolua_set_Pointer_BOOL__reference(lua_State* L)
{
	Pointer<BOOL>* self = (Pointer<BOOL>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<BOOL>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (BOOL*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<BOOL>");
	return 0;
}

static int tolua_function_Pointer_BOOL__getValue(lua_State* L)
{
	Pointer<BOOL>* self = (Pointer<BOOL>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<BOOL>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	BOOL returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_BOOL__setValue(lua_State* L)
{
	Pointer<BOOL>* self = (Pointer<BOOL>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<BOOL>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<BOOL>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_CBlood__reference(lua_State* L)
{
	Pointer<CBlood>* self = (Pointer<CBlood>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBlood>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CBlood");
	return 1;
}

static int tolua_set_Pointer_CBlood__reference(lua_State* L)
{
	Pointer<CBlood>* self = (Pointer<CBlood>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBlood>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CBlood*)tolua_tousertype_dynamic(L, 2, 0, "CBlood");
	return 0;
}

static int tolua_function_Pointer_CBlood__setValue(lua_State* L)
{
	Pointer<CBlood>* self = (Pointer<CBlood>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBlood>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CBlood*)tolua_tousertype_dynamic(L, 2, 0, "CBlood"));
	return 0;
}

static int tolua_get_Pointer_CChitinUnknown__reference(lua_State* L)
{
	Pointer<CChitinUnknown>* self = (Pointer<CChitinUnknown>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CChitinUnknown>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CChitinUnknown");
	return 1;
}

static int tolua_set_Pointer_CChitinUnknown__reference(lua_State* L)
{
	Pointer<CChitinUnknown>* self = (Pointer<CChitinUnknown>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CChitinUnknown>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CChitinUnknown*)tolua_tousertype_dynamic(L, 2, 0, "CChitinUnknown");
	return 0;
}

static int tolua_function_Pointer_CChitinUnknown__setValue(lua_State* L)
{
	Pointer<CChitinUnknown>* self = (Pointer<CChitinUnknown>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CChitinUnknown>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CChitinUnknown*)tolua_tousertype_dynamic(L, 2, 0, "CChitinUnknown"));
	return 0;
}

static int tolua_get_Pointer_CFile__reference(lua_State* L)
{
	Pointer<CFile>* self = (Pointer<CFile>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CFile>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CFile");
	return 1;
}

static int tolua_set_Pointer_CFile__reference(lua_State* L)
{
	Pointer<CFile>* self = (Pointer<CFile>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CFile>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CFile*)tolua_tousertype_dynamic(L, 2, 0, "CFile");
	return 0;
}

static int tolua_function_Pointer_CFile__setValue(lua_State* L)
{
	Pointer<CFile>* self = (Pointer<CFile>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CFile>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CFile*)tolua_tousertype_dynamic(L, 2, 0, "CFile"));
	return 0;
}

static int tolua_get_Pointer_CGameAnimation__reference(lua_State* L)
{
	Pointer<CGameAnimation>* self = (Pointer<CGameAnimation>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimation>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameAnimation");
	return 1;
}

static int tolua_set_Pointer_CGameAnimation__reference(lua_State* L)
{
	Pointer<CGameAnimation>* self = (Pointer<CGameAnimation>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimation>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameAnimation*)tolua_tousertype_dynamic(L, 2, 0, "CGameAnimation");
	return 0;
}

static int tolua_function_Pointer_CGameAnimation__setValue(lua_State* L)
{
	Pointer<CGameAnimation>* self = (Pointer<CGameAnimation>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimation>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameAnimation*)tolua_tousertype_dynamic(L, 2, 0, "CGameAnimation"));
	return 0;
}

static int tolua_get_Pointer_CGameDialogEntry__reference(lua_State* L)
{
	Pointer<CGameDialogEntry>* self = (Pointer<CGameDialogEntry>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameDialogEntry>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameDialogEntry");
	return 1;
}

static int tolua_set_Pointer_CGameDialogEntry__reference(lua_State* L)
{
	Pointer<CGameDialogEntry>* self = (Pointer<CGameDialogEntry>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameDialogEntry>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameDialogEntry*)tolua_tousertype_dynamic(L, 2, 0, "CGameDialogEntry");
	return 0;
}

static int tolua_function_Pointer_CGameDialogEntry__setValue(lua_State* L)
{
	Pointer<CGameDialogEntry>* self = (Pointer<CGameDialogEntry>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameDialogEntry>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameDialogEntry*)tolua_tousertype_dynamic(L, 2, 0, "CGameDialogEntry"));
	return 0;
}

static int tolua_get_Pointer_CGameDialogSprite__reference(lua_State* L)
{
	Pointer<CGameDialogSprite>* self = (Pointer<CGameDialogSprite>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameDialogSprite>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameDialogSprite");
	return 1;
}

static int tolua_set_Pointer_CGameDialogSprite__reference(lua_State* L)
{
	Pointer<CGameDialogSprite>* self = (Pointer<CGameDialogSprite>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameDialogSprite>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameDialogSprite*)tolua_tousertype_dynamic(L, 2, 0, "CGameDialogSprite");
	return 0;
}

static int tolua_function_Pointer_CGameDialogSprite__setValue(lua_State* L)
{
	Pointer<CGameDialogSprite>* self = (Pointer<CGameDialogSprite>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameDialogSprite>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameDialogSprite*)tolua_tousertype_dynamic(L, 2, 0, "CGameDialogSprite"));
	return 0;
}

static int tolua_get_Pointer_CMessageHandler__reference(lua_State* L)
{
	Pointer<CMessageHandler>* self = (Pointer<CMessageHandler>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageHandler>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CMessageHandler");
	return 1;
}

static int tolua_set_Pointer_CMessageHandler__reference(lua_State* L)
{
	Pointer<CMessageHandler>* self = (Pointer<CMessageHandler>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageHandler>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CMessageHandler*)tolua_tousertype_dynamic(L, 2, 0, "CMessageHandler");
	return 0;
}

static int tolua_function_Pointer_CMessageHandler__setValue(lua_State* L)
{
	Pointer<CMessageHandler>* self = (Pointer<CMessageHandler>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageHandler>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CMessageHandler*)tolua_tousertype_dynamic(L, 2, 0, "CMessageHandler"));
	return 0;
}

static int tolua_get_Pointer_CProgressBar__reference(lua_State* L)
{
	Pointer<CProgressBar>* self = (Pointer<CProgressBar>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProgressBar>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CProgressBar");
	return 1;
}

static int tolua_set_Pointer_CProgressBar__reference(lua_State* L)
{
	Pointer<CProgressBar>* self = (Pointer<CProgressBar>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProgressBar>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CProgressBar*)tolua_tousertype_dynamic(L, 2, 0, "CProgressBar");
	return 0;
}

static int tolua_function_Pointer_CProgressBar__setValue(lua_State* L)
{
	Pointer<CProgressBar>* self = (Pointer<CProgressBar>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProgressBar>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CProgressBar*)tolua_tousertype_dynamic(L, 2, 0, "CProgressBar"));
	return 0;
}

static int tolua_get_Pointer_CRainStorm__reference(lua_State* L)
{
	Pointer<CRainStorm>* self = (Pointer<CRainStorm>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRainStorm>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CRainStorm");
	return 1;
}

static int tolua_set_Pointer_CRainStorm__reference(lua_State* L)
{
	Pointer<CRainStorm>* self = (Pointer<CRainStorm>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRainStorm>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CRainStorm*)tolua_tousertype_dynamic(L, 2, 0, "CRainStorm");
	return 0;
}

static int tolua_function_Pointer_CRainStorm__setValue(lua_State* L)
{
	Pointer<CRainStorm>* self = (Pointer<CRainStorm>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRainStorm>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CRainStorm*)tolua_tousertype_dynamic(L, 2, 0, "CRainStorm"));
	return 0;
}

static int tolua_get_Pointer_CSize__reference(lua_State* L)
{
	Pointer<CSize>* self = (Pointer<CSize>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSize>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CSize");
	return 1;
}

static int tolua_set_Pointer_CSize__reference(lua_State* L)
{
	Pointer<CSize>* self = (Pointer<CSize>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSize>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CSize*)tolua_tousertype_dynamic(L, 2, 0, "CSize");
	return 0;
}

static int tolua_function_Pointer_CSize__setValue(lua_State* L)
{
	Pointer<CSize>* self = (Pointer<CSize>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSize>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CSize*)tolua_tousertype_dynamic(L, 2, 0, "CSize"));
	return 0;
}

static int tolua_get_Pointer_CSnowStorm__reference(lua_State* L)
{
	Pointer<CSnowStorm>* self = (Pointer<CSnowStorm>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSnowStorm>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CSnowStorm");
	return 1;
}

static int tolua_set_Pointer_CSnowStorm__reference(lua_State* L)
{
	Pointer<CSnowStorm>* self = (Pointer<CSnowStorm>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSnowStorm>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CSnowStorm*)tolua_tousertype_dynamic(L, 2, 0, "CSnowStorm");
	return 0;
}

static int tolua_function_Pointer_CSnowStorm__setValue(lua_State* L)
{
	Pointer<CSnowStorm>* self = (Pointer<CSnowStorm>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSnowStorm>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CSnowStorm*)tolua_tousertype_dynamic(L, 2, 0, "CSnowStorm"));
	return 0;
}

static int tolua_get_Pointer_CSoundImp__reference(lua_State* L)
{
	Pointer<CSoundImp>* self = (Pointer<CSoundImp>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSoundImp>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CSoundImp");
	return 1;
}

static int tolua_set_Pointer_CSoundImp__reference(lua_State* L)
{
	Pointer<CSoundImp>* self = (Pointer<CSoundImp>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSoundImp>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CSoundImp*)tolua_tousertype_dynamic(L, 2, 0, "CSoundImp");
	return 0;
}

static int tolua_function_Pointer_CSoundImp__setValue(lua_State* L)
{
	Pointer<CSoundImp>* self = (Pointer<CSoundImp>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSoundImp>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CSoundImp*)tolua_tousertype_dynamic(L, 2, 0, "CSoundImp"));
	return 0;
}

static int tolua_get_Pointer_CTlkTable__reference(lua_State* L)
{
	Pointer<CTlkTable>* self = (Pointer<CTlkTable>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTlkTable>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CTlkTable");
	return 1;
}

static int tolua_set_Pointer_CTlkTable__reference(lua_State* L)
{
	Pointer<CTlkTable>* self = (Pointer<CTlkTable>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTlkTable>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CTlkTable*)tolua_tousertype_dynamic(L, 2, 0, "CTlkTable");
	return 0;
}

static int tolua_function_Pointer_CTlkTable__setValue(lua_State* L)
{
	Pointer<CTlkTable>* self = (Pointer<CTlkTable>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTlkTable>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CTlkTable*)tolua_tousertype_dynamic(L, 2, 0, "CTlkTable"));
	return 0;
}

static int tolua_get_Pointer_CVidBitmap__reference(lua_State* L)
{
	Pointer<CVidBitmap>* self = (Pointer<CVidBitmap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidBitmap>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVidBitmap");
	return 1;
}

static int tolua_set_Pointer_CVidBitmap__reference(lua_State* L)
{
	Pointer<CVidBitmap>* self = (Pointer<CVidBitmap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidBitmap>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidBitmap*)tolua_tousertype_dynamic(L, 2, 0, "CVidBitmap");
	return 0;
}

static int tolua_function_Pointer_CVidBitmap__setValue(lua_State* L)
{
	Pointer<CVidBitmap>* self = (Pointer<CVidBitmap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidBitmap>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVidBitmap*)tolua_tousertype_dynamic(L, 2, 0, "CVidBitmap"));
	return 0;
}

static int tolua_get_Pointer_CWeather__reference(lua_State* L)
{
	Pointer<CWeather>* self = (Pointer<CWeather>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CWeather>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CWeather");
	return 1;
}

static int tolua_set_Pointer_CWeather__reference(lua_State* L)
{
	Pointer<CWeather>* self = (Pointer<CWeather>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CWeather>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CWeather*)tolua_tousertype_dynamic(L, 2, 0, "CWeather");
	return 0;
}

static int tolua_function_Pointer_CWeather__setValue(lua_State* L)
{
	Pointer<CWeather>* self = (Pointer<CWeather>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CWeather>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CWeather*)tolua_tousertype_dynamic(L, 2, 0, "CWeather"));
	return 0;
}

static int tolua_get_Pointer_DWORD__reference(lua_State* L)
{
	Pointer<DWORD>* self = (Pointer<DWORD>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DWORD>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<DWORD>");
	return 1;
}

static int tolua_set_Pointer_DWORD__reference(lua_State* L)
{
	Pointer<DWORD>* self = (Pointer<DWORD>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DWORD>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (DWORD*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<DWORD>");
	return 0;
}

static int tolua_function_Pointer_DWORD__getValue(lua_State* L)
{
	Pointer<DWORD>* self = (Pointer<DWORD>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DWORD>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	DWORD returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_DWORD__setValue(lua_State* L)
{
	Pointer<DWORD>* self = (Pointer<DWORD>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DWORD>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<DWORD>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_DWORD___reference(lua_State* L)
{
	Pointer<DWORD*>* self = (Pointer<DWORD*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DWORD*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<DWORD>");
	return 1;
}

static int tolua_set_Pointer_DWORD___reference(lua_State* L)
{
	Pointer<DWORD*>* self = (Pointer<DWORD*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DWORD*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (DWORD**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<DWORD>");
	return 0;
}

static int tolua_function_Pointer_DWORD___getValue(lua_State* L)
{
	Pointer<DWORD*>* self = (Pointer<DWORD*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DWORD*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	DWORD* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "Primitive<DWORD>");
	return 1;
}

static int tolua_function_Pointer_DWORD___setValue(lua_State* L)
{
	Pointer<DWORD*>* self = (Pointer<DWORD*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<DWORD*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((DWORD*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<DWORD>"));
	return 0;
}

static int tolua_get_Pointer_HRESULT__reference(lua_State* L)
{
	Pointer<HRESULT>* self = (Pointer<HRESULT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<HRESULT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<HRESULT>");
	return 1;
}

static int tolua_set_Pointer_HRESULT__reference(lua_State* L)
{
	Pointer<HRESULT>* self = (Pointer<HRESULT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<HRESULT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (HRESULT*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<HRESULT>");
	return 0;
}

static int tolua_function_Pointer_HRESULT__getValue(lua_State* L)
{
	Pointer<HRESULT>* self = (Pointer<HRESULT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<HRESULT>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	HRESULT returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_HRESULT__setValue(lua_State* L)
{
	Pointer<HRESULT>* self = (Pointer<HRESULT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<HRESULT>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<HRESULT>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_INT__reference(lua_State* L)
{
	Pointer<INT>* self = (Pointer<INT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<INT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<INT>");
	return 1;
}

static int tolua_set_Pointer_INT__reference(lua_State* L)
{
	Pointer<INT>* self = (Pointer<INT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<INT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (INT*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<INT>");
	return 0;
}

static int tolua_function_Pointer_INT__getValue(lua_State* L)
{
	Pointer<INT>* self = (Pointer<INT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<INT>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	INT returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_INT__setValue(lua_State* L)
{
	Pointer<INT>* self = (Pointer<INT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<INT>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<INT>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_LONG__reference(lua_State* L)
{
	Pointer<LONG>* self = (Pointer<LONG>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<LONG>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<LONG>");
	return 1;
}

static int tolua_set_Pointer_LONG__reference(lua_State* L)
{
	Pointer<LONG>* self = (Pointer<LONG>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<LONG>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (LONG*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<LONG>");
	return 0;
}

static int tolua_function_Pointer_LONG__getValue(lua_State* L)
{
	Pointer<LONG>* self = (Pointer<LONG>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<LONG>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	LONG returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_LONG__setValue(lua_State* L)
{
	Pointer<LONG>* self = (Pointer<LONG>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<LONG>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<LONG>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_const_LPCSTR__reference(lua_State* L)
{
	Pointer<const LPCSTR>* self = (Pointer<const LPCSTR>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<const LPCSTR>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "ConstCharString");
	return 1;
}

static int tolua_set_Pointer_const_LPCSTR__reference(lua_State* L)
{
	Pointer<const LPCSTR>* self = (Pointer<const LPCSTR>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<const LPCSTR>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (const char**)tolua_tousertype_dynamic(L, 2, 0, "ConstCharString");
	return 0;
}

static int tolua_get_Pointer_LRESULT__reference(lua_State* L)
{
	Pointer<LRESULT>* self = (Pointer<LRESULT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<LRESULT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<LRESULT>");
	return 1;
}

static int tolua_set_Pointer_LRESULT__reference(lua_State* L)
{
	Pointer<LRESULT>* self = (Pointer<LRESULT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<LRESULT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (LRESULT*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<LRESULT>");
	return 0;
}

static int tolua_function_Pointer_LRESULT__getValue(lua_State* L)
{
	Pointer<LRESULT>* self = (Pointer<LRESULT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<LRESULT>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	LRESULT returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_LRESULT__setValue(lua_State* L)
{
	Pointer<LRESULT>* self = (Pointer<LRESULT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<LRESULT>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<LRESULT>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_int__reference(lua_State* L)
{
	Pointer<int>* self = (Pointer<int>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<int>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<int>");
	return 1;
}

static int tolua_set_Pointer_int__reference(lua_State* L)
{
	Pointer<int>* self = (Pointer<int>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<int>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (int*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<int>");
	return 0;
}

static int tolua_function_Pointer_int__getValue(lua_State* L)
{
	Pointer<int>* self = (Pointer<int>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<int>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	int returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_int__setValue(lua_State* L)
{
	Pointer<int>* self = (Pointer<int>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<int>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<int>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_UINT__reference(lua_State* L)
{
	Pointer<UINT>* self = (Pointer<UINT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UINT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<UINT>");
	return 1;
}

static int tolua_set_Pointer_UINT__reference(lua_State* L)
{
	Pointer<UINT>* self = (Pointer<UINT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UINT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (UINT*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<UINT>");
	return 0;
}

static int tolua_function_Pointer_UINT__getValue(lua_State* L)
{
	Pointer<UINT>* self = (Pointer<UINT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UINT>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	UINT returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_UINT__setValue(lua_State* L)
{
	Pointer<UINT>* self = (Pointer<UINT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UINT>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<UINT>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_short__reference(lua_State* L)
{
	Pointer<short>* self = (Pointer<short>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<short>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<short>");
	return 1;
}

static int tolua_set_Pointer_short__reference(lua_State* L)
{
	Pointer<short>* self = (Pointer<short>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<short>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (short*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<short>");
	return 0;
}

static int tolua_function_Pointer_short__getValue(lua_State* L)
{
	Pointer<short>* self = (Pointer<short>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<short>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	short returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_short__setValue(lua_State* L)
{
	Pointer<short>* self = (Pointer<short>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<short>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<short>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_size_t__reference(lua_State* L)
{
	Pointer<size_t>* self = (Pointer<size_t>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<size_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<size_t>");
	return 1;
}

static int tolua_set_Pointer_size_t__reference(lua_State* L)
{
	Pointer<size_t>* self = (Pointer<size_t>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<size_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (size_t*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<size_t>");
	return 0;
}

static int tolua_function_Pointer_size_t__getValue(lua_State* L)
{
	Pointer<size_t>* self = (Pointer<size_t>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<size_t>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	size_t returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_size_t__setValue(lua_State* L)
{
	Pointer<size_t>* self = (Pointer<size_t>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<size_t>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<size_t>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_uintptr_t__reference(lua_State* L)
{
	Pointer<uintptr_t>* self = (Pointer<uintptr_t>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<uintptr_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<uintptr_t>");
	return 1;
}

static int tolua_set_Pointer_uintptr_t__reference(lua_State* L)
{
	Pointer<uintptr_t>* self = (Pointer<uintptr_t>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<uintptr_t>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (uintptr_t*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uintptr_t>");
	return 0;
}

static int tolua_function_Pointer_uintptr_t__getValue(lua_State* L)
{
	Pointer<uintptr_t>* self = (Pointer<uintptr_t>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<uintptr_t>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	uintptr_t returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_uintptr_t__setValue(lua_State* L)
{
	Pointer<uintptr_t>* self = (Pointer<uintptr_t>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<uintptr_t>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<uintptr_t>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_long__reference(lua_State* L)
{
	Pointer<long>* self = (Pointer<long>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<long>");
	return 1;
}

static int tolua_set_Pointer_long__reference(lua_State* L)
{
	Pointer<long>* self = (Pointer<long>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (long*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<long>");
	return 0;
}

static int tolua_function_Pointer_long__getValue(lua_State* L)
{
	Pointer<long>* self = (Pointer<long>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<long>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	long returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_long__setValue(lua_State* L)
{
	Pointer<long>* self = (Pointer<long>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<long>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<long>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_ushort__reference(lua_State* L)
{
	Pointer<ushort>* self = (Pointer<ushort>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<ushort>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<ushort>");
	return 1;
}

static int tolua_set_Pointer_ushort__reference(lua_State* L)
{
	Pointer<ushort>* self = (Pointer<ushort>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<ushort>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (ushort*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<ushort>");
	return 0;
}

static int tolua_function_Pointer_ushort__getValue(lua_State* L)
{
	Pointer<ushort>* self = (Pointer<ushort>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<ushort>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	ushort returnVal = self->getValue();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Pointer_ushort__setValue(lua_State* L)
{
	Pointer<ushort>* self = (Pointer<ushort>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<ushort>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tointeger<ushort>(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_bool__reference(lua_State* L)
{
	Pointer<bool>* self = (Pointer<bool>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<bool>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<bool>");
	return 1;
}

static int tolua_set_Pointer_bool__reference(lua_State* L)
{
	Pointer<bool>* self = (Pointer<bool>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<bool>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (bool*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<bool>");
	return 0;
}

static int tolua_function_Pointer_bool__getValue(lua_State* L)
{
	Pointer<bool>* self = (Pointer<bool>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<bool>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	bool returnVal = self->getValue();
	tolua_pushboolean(L, (bool)returnVal);
	return 1;
}

static int tolua_function_Pointer_bool__setValue(lua_State* L)
{
	Pointer<bool>* self = (Pointer<bool>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<bool>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_toboolean(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_Primitive___int8___reference(lua_State* L)
{
	Pointer<Primitive<__int8>>* self = (Pointer<Primitive<__int8>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<__int8>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<__int8>");
	return 1;
}

static int tolua_set_Pointer_Primitive___int8___reference(lua_State* L)
{
	Pointer<Primitive<__int8>>* self = (Pointer<Primitive<__int8>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<__int8>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<__int8>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<__int8>");
	return 0;
}

static int tolua_function_Pointer_Primitive___int8___setValue(lua_State* L)
{
	Pointer<Primitive<__int8>>* self = (Pointer<Primitive<__int8>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<__int8>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<__int8>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<__int8>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_int32_t___reference(lua_State* L)
{
	Pointer<Primitive<int32_t>>* self = (Pointer<Primitive<int32_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int32_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<int32_t>");
	return 1;
}

static int tolua_set_Pointer_Primitive_int32_t___reference(lua_State* L)
{
	Pointer<Primitive<int32_t>>* self = (Pointer<Primitive<int32_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int32_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<int32_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<int32_t>");
	return 0;
}

static int tolua_function_Pointer_Primitive_int32_t___setValue(lua_State* L)
{
	Pointer<Primitive<int32_t>>* self = (Pointer<Primitive<int32_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int32_t>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<int32_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<int32_t>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_uint32_t___reference(lua_State* L)
{
	Pointer<Primitive<uint32_t>>* self = (Pointer<Primitive<uint32_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint32_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<uint32_t>");
	return 1;
}

static int tolua_set_Pointer_Primitive_uint32_t___reference(lua_State* L)
{
	Pointer<Primitive<uint32_t>>* self = (Pointer<Primitive<uint32_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint32_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<uint32_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uint32_t>");
	return 0;
}

static int tolua_function_Pointer_Primitive_uint32_t___setValue(lua_State* L)
{
	Pointer<Primitive<uint32_t>>* self = (Pointer<Primitive<uint32_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint32_t>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<uint32_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uint32_t>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_HRESULT___reference(lua_State* L)
{
	Pointer<Primitive<HRESULT>>* self = (Pointer<Primitive<HRESULT>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<HRESULT>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<HRESULT>");
	return 1;
}

static int tolua_set_Pointer_Primitive_HRESULT___reference(lua_State* L)
{
	Pointer<Primitive<HRESULT>>* self = (Pointer<Primitive<HRESULT>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<HRESULT>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<HRESULT>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<HRESULT>");
	return 0;
}

static int tolua_function_Pointer_Primitive_HRESULT___setValue(lua_State* L)
{
	Pointer<Primitive<HRESULT>>* self = (Pointer<Primitive<HRESULT>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<HRESULT>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<HRESULT>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<HRESULT>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_byte___reference(lua_State* L)
{
	Pointer<Primitive<byte>>* self = (Pointer<Primitive<byte>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<byte>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<byte>");
	return 1;
}

static int tolua_set_Pointer_Primitive_byte___reference(lua_State* L)
{
	Pointer<Primitive<byte>>* self = (Pointer<Primitive<byte>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<byte>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<byte>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<byte>");
	return 0;
}

static int tolua_function_Pointer_Primitive_byte___setValue(lua_State* L)
{
	Pointer<Primitive<byte>>* self = (Pointer<Primitive<byte>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<byte>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<byte>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<byte>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_float___reference(lua_State* L)
{
	Pointer<Primitive<float>>* self = (Pointer<Primitive<float>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<float>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<float>");
	return 1;
}

static int tolua_set_Pointer_Primitive_float___reference(lua_State* L)
{
	Pointer<Primitive<float>>* self = (Pointer<Primitive<float>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<float>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<float>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<float>");
	return 0;
}

static int tolua_function_Pointer_Primitive_float___setValue(lua_State* L)
{
	Pointer<Primitive<float>>* self = (Pointer<Primitive<float>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<float>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<float>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<float>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_BOOL___reference(lua_State* L)
{
	Pointer<Primitive<BOOL>>* self = (Pointer<Primitive<BOOL>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<BOOL>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<BOOL>");
	return 1;
}

static int tolua_set_Pointer_Primitive_BOOL___reference(lua_State* L)
{
	Pointer<Primitive<BOOL>>* self = (Pointer<Primitive<BOOL>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<BOOL>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<BOOL>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<BOOL>");
	return 0;
}

static int tolua_function_Pointer_Primitive_BOOL___setValue(lua_State* L)
{
	Pointer<Primitive<BOOL>>* self = (Pointer<Primitive<BOOL>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<BOOL>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<BOOL>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<BOOL>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_ushort___reference(lua_State* L)
{
	Pointer<Primitive<ushort>>* self = (Pointer<Primitive<ushort>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<ushort>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<ushort>");
	return 1;
}

static int tolua_set_Pointer_Primitive_ushort___reference(lua_State* L)
{
	Pointer<Primitive<ushort>>* self = (Pointer<Primitive<ushort>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<ushort>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<ushort>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<ushort>");
	return 0;
}

static int tolua_function_Pointer_Primitive_ushort___setValue(lua_State* L)
{
	Pointer<Primitive<ushort>>* self = (Pointer<Primitive<ushort>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<ushort>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<ushort>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<ushort>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_uint16_t___reference(lua_State* L)
{
	Pointer<Primitive<uint16_t>>* self = (Pointer<Primitive<uint16_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint16_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<uint16_t>");
	return 1;
}

static int tolua_set_Pointer_Primitive_uint16_t___reference(lua_State* L)
{
	Pointer<Primitive<uint16_t>>* self = (Pointer<Primitive<uint16_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint16_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<uint16_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uint16_t>");
	return 0;
}

static int tolua_function_Pointer_Primitive_uint16_t___setValue(lua_State* L)
{
	Pointer<Primitive<uint16_t>>* self = (Pointer<Primitive<uint16_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint16_t>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<uint16_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uint16_t>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_int___reference(lua_State* L)
{
	Pointer<Primitive<int>>* self = (Pointer<Primitive<int>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<int>");
	return 1;
}

static int tolua_set_Pointer_Primitive_int___reference(lua_State* L)
{
	Pointer<Primitive<int>>* self = (Pointer<Primitive<int>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<int>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<int>");
	return 0;
}

static int tolua_function_Pointer_Primitive_int___setValue(lua_State* L)
{
	Pointer<Primitive<int>>* self = (Pointer<Primitive<int>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<int>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<int>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_LONG___reference(lua_State* L)
{
	Pointer<Primitive<LONG>>* self = (Pointer<Primitive<LONG>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<LONG>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<LONG>");
	return 1;
}

static int tolua_set_Pointer_Primitive_LONG___reference(lua_State* L)
{
	Pointer<Primitive<LONG>>* self = (Pointer<Primitive<LONG>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<LONG>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<LONG>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<LONG>");
	return 0;
}

static int tolua_function_Pointer_Primitive_LONG___setValue(lua_State* L)
{
	Pointer<Primitive<LONG>>* self = (Pointer<Primitive<LONG>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<LONG>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<LONG>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<LONG>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_uintptr_t___reference(lua_State* L)
{
	Pointer<Primitive<uintptr_t>>* self = (Pointer<Primitive<uintptr_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uintptr_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<uintptr_t>");
	return 1;
}

static int tolua_set_Pointer_Primitive_uintptr_t___reference(lua_State* L)
{
	Pointer<Primitive<uintptr_t>>* self = (Pointer<Primitive<uintptr_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uintptr_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<uintptr_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uintptr_t>");
	return 0;
}

static int tolua_function_Pointer_Primitive_uintptr_t___setValue(lua_State* L)
{
	Pointer<Primitive<uintptr_t>>* self = (Pointer<Primitive<uintptr_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uintptr_t>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<uintptr_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uintptr_t>"));
	return 0;
}

static int tolua_get_Pointer_Primitive___int64___reference(lua_State* L)
{
	Pointer<Primitive<__int64>>* self = (Pointer<Primitive<__int64>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<__int64>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<__int64>");
	return 1;
}

static int tolua_set_Pointer_Primitive___int64___reference(lua_State* L)
{
	Pointer<Primitive<__int64>>* self = (Pointer<Primitive<__int64>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<__int64>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<__int64>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<__int64>");
	return 0;
}

static int tolua_function_Pointer_Primitive___int64___setValue(lua_State* L)
{
	Pointer<Primitive<__int64>>* self = (Pointer<Primitive<__int64>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<__int64>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<__int64>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<__int64>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_short___reference(lua_State* L)
{
	Pointer<Primitive<short>>* self = (Pointer<Primitive<short>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<short>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<short>");
	return 1;
}

static int tolua_set_Pointer_Primitive_short___reference(lua_State* L)
{
	Pointer<Primitive<short>>* self = (Pointer<Primitive<short>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<short>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<short>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<short>");
	return 0;
}

static int tolua_function_Pointer_Primitive_short___setValue(lua_State* L)
{
	Pointer<Primitive<short>>* self = (Pointer<Primitive<short>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<short>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<short>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<short>"));
	return 0;
}

static int tolua_get_Pointer_Primitive___int16___reference(lua_State* L)
{
	Pointer<Primitive<__int16>>* self = (Pointer<Primitive<__int16>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<__int16>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<__int16>");
	return 1;
}

static int tolua_set_Pointer_Primitive___int16___reference(lua_State* L)
{
	Pointer<Primitive<__int16>>* self = (Pointer<Primitive<__int16>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<__int16>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<__int16>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<__int16>");
	return 0;
}

static int tolua_function_Pointer_Primitive___int16___setValue(lua_State* L)
{
	Pointer<Primitive<__int16>>* self = (Pointer<Primitive<__int16>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<__int16>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<__int16>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<__int16>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_size_t___reference(lua_State* L)
{
	Pointer<Primitive<size_t>>* self = (Pointer<Primitive<size_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<size_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<size_t>");
	return 1;
}

static int tolua_set_Pointer_Primitive_size_t___reference(lua_State* L)
{
	Pointer<Primitive<size_t>>* self = (Pointer<Primitive<size_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<size_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<size_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<size_t>");
	return 0;
}

static int tolua_function_Pointer_Primitive_size_t___setValue(lua_State* L)
{
	Pointer<Primitive<size_t>>* self = (Pointer<Primitive<size_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<size_t>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<size_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<size_t>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_bool___reference(lua_State* L)
{
	Pointer<Primitive<bool>>* self = (Pointer<Primitive<bool>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<bool>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<bool>");
	return 1;
}

static int tolua_set_Pointer_Primitive_bool___reference(lua_State* L)
{
	Pointer<Primitive<bool>>* self = (Pointer<Primitive<bool>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<bool>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<bool>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<bool>");
	return 0;
}

static int tolua_function_Pointer_Primitive_bool___setValue(lua_State* L)
{
	Pointer<Primitive<bool>>* self = (Pointer<Primitive<bool>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<bool>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<bool>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<bool>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_UINT___reference(lua_State* L)
{
	Pointer<Primitive<UINT>>* self = (Pointer<Primitive<UINT>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<UINT>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<UINT>");
	return 1;
}

static int tolua_set_Pointer_Primitive_UINT___reference(lua_State* L)
{
	Pointer<Primitive<UINT>>* self = (Pointer<Primitive<UINT>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<UINT>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<UINT>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<UINT>");
	return 0;
}

static int tolua_function_Pointer_Primitive_UINT___setValue(lua_State* L)
{
	Pointer<Primitive<UINT>>* self = (Pointer<Primitive<UINT>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<UINT>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<UINT>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<UINT>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_int64_t___reference(lua_State* L)
{
	Pointer<Primitive<int64_t>>* self = (Pointer<Primitive<int64_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int64_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<int64_t>");
	return 1;
}

static int tolua_set_Pointer_Primitive_int64_t___reference(lua_State* L)
{
	Pointer<Primitive<int64_t>>* self = (Pointer<Primitive<int64_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int64_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<int64_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<int64_t>");
	return 0;
}

static int tolua_function_Pointer_Primitive_int64_t___setValue(lua_State* L)
{
	Pointer<Primitive<int64_t>>* self = (Pointer<Primitive<int64_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int64_t>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<int64_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<int64_t>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_char___reference(lua_State* L)
{
	Pointer<Primitive<char>>* self = (Pointer<Primitive<char>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<char>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<char>");
	return 1;
}

static int tolua_set_Pointer_Primitive_char___reference(lua_State* L)
{
	Pointer<Primitive<char>>* self = (Pointer<Primitive<char>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<char>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<char>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<char>");
	return 0;
}

static int tolua_function_Pointer_Primitive_char___setValue(lua_State* L)
{
	Pointer<Primitive<char>>* self = (Pointer<Primitive<char>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<char>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<char>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<char>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_const_char____reference(lua_State* L)
{
	Pointer<Primitive<const char*>>* self = (Pointer<Primitive<const char*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<const char*>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<const char*>");
	return 1;
}

static int tolua_set_Pointer_Primitive_const_char____reference(lua_State* L)
{
	Pointer<Primitive<const char*>>* self = (Pointer<Primitive<const char*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<const char*>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<const char*>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<const char*>");
	return 0;
}

static int tolua_function_Pointer_Primitive_const_char____setValue(lua_State* L)
{
	Pointer<Primitive<const char*>>* self = (Pointer<Primitive<const char*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<const char*>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<const char*>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<const char*>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_double___reference(lua_State* L)
{
	Pointer<Primitive<double>>* self = (Pointer<Primitive<double>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<double>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<double>");
	return 1;
}

static int tolua_set_Pointer_Primitive_double___reference(lua_State* L)
{
	Pointer<Primitive<double>>* self = (Pointer<Primitive<double>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<double>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<double>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<double>");
	return 0;
}

static int tolua_function_Pointer_Primitive_double___setValue(lua_State* L)
{
	Pointer<Primitive<double>>* self = (Pointer<Primitive<double>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<double>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<double>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<double>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_uint8_t___reference(lua_State* L)
{
	Pointer<Primitive<uint8_t>>* self = (Pointer<Primitive<uint8_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint8_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<uint8_t>");
	return 1;
}

static int tolua_set_Pointer_Primitive_uint8_t___reference(lua_State* L)
{
	Pointer<Primitive<uint8_t>>* self = (Pointer<Primitive<uint8_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint8_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<uint8_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uint8_t>");
	return 0;
}

static int tolua_function_Pointer_Primitive_uint8_t___setValue(lua_State* L)
{
	Pointer<Primitive<uint8_t>>* self = (Pointer<Primitive<uint8_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint8_t>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<uint8_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uint8_t>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_ptrdiff_t___reference(lua_State* L)
{
	Pointer<Primitive<ptrdiff_t>>* self = (Pointer<Primitive<ptrdiff_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<ptrdiff_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<ptrdiff_t>");
	return 1;
}

static int tolua_set_Pointer_Primitive_ptrdiff_t___reference(lua_State* L)
{
	Pointer<Primitive<ptrdiff_t>>* self = (Pointer<Primitive<ptrdiff_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<ptrdiff_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<ptrdiff_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<ptrdiff_t>");
	return 0;
}

static int tolua_function_Pointer_Primitive_ptrdiff_t___setValue(lua_State* L)
{
	Pointer<Primitive<ptrdiff_t>>* self = (Pointer<Primitive<ptrdiff_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<ptrdiff_t>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<ptrdiff_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<ptrdiff_t>"));
	return 0;
}

static int tolua_get_Pointer_Primitive___int32___reference(lua_State* L)
{
	Pointer<Primitive<__int32>>* self = (Pointer<Primitive<__int32>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<__int32>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<__int32>");
	return 1;
}

static int tolua_set_Pointer_Primitive___int32___reference(lua_State* L)
{
	Pointer<Primitive<__int32>>* self = (Pointer<Primitive<__int32>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<__int32>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<__int32>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<__int32>");
	return 0;
}

static int tolua_function_Pointer_Primitive___int32___setValue(lua_State* L)
{
	Pointer<Primitive<__int32>>* self = (Pointer<Primitive<__int32>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<__int32>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<__int32>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<__int32>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_long_double___reference(lua_State* L)
{
	Pointer<Primitive<long double>>* self = (Pointer<Primitive<long double>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<long double>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<long double>");
	return 1;
}

static int tolua_set_Pointer_Primitive_long_double___reference(lua_State* L)
{
	Pointer<Primitive<long double>>* self = (Pointer<Primitive<long double>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<long double>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<long double>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<long double>");
	return 0;
}

static int tolua_function_Pointer_Primitive_long_double___setValue(lua_State* L)
{
	Pointer<Primitive<long double>>* self = (Pointer<Primitive<long double>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<long double>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<long double>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<long double>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_int8_t___reference(lua_State* L)
{
	Pointer<Primitive<int8_t>>* self = (Pointer<Primitive<int8_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int8_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<int8_t>");
	return 1;
}

static int tolua_set_Pointer_Primitive_int8_t___reference(lua_State* L)
{
	Pointer<Primitive<int8_t>>* self = (Pointer<Primitive<int8_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int8_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<int8_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<int8_t>");
	return 0;
}

static int tolua_function_Pointer_Primitive_int8_t___setValue(lua_State* L)
{
	Pointer<Primitive<int8_t>>* self = (Pointer<Primitive<int8_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int8_t>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<int8_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<int8_t>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_int16_t___reference(lua_State* L)
{
	Pointer<Primitive<int16_t>>* self = (Pointer<Primitive<int16_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int16_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<int16_t>");
	return 1;
}

static int tolua_set_Pointer_Primitive_int16_t___reference(lua_State* L)
{
	Pointer<Primitive<int16_t>>* self = (Pointer<Primitive<int16_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int16_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<int16_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<int16_t>");
	return 0;
}

static int tolua_function_Pointer_Primitive_int16_t___setValue(lua_State* L)
{
	Pointer<Primitive<int16_t>>* self = (Pointer<Primitive<int16_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<int16_t>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<int16_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<int16_t>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_intptr_t___reference(lua_State* L)
{
	Pointer<Primitive<intptr_t>>* self = (Pointer<Primitive<intptr_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<intptr_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<intptr_t>");
	return 1;
}

static int tolua_set_Pointer_Primitive_intptr_t___reference(lua_State* L)
{
	Pointer<Primitive<intptr_t>>* self = (Pointer<Primitive<intptr_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<intptr_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<intptr_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<intptr_t>");
	return 0;
}

static int tolua_function_Pointer_Primitive_intptr_t___setValue(lua_State* L)
{
	Pointer<Primitive<intptr_t>>* self = (Pointer<Primitive<intptr_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<intptr_t>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<intptr_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<intptr_t>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_DWORD___reference(lua_State* L)
{
	Pointer<Primitive<DWORD>>* self = (Pointer<Primitive<DWORD>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<DWORD>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<DWORD>");
	return 1;
}

static int tolua_set_Pointer_Primitive_DWORD___reference(lua_State* L)
{
	Pointer<Primitive<DWORD>>* self = (Pointer<Primitive<DWORD>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<DWORD>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<DWORD>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<DWORD>");
	return 0;
}

static int tolua_function_Pointer_Primitive_DWORD___setValue(lua_State* L)
{
	Pointer<Primitive<DWORD>>* self = (Pointer<Primitive<DWORD>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<DWORD>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<DWORD>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<DWORD>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_uint64_t___reference(lua_State* L)
{
	Pointer<Primitive<uint64_t>>* self = (Pointer<Primitive<uint64_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint64_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<uint64_t>");
	return 1;
}

static int tolua_set_Pointer_Primitive_uint64_t___reference(lua_State* L)
{
	Pointer<Primitive<uint64_t>>* self = (Pointer<Primitive<uint64_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint64_t>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<uint64_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uint64_t>");
	return 0;
}

static int tolua_function_Pointer_Primitive_uint64_t___setValue(lua_State* L)
{
	Pointer<Primitive<uint64_t>>* self = (Pointer<Primitive<uint64_t>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint64_t>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<uint64_t>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uint64_t>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_INT___reference(lua_State* L)
{
	Pointer<Primitive<INT>>* self = (Pointer<Primitive<INT>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<INT>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<INT>");
	return 1;
}

static int tolua_set_Pointer_Primitive_INT___reference(lua_State* L)
{
	Pointer<Primitive<INT>>* self = (Pointer<Primitive<INT>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<INT>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<INT>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<INT>");
	return 0;
}

static int tolua_function_Pointer_Primitive_INT___setValue(lua_State* L)
{
	Pointer<Primitive<INT>>* self = (Pointer<Primitive<INT>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<INT>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<INT>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<INT>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_uint___reference(lua_State* L)
{
	Pointer<Primitive<uint>>* self = (Pointer<Primitive<uint>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<uint>");
	return 1;
}

static int tolua_set_Pointer_Primitive_uint___reference(lua_State* L)
{
	Pointer<Primitive<uint>>* self = (Pointer<Primitive<uint>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<uint>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uint>");
	return 0;
}

static int tolua_function_Pointer_Primitive_uint___setValue(lua_State* L)
{
	Pointer<Primitive<uint>>* self = (Pointer<Primitive<uint>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<uint>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<uint>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<uint>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_long___reference(lua_State* L)
{
	Pointer<Primitive<long>>* self = (Pointer<Primitive<long>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<long>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<long>");
	return 1;
}

static int tolua_set_Pointer_Primitive_long___reference(lua_State* L)
{
	Pointer<Primitive<long>>* self = (Pointer<Primitive<long>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<long>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<long>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<long>");
	return 0;
}

static int tolua_function_Pointer_Primitive_long___setValue(lua_State* L)
{
	Pointer<Primitive<long>>* self = (Pointer<Primitive<long>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<long>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<long>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<long>"));
	return 0;
}

static int tolua_get_Pointer_Primitive_LRESULT___reference(lua_State* L)
{
	Pointer<Primitive<LRESULT>>* self = (Pointer<Primitive<LRESULT>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<LRESULT>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Primitive<LRESULT>");
	return 1;
}

static int tolua_set_Pointer_Primitive_LRESULT___reference(lua_State* L)
{
	Pointer<Primitive<LRESULT>>* self = (Pointer<Primitive<LRESULT>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<LRESULT>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Primitive<LRESULT>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<LRESULT>");
	return 0;
}

static int tolua_function_Pointer_Primitive_LRESULT___setValue(lua_State* L)
{
	Pointer<Primitive<LRESULT>>* self = (Pointer<Primitive<LRESULT>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Primitive<LRESULT>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Primitive<LRESULT>*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<LRESULT>"));
	return 0;
}

static int tolua_get_Pointer_RECT__reference(lua_State* L)
{
	Pointer<RECT>* self = (Pointer<RECT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<RECT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "RECT");
	return 1;
}

static int tolua_set_Pointer_RECT__reference(lua_State* L)
{
	Pointer<RECT>* self = (Pointer<RECT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<RECT>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (RECT*)tolua_tousertype_dynamic(L, 2, 0, "RECT");
	return 0;
}

static int tolua_function_Pointer_RECT__setValue(lua_State* L)
{
	Pointer<RECT>* self = (Pointer<RECT>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<RECT>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(RECT*)tolua_tousertype_dynamic(L, 2, 0, "RECT"));
	return 0;
}

static int tolua_get_Pointer_UnknownLuaStruct__reference(lua_State* L)
{
	Pointer<UnknownLuaStruct>* self = (Pointer<UnknownLuaStruct>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UnknownLuaStruct>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "UnknownLuaStruct");
	return 1;
}

static int tolua_set_Pointer_UnknownLuaStruct__reference(lua_State* L)
{
	Pointer<UnknownLuaStruct>* self = (Pointer<UnknownLuaStruct>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UnknownLuaStruct>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (UnknownLuaStruct*)tolua_tousertype_dynamic(L, 2, 0, "UnknownLuaStruct");
	return 0;
}

static int tolua_function_Pointer_UnknownLuaStruct__setValue(lua_State* L)
{
	Pointer<UnknownLuaStruct>* self = (Pointer<UnknownLuaStruct>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UnknownLuaStruct>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(UnknownLuaStruct*)tolua_tousertype_dynamic(L, 2, 0, "UnknownLuaStruct"));
	return 0;
}

static int tolua_get_Pointer_UnmappedUserType__reference(lua_State* L)
{
	Pointer<UnmappedUserType>* self = (Pointer<UnmappedUserType>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UnmappedUserType>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "UnmappedUserType");
	return 1;
}

static int tolua_set_Pointer_UnmappedUserType__reference(lua_State* L)
{
	Pointer<UnmappedUserType>* self = (Pointer<UnmappedUserType>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UnmappedUserType>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (UnmappedUserType*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_function_Pointer_UnmappedUserType__setValue(lua_State* L)
{
	Pointer<UnmappedUserType>* self = (Pointer<UnmappedUserType>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<UnmappedUserType>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(UnmappedUserType*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType"));
	return 0;
}

static int tolua_get_Pointer_CNetwork__reference(lua_State* L)
{
	Pointer<CNetwork>* self = (Pointer<CNetwork>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CNetwork>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CNetwork");
	return 1;
}

static int tolua_set_Pointer_CNetwork__reference(lua_State* L)
{
	Pointer<CNetwork>* self = (Pointer<CNetwork>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CNetwork>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CNetwork*)tolua_tousertype_dynamic(L, 2, 0, "CNetwork");
	return 0;
}

static int tolua_function_Pointer_CNetwork__setValue(lua_State* L)
{
	Pointer<CNetwork>* self = (Pointer<CNetwork>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CNetwork>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CNetwork*)tolua_tousertype_dynamic(L, 2, 0, "CNetwork"));
	return 0;
}

static int tolua_get_Pointer_char___reference(lua_State* L)
{
	Pointer<char*>* self = (Pointer<char*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<char*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CharString");
	return 1;
}

static int tolua_set_Pointer_char___reference(lua_State* L)
{
	Pointer<char*>* self = (Pointer<char*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<char*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (char**)tolua_tousertype_dynamic(L, 2, 0, "CharString");
	return 0;
}

static int tolua_function_Pointer_char___setValue(lua_State* L)
{
	Pointer<char*>* self = (Pointer<char*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<char*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(char**)tolua_tousertype_dynamic(L, 2, 0, "CharString"));
	return 0;
}

static int tolua_get_Pointer_char__reference(lua_State* L)
{
	Pointer<char>* self = (Pointer<char>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<char>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)&self->reference, "CharString");
	return 1;
}

static int tolua_function_Pointer_char__getValue(lua_State* L)
{
	Pointer<char>* self = (Pointer<char>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<char>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	char returnVal = self->getValue();
	lua_pushlstring(L, (const char*)&returnVal, 1);
	return 1;
}

static int tolua_function_Pointer_char__setValue(lua_State* L)
{
	Pointer<char>* self = (Pointer<char>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<char>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(tolua_function_tochar(L, 2, "setValue"));
	return 0;
}

static int tolua_get_Pointer_const_char___reference(lua_State* L)
{
	Pointer<const char*>* self = (Pointer<const char*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<const char*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "ConstCharString");
	return 1;
}

static int tolua_set_Pointer_const_char___reference(lua_State* L)
{
	Pointer<const char*>* self = (Pointer<const char*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<const char*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (const char**)tolua_tousertype_dynamic(L, 2, 0, "ConstCharString");
	return 0;
}

static int tolua_get_Pointer_int___reference(lua_State* L)
{
	Pointer<int*>* self = (Pointer<int*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<int*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<int>");
	return 1;
}

static int tolua_set_Pointer_int___reference(lua_State* L)
{
	Pointer<int*>* self = (Pointer<int*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<int*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (int**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<int>");
	return 0;
}

static int tolua_function_Pointer_int___getValue(lua_State* L)
{
	Pointer<int*>* self = (Pointer<int*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<int*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	int* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "Primitive<int>");
	return 1;
}

static int tolua_function_Pointer_int___setValue(lua_State* L)
{
	Pointer<int*>* self = (Pointer<int*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<int*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((int*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<int>"));
	return 0;
}

static int tolua_get_Pointer_CVidPoly__reference(lua_State* L)
{
	Pointer<CVidPoly>* self = (Pointer<CVidPoly>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidPoly>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVidPoly");
	return 1;
}

static int tolua_set_Pointer_CVidPoly__reference(lua_State* L)
{
	Pointer<CVidPoly>* self = (Pointer<CVidPoly>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidPoly>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidPoly*)tolua_tousertype_dynamic(L, 2, 0, "CVidPoly");
	return 0;
}

static int tolua_function_Pointer_CVidPoly__setValue(lua_State* L)
{
	Pointer<CVidPoly>* self = (Pointer<CVidPoly>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidPoly>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVidPoly*)tolua_tousertype_dynamic(L, 2, 0, "CVidPoly"));
	return 0;
}

static int tolua_get_Pointer_CUIControlButtonMapEntry__reference(lua_State* L)
{
	Pointer<CUIControlButtonMapEntry>* self = (Pointer<CUIControlButtonMapEntry>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButtonMapEntry>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUIControlButtonMapEntry");
	return 1;
}

static int tolua_set_Pointer_CUIControlButtonMapEntry__reference(lua_State* L)
{
	Pointer<CUIControlButtonMapEntry>* self = (Pointer<CUIControlButtonMapEntry>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButtonMapEntry>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUIControlButtonMapEntry*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlButtonMapEntry");
	return 0;
}

static int tolua_function_Pointer_CUIControlButtonMapEntry__setValue(lua_State* L)
{
	Pointer<CUIControlButtonMapEntry>* self = (Pointer<CUIControlButtonMapEntry>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButtonMapEntry>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUIControlButtonMapEntry*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlButtonMapEntry"));
	return 0;
}

static int tolua_get_Pointer_CUIControlButtonMapEntry___reference(lua_State* L)
{
	Pointer<CUIControlButtonMapEntry*>* self = (Pointer<CUIControlButtonMapEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButtonMapEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CUIControlButtonMapEntry>");
	return 1;
}

static int tolua_set_Pointer_CUIControlButtonMapEntry___reference(lua_State* L)
{
	Pointer<CUIControlButtonMapEntry*>* self = (Pointer<CUIControlButtonMapEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButtonMapEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUIControlButtonMapEntry**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CUIControlButtonMapEntry>");
	return 0;
}

static int tolua_function_Pointer_CUIControlButtonMapEntry___getValue(lua_State* L)
{
	Pointer<CUIControlButtonMapEntry*>* self = (Pointer<CUIControlButtonMapEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButtonMapEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CUIControlButtonMapEntry* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CUIControlButtonMapEntry");
	return 1;
}

static int tolua_function_Pointer_CUIControlButtonMapEntry___setValue(lua_State* L)
{
	Pointer<CUIControlButtonMapEntry*>* self = (Pointer<CUIControlButtonMapEntry*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButtonMapEntry*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CUIControlButtonMapEntry*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlButtonMapEntry"));
	return 0;
}

static int tolua_get_Pointer_CSearchBitmap__reference(lua_State* L)
{
	Pointer<CSearchBitmap>* self = (Pointer<CSearchBitmap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSearchBitmap>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CSearchBitmap");
	return 1;
}

static int tolua_set_Pointer_CSearchBitmap__reference(lua_State* L)
{
	Pointer<CSearchBitmap>* self = (Pointer<CSearchBitmap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSearchBitmap>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CSearchBitmap*)tolua_tousertype_dynamic(L, 2, 0, "CSearchBitmap");
	return 0;
}

static int tolua_function_Pointer_CSearchBitmap__setValue(lua_State* L)
{
	Pointer<CSearchBitmap>* self = (Pointer<CSearchBitmap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSearchBitmap>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CSearchBitmap*)tolua_tousertype_dynamic(L, 2, 0, "CSearchBitmap"));
	return 0;
}

static int tolua_get_Pointer_CObList__reference(lua_State* L)
{
	Pointer<CObList>* self = (Pointer<CObList>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObList>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CObList");
	return 1;
}

static int tolua_set_Pointer_CObList__reference(lua_State* L)
{
	Pointer<CObList>* self = (Pointer<CObList>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObList>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CObList*)tolua_tousertype_dynamic(L, 2, 0, "CObList");
	return 0;
}

static int tolua_function_Pointer_CObList__setValue(lua_State* L)
{
	Pointer<CObList>* self = (Pointer<CObList>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObList>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CObList*)tolua_tousertype_dynamic(L, 2, 0, "CObList"));
	return 0;
}

static int tolua_get_Pointer_CVisibilityMap__reference(lua_State* L)
{
	Pointer<CVisibilityMap>* self = (Pointer<CVisibilityMap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVisibilityMap>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVisibilityMap");
	return 1;
}

static int tolua_set_Pointer_CVisibilityMap__reference(lua_State* L)
{
	Pointer<CVisibilityMap>* self = (Pointer<CVisibilityMap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVisibilityMap>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVisibilityMap*)tolua_tousertype_dynamic(L, 2, 0, "CVisibilityMap");
	return 0;
}

static int tolua_function_Pointer_CVisibilityMap__setValue(lua_State* L)
{
	Pointer<CVisibilityMap>* self = (Pointer<CVisibilityMap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVisibilityMap>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVisibilityMap*)tolua_tousertype_dynamic(L, 2, 0, "CVisibilityMap"));
	return 0;
}

static int tolua_get_Pointer_CParticle__reference(lua_State* L)
{
	Pointer<CParticle>* self = (Pointer<CParticle>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CParticle>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CParticle");
	return 1;
}

static int tolua_set_Pointer_CParticle__reference(lua_State* L)
{
	Pointer<CParticle>* self = (Pointer<CParticle>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CParticle>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CParticle*)tolua_tousertype_dynamic(L, 2, 0, "CParticle");
	return 0;
}

static int tolua_function_Pointer_CParticle__setValue(lua_State* L)
{
	Pointer<CParticle>* self = (Pointer<CParticle>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CParticle>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CParticle*)tolua_tousertype_dynamic(L, 2, 0, "CParticle"));
	return 0;
}

static int tolua_get_Pointer_CItem__vtbl__reference(lua_State* L)
{
	Pointer<CItem::vtbl>* self = (Pointer<CItem::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CItem::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CItem::vtbl");
	return 1;
}

static int tolua_set_Pointer_CItem__vtbl__reference(lua_State* L)
{
	Pointer<CItem::vtbl>* self = (Pointer<CItem::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CItem::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CItem::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CItem::vtbl");
	return 0;
}

static int tolua_function_Pointer_CItem__vtbl__setValue(lua_State* L)
{
	Pointer<CItem::vtbl>* self = (Pointer<CItem::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CItem::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CItem::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CItem::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CDerivedStats__reference(lua_State* L)
{
	Pointer<CDerivedStats>* self = (Pointer<CDerivedStats>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CDerivedStats>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CDerivedStats");
	return 1;
}

static int tolua_set_Pointer_CDerivedStats__reference(lua_State* L)
{
	Pointer<CDerivedStats>* self = (Pointer<CDerivedStats>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CDerivedStats>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CDerivedStats*)tolua_tousertype_dynamic(L, 2, 0, "CDerivedStats");
	return 0;
}

static int tolua_function_Pointer_CDerivedStats__setValue(lua_State* L)
{
	Pointer<CDerivedStats>* self = (Pointer<CDerivedStats>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CDerivedStats>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CDerivedStats*)tolua_tousertype_dynamic(L, 2, 0, "CDerivedStats"));
	return 0;
}

static int tolua_get_Pointer_WED_TileData_st__reference(lua_State* L)
{
	Pointer<WED_TileData_st>* self = (Pointer<WED_TileData_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<WED_TileData_st>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "WED_TileData_st");
	return 1;
}

static int tolua_set_Pointer_WED_TileData_st__reference(lua_State* L)
{
	Pointer<WED_TileData_st>* self = (Pointer<WED_TileData_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<WED_TileData_st>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (WED_TileData_st*)tolua_tousertype_dynamic(L, 2, 0, "WED_TileData_st");
	return 0;
}

static int tolua_function_Pointer_WED_TileData_st__setValue(lua_State* L)
{
	Pointer<WED_TileData_st>* self = (Pointer<WED_TileData_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<WED_TileData_st>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(WED_TileData_st*)tolua_tousertype_dynamic(L, 2, 0, "WED_TileData_st"));
	return 0;
}

static int tolua_get_Pointer_const_ConstCharString___reference(lua_State* L)
{
	Pointer<const ConstCharString*>* self = (Pointer<const ConstCharString*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<const ConstCharString*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "ConstCharString");
	return 1;
}

static int tolua_set_Pointer_const_ConstCharString___reference(lua_State* L)
{
	Pointer<const ConstCharString*>* self = (Pointer<const ConstCharString*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<const ConstCharString*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (const ConstCharString**)tolua_tousertype_dynamic(L, 2, 0, "ConstCharString");
	return 0;
}

static int tolua_function_Pointer_const_ConstCharString___getValue(lua_State* L)
{
	Pointer<const ConstCharString*>* self = (Pointer<const ConstCharString*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<const ConstCharString*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	const ConstCharString* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "ConstCharString");
	return 1;
}

static int tolua_get_Pointer_CharString___reference(lua_State* L)
{
	Pointer<CharString*>* self = (Pointer<CharString*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CharString*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CharString");
	return 1;
}

static int tolua_set_Pointer_CharString___reference(lua_State* L)
{
	Pointer<CharString*>* self = (Pointer<CharString*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CharString*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CharString**)tolua_tousertype_dynamic(L, 2, 0, "CharString");
	return 0;
}

static int tolua_function_Pointer_CharString___getValue(lua_State* L)
{
	Pointer<CharString*>* self = (Pointer<CharString*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CharString*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CharString* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CharString");
	return 1;
}

static int tolua_function_Pointer_CharString___setValue(lua_State* L)
{
	Pointer<CharString*>* self = (Pointer<CharString*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CharString*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CharString*)tolua_tousertype_dynamic(L, 2, 0, "CharString"));
	return 0;
}

static int tolua_get_Pointer_CVidMode__vtbl__reference(lua_State* L)
{
	Pointer<CVidMode::vtbl>* self = (Pointer<CVidMode::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVidMode::vtbl");
	return 1;
}

static int tolua_set_Pointer_CVidMode__vtbl__reference(lua_State* L)
{
	Pointer<CVidMode::vtbl>* self = (Pointer<CVidMode::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidMode::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode::vtbl");
	return 0;
}

static int tolua_function_Pointer_CVidMode__vtbl__setValue(lua_State* L)
{
	Pointer<CVidMode::vtbl>* self = (Pointer<CVidMode::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVidMode::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CUIControlBase__vtbl__reference(lua_State* L)
{
	Pointer<CUIControlBase::vtbl>* self = (Pointer<CUIControlBase::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlBase::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUIControlBase::vtbl");
	return 1;
}

static int tolua_set_Pointer_CUIControlBase__vtbl__reference(lua_State* L)
{
	Pointer<CUIControlBase::vtbl>* self = (Pointer<CUIControlBase::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlBase::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUIControlBase::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlBase::vtbl");
	return 0;
}

static int tolua_function_Pointer_CUIControlBase__vtbl__setValue(lua_State* L)
{
	Pointer<CUIControlBase::vtbl>* self = (Pointer<CUIControlBase::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlBase::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUIControlBase::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlBase::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CUIControlButton__vtbl__reference(lua_State* L)
{
	Pointer<CUIControlButton::vtbl>* self = (Pointer<CUIControlButton::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButton::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUIControlButton::vtbl");
	return 1;
}

static int tolua_set_Pointer_CUIControlButton__vtbl__reference(lua_State* L)
{
	Pointer<CUIControlButton::vtbl>* self = (Pointer<CUIControlButton::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButton::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUIControlButton::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlButton::vtbl");
	return 0;
}

static int tolua_function_Pointer_CUIControlButton__vtbl__setValue(lua_State* L)
{
	Pointer<CUIControlButton::vtbl>* self = (Pointer<CUIControlButton::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButton::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUIControlButton::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlButton::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CSoundMixer__reference(lua_State* L)
{
	Pointer<CSoundMixer>* self = (Pointer<CSoundMixer>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSoundMixer>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CSoundMixer");
	return 1;
}

static int tolua_set_Pointer_CSoundMixer__reference(lua_State* L)
{
	Pointer<CSoundMixer>* self = (Pointer<CSoundMixer>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSoundMixer>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CSoundMixer*)tolua_tousertype_dynamic(L, 2, 0, "CSoundMixer");
	return 0;
}

static int tolua_function_Pointer_CSoundMixer__setValue(lua_State* L)
{
	Pointer<CSoundMixer>* self = (Pointer<CSoundMixer>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSoundMixer>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CSoundMixer*)tolua_tousertype_dynamic(L, 2, 0, "CSoundMixer"));
	return 0;
}

static int tolua_get_Pointer_CSingleLock__reference(lua_State* L)
{
	Pointer<CSingleLock>* self = (Pointer<CSingleLock>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSingleLock>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CSingleLock");
	return 1;
}

static int tolua_set_Pointer_CSingleLock__reference(lua_State* L)
{
	Pointer<CSingleLock>* self = (Pointer<CSingleLock>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSingleLock>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CSingleLock*)tolua_tousertype_dynamic(L, 2, 0, "CSingleLock");
	return 0;
}

static int tolua_function_Pointer_CSingleLock__setValue(lua_State* L)
{
	Pointer<CSingleLock>* self = (Pointer<CSingleLock>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSingleLock>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CSingleLock*)tolua_tousertype_dynamic(L, 2, 0, "CSingleLock"));
	return 0;
}

static int tolua_get_Pointer_CObject__vtbl__reference(lua_State* L)
{
	Pointer<CObject::vtbl>* self = (Pointer<CObject::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObject::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CObject::vtbl");
	return 1;
}

static int tolua_set_Pointer_CObject__vtbl__reference(lua_State* L)
{
	Pointer<CObject::vtbl>* self = (Pointer<CObject::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObject::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CObject::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CObject::vtbl");
	return 0;
}

static int tolua_function_Pointer_CObject__vtbl__setValue(lua_State* L)
{
	Pointer<CObject::vtbl>* self = (Pointer<CObject::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CObject::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CObject::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CObject::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CWarp__vtbl__reference(lua_State* L)
{
	Pointer<CWarp::vtbl>* self = (Pointer<CWarp::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CWarp::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CWarp::vtbl");
	return 1;
}

static int tolua_set_Pointer_CWarp__vtbl__reference(lua_State* L)
{
	Pointer<CWarp::vtbl>* self = (Pointer<CWarp::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CWarp::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CWarp::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CWarp::vtbl");
	return 0;
}

static int tolua_function_Pointer_CWarp__vtbl__setValue(lua_State* L)
{
	Pointer<CWarp::vtbl>* self = (Pointer<CWarp::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CWarp::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CWarp::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CWarp::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CTypedPtrList_CPtrList_CGameEffect____vtbl__reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CGameEffect*>::vtbl>* self = (Pointer<CTypedPtrList<CPtrList,CGameEffect*>::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CTypedPtrList<CPtrList,CGameEffect*>::vtbl");
	return 1;
}

static int tolua_set_Pointer_CTypedPtrList_CPtrList_CGameEffect____vtbl__reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CGameEffect*>::vtbl>* self = (Pointer<CTypedPtrList<CPtrList,CGameEffect*>::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CTypedPtrList<CPtrList,CGameEffect*>::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CGameEffect*>::vtbl");
	return 0;
}

static int tolua_function_Pointer_CTypedPtrList_CPtrList_CGameEffect____vtbl__setValue(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CGameEffect*>::vtbl>* self = (Pointer<CTypedPtrList<CPtrList,CGameEffect*>::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CTypedPtrList<CPtrList,CGameEffect*>::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CGameEffect*>::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CTypedPtrList_CPtrList_long___reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,long>>* self = (Pointer<CTypedPtrList<CPtrList,long>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,long>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CTypedPtrList<CPtrList,long>");
	return 1;
}

static int tolua_set_Pointer_CTypedPtrList_CPtrList_long___reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,long>>* self = (Pointer<CTypedPtrList<CPtrList,long>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,long>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,long>");
	return 0;
}

static int tolua_function_Pointer_CTypedPtrList_CPtrList_long___setValue(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,long>>* self = (Pointer<CTypedPtrList<CPtrList,long>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,long>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,long>"));
	return 0;
}

static int tolua_get_Pointer_CTypedPtrList_CPtrList_CWarp____reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CWarp*>>* self = (Pointer<CTypedPtrList<CPtrList,CWarp*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CWarp*>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CTypedPtrList<CPtrList,CWarp*>");
	return 1;
}

static int tolua_set_Pointer_CTypedPtrList_CPtrList_CWarp____reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CWarp*>>* self = (Pointer<CTypedPtrList<CPtrList,CWarp*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CWarp*>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CWarp*>");
	return 0;
}

static int tolua_function_Pointer_CTypedPtrList_CPtrList_CWarp____setValue(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CWarp*>>* self = (Pointer<CTypedPtrList<CPtrList,CWarp*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CWarp*>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CWarp*>"));
	return 0;
}

static int tolua_get_Pointer_CTypedPtrList_CPtrList_CUIPanel____reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CUIPanel*>>* self = (Pointer<CTypedPtrList<CPtrList,CUIPanel*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CTypedPtrList<CPtrList,CUIPanel*>");
	return 1;
}

static int tolua_set_Pointer_CTypedPtrList_CPtrList_CUIPanel____reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CUIPanel*>>* self = (Pointer<CTypedPtrList<CPtrList,CUIPanel*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	return 0;
}

static int tolua_function_Pointer_CTypedPtrList_CPtrList_CUIPanel____setValue(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CUIPanel*>>* self = (Pointer<CTypedPtrList<CPtrList,CUIPanel*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIPanel*>"));
	return 0;
}

static int tolua_get_Pointer_CTypedPtrList_CPtrList_CUIControlBase____reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CUIControlBase*>>* self = (Pointer<CTypedPtrList<CPtrList,CUIControlBase*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CTypedPtrList<CPtrList,CUIControlBase*>");
	return 1;
}

static int tolua_set_Pointer_CTypedPtrList_CPtrList_CUIControlBase____reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CUIControlBase*>>* self = (Pointer<CTypedPtrList<CPtrList,CUIControlBase*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	return 0;
}

static int tolua_function_Pointer_CTypedPtrList_CPtrList_CUIControlBase____setValue(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CUIControlBase*>>* self = (Pointer<CTypedPtrList<CPtrList,CUIControlBase*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIControlBase*>"));
	return 0;
}

static int tolua_get_Pointer_CTypedPtrList_CPtrList_CGameEffect____reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CGameEffect*>>* self = (Pointer<CTypedPtrList<CPtrList,CGameEffect*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CTypedPtrList<CPtrList,CGameEffect*>");
	return 1;
}

static int tolua_set_Pointer_CTypedPtrList_CPtrList_CGameEffect____reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CGameEffect*>>* self = (Pointer<CTypedPtrList<CPtrList,CGameEffect*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	return 0;
}

static int tolua_function_Pointer_CTypedPtrList_CPtrList_CGameEffect____setValue(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CGameEffect*>>* self = (Pointer<CTypedPtrList<CPtrList,CGameEffect*>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CGameEffect*>"));
	return 0;
}

static int tolua_get_Pointer_CGameEffectList__reference(lua_State* L)
{
	Pointer<CGameEffectList>* self = (Pointer<CGameEffectList>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffectList>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameEffectList");
	return 1;
}

static int tolua_set_Pointer_CGameEffectList__reference(lua_State* L)
{
	Pointer<CGameEffectList>* self = (Pointer<CGameEffectList>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffectList>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameEffectList*)tolua_tousertype_dynamic(L, 2, 0, "CGameEffectList");
	return 0;
}

static int tolua_function_Pointer_CGameEffectList__setValue(lua_State* L)
{
	Pointer<CGameEffectList>* self = (Pointer<CGameEffectList>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffectList>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameEffectList*)tolua_tousertype_dynamic(L, 2, 0, "CGameEffectList"));
	return 0;
}

static int tolua_get_Pointer_CTypedPtrList_CPtrList_CUIPanel____CNode__reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	return 1;
}

static int tolua_set_Pointer_CTypedPtrList_CPtrList_CUIPanel____CNode__reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	return 0;
}

static int tolua_function_Pointer_CTypedPtrList_CPtrList_CUIPanel____CNode__setValue(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode"));
	return 0;
}

static int tolua_get_Pointer_CTypedPtrList_CPtrList_CUIControlBase____CNode__reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	return 1;
}

static int tolua_set_Pointer_CTypedPtrList_CPtrList_CUIControlBase____CNode__reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	return 0;
}

static int tolua_function_Pointer_CTypedPtrList_CPtrList_CUIControlBase____CNode__setValue(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode"));
	return 0;
}

static int tolua_get_Pointer_CTypedPtrList_CPtrList_CWarp____CNode__reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	return 1;
}

static int tolua_set_Pointer_CTypedPtrList_CPtrList_CWarp____CNode__reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	return 0;
}

static int tolua_function_Pointer_CTypedPtrList_CPtrList_CWarp____CNode__setValue(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode"));
	return 0;
}

static int tolua_get_Pointer_CTypedPtrList_CPtrList_long___CNode__reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,long>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,long>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,long>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CTypedPtrList<CPtrList,long>::CNode");
	return 1;
}

static int tolua_set_Pointer_CTypedPtrList_CPtrList_long___CNode__reference(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,long>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,long>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,long>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,long>::CNode");
	return 0;
}

static int tolua_function_Pointer_CTypedPtrList_CPtrList_long___CNode__setValue(lua_State* L)
{
	Pointer<CTypedPtrList<CPtrList,long>::CNode>* self = (Pointer<CTypedPtrList<CPtrList,long>::CNode>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CTypedPtrList<CPtrList,long>::CNode>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,long>::CNode"));
	return 0;
}

static int tolua_get_Pointer_CSyncObject__vtbl__reference(lua_State* L)
{
	Pointer<CSyncObject::vtbl>* self = (Pointer<CSyncObject::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSyncObject::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CSyncObject::vtbl");
	return 1;
}

static int tolua_set_Pointer_CSyncObject__vtbl__reference(lua_State* L)
{
	Pointer<CSyncObject::vtbl>* self = (Pointer<CSyncObject::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSyncObject::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CSyncObject::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CSyncObject::vtbl");
	return 0;
}

static int tolua_function_Pointer_CSyncObject__vtbl__setValue(lua_State* L)
{
	Pointer<CSyncObject::vtbl>* self = (Pointer<CSyncObject::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CSyncObject::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CSyncObject::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CSyncObject::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CGameObjectArray__reference(lua_State* L)
{
	Pointer<CGameObjectArray>* self = (Pointer<CGameObjectArray>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObjectArray>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameObjectArray");
	return 1;
}

static int tolua_set_Pointer_CGameObjectArray__reference(lua_State* L)
{
	Pointer<CGameObjectArray>* self = (Pointer<CGameObjectArray>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObjectArray>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameObjectArray*)tolua_tousertype_dynamic(L, 2, 0, "CGameObjectArray");
	return 0;
}

static int tolua_function_Pointer_CGameObjectArray__setValue(lua_State* L)
{
	Pointer<CGameObjectArray>* self = (Pointer<CGameObjectArray>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObjectArray>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameObjectArray*)tolua_tousertype_dynamic(L, 2, 0, "CGameObjectArray"));
	return 0;
}

static int tolua_get_Pointer_CVidMode3__reference(lua_State* L)
{
	Pointer<CVidMode3>* self = (Pointer<CVidMode3>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode3>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVidMode3");
	return 1;
}

static int tolua_set_Pointer_CVidMode3__reference(lua_State* L)
{
	Pointer<CVidMode3>* self = (Pointer<CVidMode3>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode3>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidMode3*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode3");
	return 0;
}

static int tolua_function_Pointer_CVidMode3__setValue(lua_State* L)
{
	Pointer<CVidMode3>* self = (Pointer<CVidMode3>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode3>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVidMode3*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode3"));
	return 0;
}

static int tolua_get_Pointer_CVidMode2__reference(lua_State* L)
{
	Pointer<CVidMode2>* self = (Pointer<CVidMode2>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode2>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVidMode2");
	return 1;
}

static int tolua_set_Pointer_CVidMode2__reference(lua_State* L)
{
	Pointer<CVidMode2>* self = (Pointer<CVidMode2>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode2>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidMode2*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode2");
	return 0;
}

static int tolua_function_Pointer_CVidMode2__setValue(lua_State* L)
{
	Pointer<CVidMode2>* self = (Pointer<CVidMode2>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode2>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVidMode2*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode2"));
	return 0;
}

static int tolua_get_Pointer_CVidMode1__reference(lua_State* L)
{
	Pointer<CVidMode1>* self = (Pointer<CVidMode1>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode1>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVidMode1");
	return 1;
}

static int tolua_set_Pointer_CVidMode1__reference(lua_State* L)
{
	Pointer<CVidMode1>* self = (Pointer<CVidMode1>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode1>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidMode1*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode1");
	return 0;
}

static int tolua_function_Pointer_CVidMode1__setValue(lua_State* L)
{
	Pointer<CVidMode1>* self = (Pointer<CVidMode1>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode1>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVidMode1*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode1"));
	return 0;
}

static int tolua_get_Pointer_CVidMode0__reference(lua_State* L)
{
	Pointer<CVidMode0>* self = (Pointer<CVidMode0>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode0>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVidMode0");
	return 1;
}

static int tolua_set_Pointer_CVidMode0__reference(lua_State* L)
{
	Pointer<CVidMode0>* self = (Pointer<CVidMode0>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode0>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidMode0*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode0");
	return 0;
}

static int tolua_function_Pointer_CVidMode0__setValue(lua_State* L)
{
	Pointer<CVidMode0>* self = (Pointer<CVidMode0>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMode0>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVidMode0*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode0"));
	return 0;
}

static int tolua_get_Pointer_CCriticalSection__reference(lua_State* L)
{
	Pointer<CCriticalSection>* self = (Pointer<CCriticalSection>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CCriticalSection>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CCriticalSection");
	return 1;
}

static int tolua_set_Pointer_CCriticalSection__reference(lua_State* L)
{
	Pointer<CCriticalSection>* self = (Pointer<CCriticalSection>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CCriticalSection>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CCriticalSection*)tolua_tousertype_dynamic(L, 2, 0, "CCriticalSection");
	return 0;
}

static int tolua_function_Pointer_CCriticalSection__setValue(lua_State* L)
{
	Pointer<CCriticalSection>* self = (Pointer<CCriticalSection>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CCriticalSection>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CCriticalSection*)tolua_tousertype_dynamic(L, 2, 0, "CCriticalSection"));
	return 0;
}

static int tolua_get_Pointer_CRes__vtbl__reference(lua_State* L)
{
	Pointer<CRes::vtbl>* self = (Pointer<CRes::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRes::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CRes::vtbl");
	return 1;
}

static int tolua_set_Pointer_CRes__vtbl__reference(lua_State* L)
{
	Pointer<CRes::vtbl>* self = (Pointer<CRes::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRes::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CRes::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CRes::vtbl");
	return 0;
}

static int tolua_function_Pointer_CRes__vtbl__setValue(lua_State* L)
{
	Pointer<CRes::vtbl>* self = (Pointer<CRes::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRes::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CRes::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CRes::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CResUI__reference(lua_State* L)
{
	Pointer<CResUI>* self = (Pointer<CResUI>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResUI>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResUI");
	return 1;
}

static int tolua_set_Pointer_CResUI__reference(lua_State* L)
{
	Pointer<CResUI>* self = (Pointer<CResUI>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResUI>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResUI*)tolua_tousertype_dynamic(L, 2, 0, "CResUI");
	return 0;
}

static int tolua_function_Pointer_CResUI__setValue(lua_State* L)
{
	Pointer<CResUI>* self = (Pointer<CResUI>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResUI>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResUI*)tolua_tousertype_dynamic(L, 2, 0, "CResUI"));
	return 0;
}

static int tolua_get_Pointer_CResText__reference(lua_State* L)
{
	Pointer<CResText>* self = (Pointer<CResText>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResText>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResText");
	return 1;
}

static int tolua_set_Pointer_CResText__reference(lua_State* L)
{
	Pointer<CResText>* self = (Pointer<CResText>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResText>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResText*)tolua_tousertype_dynamic(L, 2, 0, "CResText");
	return 0;
}

static int tolua_function_Pointer_CResText__setValue(lua_State* L)
{
	Pointer<CResText>* self = (Pointer<CResText>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResText>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResText*)tolua_tousertype_dynamic(L, 2, 0, "CResText"));
	return 0;
}

static int tolua_get_Pointer_CResText___reference(lua_State* L)
{
	Pointer<CResText*>* self = (Pointer<CResText*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResText*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CResText>");
	return 1;
}

static int tolua_set_Pointer_CResText___reference(lua_State* L)
{
	Pointer<CResText*>* self = (Pointer<CResText*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResText*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResText**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CResText>");
	return 0;
}

static int tolua_function_Pointer_CResText___getValue(lua_State* L)
{
	Pointer<CResText*>* self = (Pointer<CResText*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResText*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CResText* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CResText");
	return 1;
}

static int tolua_function_Pointer_CResText___setValue(lua_State* L)
{
	Pointer<CResText*>* self = (Pointer<CResText*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResText*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CResText*)tolua_tousertype_dynamic(L, 2, 0, "CResText"));
	return 0;
}

static int tolua_get_Pointer_CResMosaic__reference(lua_State* L)
{
	Pointer<CResMosaic>* self = (Pointer<CResMosaic>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResMosaic>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResMosaic");
	return 1;
}

static int tolua_set_Pointer_CResMosaic__reference(lua_State* L)
{
	Pointer<CResMosaic>* self = (Pointer<CResMosaic>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResMosaic>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResMosaic*)tolua_tousertype_dynamic(L, 2, 0, "CResMosaic");
	return 0;
}

static int tolua_function_Pointer_CResMosaic__setValue(lua_State* L)
{
	Pointer<CResMosaic>* self = (Pointer<CResMosaic>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResMosaic>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResMosaic*)tolua_tousertype_dynamic(L, 2, 0, "CResMosaic"));
	return 0;
}

static int tolua_get_Pointer_CResMosaic___reference(lua_State* L)
{
	Pointer<CResMosaic*>* self = (Pointer<CResMosaic*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResMosaic*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CResMosaic>");
	return 1;
}

static int tolua_set_Pointer_CResMosaic___reference(lua_State* L)
{
	Pointer<CResMosaic*>* self = (Pointer<CResMosaic*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResMosaic*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResMosaic**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CResMosaic>");
	return 0;
}

static int tolua_function_Pointer_CResMosaic___getValue(lua_State* L)
{
	Pointer<CResMosaic*>* self = (Pointer<CResMosaic*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResMosaic*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CResMosaic* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CResMosaic");
	return 1;
}

static int tolua_function_Pointer_CResMosaic___setValue(lua_State* L)
{
	Pointer<CResMosaic*>* self = (Pointer<CResMosaic*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResMosaic*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CResMosaic*)tolua_tousertype_dynamic(L, 2, 0, "CResMosaic"));
	return 0;
}

static int tolua_get_Pointer_CResItem__reference(lua_State* L)
{
	Pointer<CResItem>* self = (Pointer<CResItem>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResItem>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResItem");
	return 1;
}

static int tolua_set_Pointer_CResItem__reference(lua_State* L)
{
	Pointer<CResItem>* self = (Pointer<CResItem>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResItem>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResItem*)tolua_tousertype_dynamic(L, 2, 0, "CResItem");
	return 0;
}

static int tolua_function_Pointer_CResItem__setValue(lua_State* L)
{
	Pointer<CResItem>* self = (Pointer<CResItem>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResItem>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResItem*)tolua_tousertype_dynamic(L, 2, 0, "CResItem"));
	return 0;
}

static int tolua_get_Pointer_CResItem___reference(lua_State* L)
{
	Pointer<CResItem*>* self = (Pointer<CResItem*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResItem*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CResItem>");
	return 1;
}

static int tolua_set_Pointer_CResItem___reference(lua_State* L)
{
	Pointer<CResItem*>* self = (Pointer<CResItem*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResItem*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResItem**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CResItem>");
	return 0;
}

static int tolua_function_Pointer_CResItem___getValue(lua_State* L)
{
	Pointer<CResItem*>* self = (Pointer<CResItem*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResItem*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CResItem* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CResItem");
	return 1;
}

static int tolua_function_Pointer_CResItem___setValue(lua_State* L)
{
	Pointer<CResItem*>* self = (Pointer<CResItem*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResItem*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CResItem*)tolua_tousertype_dynamic(L, 2, 0, "CResItem"));
	return 0;
}

static int tolua_get_Pointer_CResEffect__reference(lua_State* L)
{
	Pointer<CResEffect>* self = (Pointer<CResEffect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResEffect>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResEffect");
	return 1;
}

static int tolua_set_Pointer_CResEffect__reference(lua_State* L)
{
	Pointer<CResEffect>* self = (Pointer<CResEffect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResEffect>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResEffect*)tolua_tousertype_dynamic(L, 2, 0, "CResEffect");
	return 0;
}

static int tolua_function_Pointer_CResEffect__setValue(lua_State* L)
{
	Pointer<CResEffect>* self = (Pointer<CResEffect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResEffect>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResEffect*)tolua_tousertype_dynamic(L, 2, 0, "CResEffect"));
	return 0;
}

static int tolua_get_Pointer_CResEffect___reference(lua_State* L)
{
	Pointer<CResEffect*>* self = (Pointer<CResEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CResEffect>");
	return 1;
}

static int tolua_set_Pointer_CResEffect___reference(lua_State* L)
{
	Pointer<CResEffect*>* self = (Pointer<CResEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResEffect**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CResEffect>");
	return 0;
}

static int tolua_function_Pointer_CResEffect___getValue(lua_State* L)
{
	Pointer<CResEffect*>* self = (Pointer<CResEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CResEffect* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CResEffect");
	return 1;
}

static int tolua_function_Pointer_CResEffect___setValue(lua_State* L)
{
	Pointer<CResEffect*>* self = (Pointer<CResEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CResEffect*)tolua_tousertype_dynamic(L, 2, 0, "CResEffect"));
	return 0;
}

static int tolua_get_Pointer_CResCell__reference(lua_State* L)
{
	Pointer<CResCell>* self = (Pointer<CResCell>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResCell>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResCell");
	return 1;
}

static int tolua_set_Pointer_CResCell__reference(lua_State* L)
{
	Pointer<CResCell>* self = (Pointer<CResCell>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResCell>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResCell*)tolua_tousertype_dynamic(L, 2, 0, "CResCell");
	return 0;
}

static int tolua_function_Pointer_CResCell__setValue(lua_State* L)
{
	Pointer<CResCell>* self = (Pointer<CResCell>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResCell>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResCell*)tolua_tousertype_dynamic(L, 2, 0, "CResCell"));
	return 0;
}

static int tolua_get_Pointer_CResCell___reference(lua_State* L)
{
	Pointer<CResCell*>* self = (Pointer<CResCell*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResCell*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Pointer<CResCell>");
	return 1;
}

static int tolua_set_Pointer_CResCell___reference(lua_State* L)
{
	Pointer<CResCell*>* self = (Pointer<CResCell*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResCell*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResCell**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<CResCell>");
	return 0;
}

static int tolua_function_Pointer_CResCell___getValue(lua_State* L)
{
	Pointer<CResCell*>* self = (Pointer<CResCell*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResCell*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getValue'", NULL);
	CResCell* returnVal = self->getValue();
	tolua_pushusertype(L, (void*)returnVal, "CResCell");
	return 1;
}

static int tolua_function_Pointer_CResCell___setValue(lua_State* L)
{
	Pointer<CResCell*>* self = (Pointer<CResCell*>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResCell*>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue((CResCell*)tolua_tousertype_dynamic(L, 2, 0, "CResCell"));
	return 0;
}

static int tolua_get_Pointer_CMessage__vtbl__reference(lua_State* L)
{
	Pointer<CMessage::vtbl>* self = (Pointer<CMessage::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessage::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CMessage::vtbl");
	return 1;
}

static int tolua_set_Pointer_CMessage__vtbl__reference(lua_State* L)
{
	Pointer<CMessage::vtbl>* self = (Pointer<CMessage::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessage::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CMessage::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CMessage::vtbl");
	return 0;
}

static int tolua_function_Pointer_CMessage__vtbl__setValue(lua_State* L)
{
	Pointer<CMessage::vtbl>* self = (Pointer<CMessage::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessage::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CMessage::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CMessage::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CMessageVisualEffect__reference(lua_State* L)
{
	Pointer<CMessageVisualEffect>* self = (Pointer<CMessageVisualEffect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageVisualEffect>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CMessageVisualEffect");
	return 1;
}

static int tolua_set_Pointer_CMessageVisualEffect__reference(lua_State* L)
{
	Pointer<CMessageVisualEffect>* self = (Pointer<CMessageVisualEffect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageVisualEffect>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CMessageVisualEffect*)tolua_tousertype_dynamic(L, 2, 0, "CMessageVisualEffect");
	return 0;
}

static int tolua_function_Pointer_CMessageVisualEffect__setValue(lua_State* L)
{
	Pointer<CMessageVisualEffect>* self = (Pointer<CMessageVisualEffect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageVisualEffect>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CMessageVisualEffect*)tolua_tousertype_dynamic(L, 2, 0, "CMessageVisualEffect"));
	return 0;
}

static int tolua_get_Pointer_CMessageUnknown__reference(lua_State* L)
{
	Pointer<CMessageUnknown>* self = (Pointer<CMessageUnknown>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageUnknown>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CMessageUnknown");
	return 1;
}

static int tolua_set_Pointer_CMessageUnknown__reference(lua_State* L)
{
	Pointer<CMessageUnknown>* self = (Pointer<CMessageUnknown>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageUnknown>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CMessageUnknown*)tolua_tousertype_dynamic(L, 2, 0, "CMessageUnknown");
	return 0;
}

static int tolua_function_Pointer_CMessageUnknown__setValue(lua_State* L)
{
	Pointer<CMessageUnknown>* self = (Pointer<CMessageUnknown>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageUnknown>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CMessageUnknown*)tolua_tousertype_dynamic(L, 2, 0, "CMessageUnknown"));
	return 0;
}

static int tolua_get_Pointer_CMessageAutoScroll__reference(lua_State* L)
{
	Pointer<CMessageAutoScroll>* self = (Pointer<CMessageAutoScroll>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageAutoScroll>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CMessageAutoScroll");
	return 1;
}

static int tolua_set_Pointer_CMessageAutoScroll__reference(lua_State* L)
{
	Pointer<CMessageAutoScroll>* self = (Pointer<CMessageAutoScroll>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageAutoScroll>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CMessageAutoScroll*)tolua_tousertype_dynamic(L, 2, 0, "CMessageAutoScroll");
	return 0;
}

static int tolua_function_Pointer_CMessageAutoScroll__setValue(lua_State* L)
{
	Pointer<CMessageAutoScroll>* self = (Pointer<CMessageAutoScroll>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageAutoScroll>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CMessageAutoScroll*)tolua_tousertype_dynamic(L, 2, 0, "CMessageAutoScroll"));
	return 0;
}

static int tolua_get_Pointer_CMessageAddEffect__reference(lua_State* L)
{
	Pointer<CMessageAddEffect>* self = (Pointer<CMessageAddEffect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageAddEffect>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CMessageAddEffect");
	return 1;
}

static int tolua_set_Pointer_CMessageAddEffect__reference(lua_State* L)
{
	Pointer<CMessageAddEffect>* self = (Pointer<CMessageAddEffect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageAddEffect>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CMessageAddEffect*)tolua_tousertype_dynamic(L, 2, 0, "CMessageAddEffect");
	return 0;
}

static int tolua_function_Pointer_CMessageAddEffect__setValue(lua_State* L)
{
	Pointer<CMessageAddEffect>* self = (Pointer<CMessageAddEffect>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CMessageAddEffect>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CMessageAddEffect*)tolua_tousertype_dynamic(L, 2, 0, "CMessageAddEffect"));
	return 0;
}

static int tolua_get_Pointer_CGameObject__vtbl__reference(lua_State* L)
{
	Pointer<CGameObject::vtbl>* self = (Pointer<CGameObject::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObject::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameObject::vtbl");
	return 1;
}

static int tolua_set_Pointer_CGameObject__vtbl__reference(lua_State* L)
{
	Pointer<CGameObject::vtbl>* self = (Pointer<CGameObject::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObject::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameObject::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CGameObject::vtbl");
	return 0;
}

static int tolua_function_Pointer_CGameObject__vtbl__setValue(lua_State* L)
{
	Pointer<CGameObject::vtbl>* self = (Pointer<CGameObject::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameObject::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameObject::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CGameObject::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CGameEffect__vtbl__reference(lua_State* L)
{
	Pointer<CGameEffect::vtbl>* self = (Pointer<CGameEffect::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffect::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameEffect::vtbl");
	return 1;
}

static int tolua_set_Pointer_CGameEffect__vtbl__reference(lua_State* L)
{
	Pointer<CGameEffect::vtbl>* self = (Pointer<CGameEffect::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffect::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameEffect::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CGameEffect::vtbl");
	return 0;
}

static int tolua_function_Pointer_CGameEffect__vtbl__setValue(lua_State* L)
{
	Pointer<CGameEffect::vtbl>* self = (Pointer<CGameEffect::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffect::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameEffect::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CGameEffect::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CGameAnimationType__vtbl__reference(lua_State* L)
{
	Pointer<CGameAnimationType::vtbl>* self = (Pointer<CGameAnimationType::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimationType::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameAnimationType::vtbl");
	return 1;
}

static int tolua_set_Pointer_CGameAnimationType__vtbl__reference(lua_State* L)
{
	Pointer<CGameAnimationType::vtbl>* self = (Pointer<CGameAnimationType::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimationType::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameAnimationType::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CGameAnimationType::vtbl");
	return 0;
}

static int tolua_function_Pointer_CGameAnimationType__vtbl__setValue(lua_State* L)
{
	Pointer<CGameAnimationType::vtbl>* self = (Pointer<CGameAnimationType::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimationType::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameAnimationType::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CGameAnimationType::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CGameAnimationTypeCharacter__reference(lua_State* L)
{
	Pointer<CGameAnimationTypeCharacter>* self = (Pointer<CGameAnimationTypeCharacter>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimationTypeCharacter>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameAnimationTypeCharacter");
	return 1;
}

static int tolua_set_Pointer_CGameAnimationTypeCharacter__reference(lua_State* L)
{
	Pointer<CGameAnimationTypeCharacter>* self = (Pointer<CGameAnimationTypeCharacter>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimationTypeCharacter>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameAnimationTypeCharacter*)tolua_tousertype_dynamic(L, 2, 0, "CGameAnimationTypeCharacter");
	return 0;
}

static int tolua_function_Pointer_CGameAnimationTypeCharacter__setValue(lua_State* L)
{
	Pointer<CGameAnimationTypeCharacter>* self = (Pointer<CGameAnimationTypeCharacter>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAnimationTypeCharacter>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameAnimationTypeCharacter*)tolua_tousertype_dynamic(L, 2, 0, "CGameAnimationTypeCharacter"));
	return 0;
}

static int tolua_get_Pointer_CChitin__vtbl__reference(lua_State* L)
{
	Pointer<CChitin::vtbl>* self = (Pointer<CChitin::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CChitin::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CChitin::vtbl");
	return 1;
}

static int tolua_set_Pointer_CChitin__vtbl__reference(lua_State* L)
{
	Pointer<CChitin::vtbl>* self = (Pointer<CChitin::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CChitin::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CChitin::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CChitin::vtbl");
	return 0;
}

static int tolua_function_Pointer_CChitin__vtbl__setValue(lua_State* L)
{
	Pointer<CChitin::vtbl>* self = (Pointer<CChitin::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CChitin::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CChitin::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CChitin::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CBaldurEngine__vtbl__reference(lua_State* L)
{
	Pointer<CBaldurEngine::vtbl>* self = (Pointer<CBaldurEngine::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurEngine::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CBaldurEngine::vtbl");
	return 1;
}

static int tolua_set_Pointer_CBaldurEngine__vtbl__reference(lua_State* L)
{
	Pointer<CBaldurEngine::vtbl>* self = (Pointer<CBaldurEngine::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurEngine::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CBaldurEngine::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CBaldurEngine::vtbl");
	return 0;
}

static int tolua_function_Pointer_CBaldurEngine__vtbl__setValue(lua_State* L)
{
	Pointer<CBaldurEngine::vtbl>* self = (Pointer<CBaldurEngine::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CBaldurEngine::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CBaldurEngine::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CBaldurEngine::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CAIGroup__reference(lua_State* L)
{
	Pointer<CAIGroup>* self = (Pointer<CAIGroup>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAIGroup>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CAIGroup");
	return 1;
}

static int tolua_set_Pointer_CAIGroup__reference(lua_State* L)
{
	Pointer<CAIGroup>* self = (Pointer<CAIGroup>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAIGroup>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CAIGroup*)tolua_tousertype_dynamic(L, 2, 0, "CAIGroup");
	return 0;
}

static int tolua_function_Pointer_CAIGroup__setValue(lua_State* L)
{
	Pointer<CAIGroup>* self = (Pointer<CAIGroup>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAIGroup>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CAIGroup*)tolua_tousertype_dynamic(L, 2, 0, "CAIGroup"));
	return 0;
}

static int tolua_get_Pointer_CVideo__reference(lua_State* L)
{
	Pointer<CVideo>* self = (Pointer<CVideo>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVideo>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVideo");
	return 1;
}

static int tolua_set_Pointer_CVideo__reference(lua_State* L)
{
	Pointer<CVideo>* self = (Pointer<CVideo>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVideo>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVideo*)tolua_tousertype_dynamic(L, 2, 0, "CVideo");
	return 0;
}

static int tolua_function_Pointer_CVideo__setValue(lua_State* L)
{
	Pointer<CVideo>* self = (Pointer<CVideo>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVideo>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVideo*)tolua_tousertype_dynamic(L, 2, 0, "CVideo"));
	return 0;
}

static int tolua_get_Pointer_CVidPalette__reference(lua_State* L)
{
	Pointer<CVidPalette>* self = (Pointer<CVidPalette>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidPalette>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVidPalette");
	return 1;
}

static int tolua_set_Pointer_CVidPalette__reference(lua_State* L)
{
	Pointer<CVidPalette>* self = (Pointer<CVidPalette>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidPalette>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidPalette*)tolua_tousertype_dynamic(L, 2, 0, "CVidPalette");
	return 0;
}

static int tolua_function_Pointer_CVidPalette__setValue(lua_State* L)
{
	Pointer<CVidPalette>* self = (Pointer<CVidPalette>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidPalette>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVidPalette*)tolua_tousertype_dynamic(L, 2, 0, "CVidPalette"));
	return 0;
}

static int tolua_get_Pointer_CVidImage__reference(lua_State* L)
{
	Pointer<CVidImage>* self = (Pointer<CVidImage>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidImage>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVidImage");
	return 1;
}

static int tolua_set_Pointer_CVidImage__reference(lua_State* L)
{
	Pointer<CVidImage>* self = (Pointer<CVidImage>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidImage>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidImage*)tolua_tousertype_dynamic(L, 2, 0, "CVidImage");
	return 0;
}

static int tolua_function_Pointer_CVidImage__setValue(lua_State* L)
{
	Pointer<CVidImage>* self = (Pointer<CVidImage>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidImage>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVidImage*)tolua_tousertype_dynamic(L, 2, 0, "CVidImage"));
	return 0;
}

static int tolua_get_Pointer_CResHelper_CResMosaic_1004___reference(lua_State* L)
{
	Pointer<CResHelper<CResMosaic,1004>>* self = (Pointer<CResHelper<CResMosaic,1004>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResMosaic,1004>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResHelper<CResMosaic,1004>");
	return 1;
}

static int tolua_set_Pointer_CResHelper_CResMosaic_1004___reference(lua_State* L)
{
	Pointer<CResHelper<CResMosaic,1004>>* self = (Pointer<CResHelper<CResMosaic,1004>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResMosaic,1004>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResHelper<CResMosaic,1004>*)tolua_tousertype_dynamic(L, 2, 0, "CResHelper<CResMosaic,1004>");
	return 0;
}

static int tolua_function_Pointer_CResHelper_CResMosaic_1004___setValue(lua_State* L)
{
	Pointer<CResHelper<CResMosaic,1004>>* self = (Pointer<CResHelper<CResMosaic,1004>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResMosaic,1004>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResHelper<CResMosaic,1004>*)tolua_tousertype_dynamic(L, 2, 0, "CResHelper<CResMosaic,1004>"));
	return 0;
}

static int tolua_get_Pointer_CResHelper_CResText_1012___reference(lua_State* L)
{
	Pointer<CResHelper<CResText,1012>>* self = (Pointer<CResHelper<CResText,1012>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResText,1012>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResHelper<CResText,1012>");
	return 1;
}

static int tolua_set_Pointer_CResHelper_CResText_1012___reference(lua_State* L)
{
	Pointer<CResHelper<CResText,1012>>* self = (Pointer<CResHelper<CResText,1012>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResText,1012>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResHelper<CResText,1012>*)tolua_tousertype_dynamic(L, 2, 0, "CResHelper<CResText,1012>");
	return 0;
}

static int tolua_function_Pointer_CResHelper_CResText_1012___setValue(lua_State* L)
{
	Pointer<CResHelper<CResText,1012>>* self = (Pointer<CResHelper<CResText,1012>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResText,1012>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResHelper<CResText,1012>*)tolua_tousertype_dynamic(L, 2, 0, "CResHelper<CResText,1012>"));
	return 0;
}

static int tolua_get_Pointer_CResHelper_CResCell_1000___reference(lua_State* L)
{
	Pointer<CResHelper<CResCell,1000>>* self = (Pointer<CResHelper<CResCell,1000>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResCell,1000>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResHelper<CResCell,1000>");
	return 1;
}

static int tolua_set_Pointer_CResHelper_CResCell_1000___reference(lua_State* L)
{
	Pointer<CResHelper<CResCell,1000>>* self = (Pointer<CResHelper<CResCell,1000>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResCell,1000>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResHelper<CResCell,1000>*)tolua_tousertype_dynamic(L, 2, 0, "CResHelper<CResCell,1000>");
	return 0;
}

static int tolua_function_Pointer_CResHelper_CResCell_1000___setValue(lua_State* L)
{
	Pointer<CResHelper<CResCell,1000>>* self = (Pointer<CResHelper<CResCell,1000>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResCell,1000>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResHelper<CResCell,1000>*)tolua_tousertype_dynamic(L, 2, 0, "CResHelper<CResCell,1000>"));
	return 0;
}

static int tolua_get_Pointer_CResHelper_CResEffect_1016___reference(lua_State* L)
{
	Pointer<CResHelper<CResEffect,1016>>* self = (Pointer<CResHelper<CResEffect,1016>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResEffect,1016>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResHelper<CResEffect,1016>");
	return 1;
}

static int tolua_set_Pointer_CResHelper_CResEffect_1016___reference(lua_State* L)
{
	Pointer<CResHelper<CResEffect,1016>>* self = (Pointer<CResHelper<CResEffect,1016>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResEffect,1016>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResHelper<CResEffect,1016>*)tolua_tousertype_dynamic(L, 2, 0, "CResHelper<CResEffect,1016>");
	return 0;
}

static int tolua_function_Pointer_CResHelper_CResEffect_1016___setValue(lua_State* L)
{
	Pointer<CResHelper<CResEffect,1016>>* self = (Pointer<CResHelper<CResEffect,1016>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResEffect,1016>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResHelper<CResEffect,1016>*)tolua_tousertype_dynamic(L, 2, 0, "CResHelper<CResEffect,1016>"));
	return 0;
}

static int tolua_get_Pointer_CResHelper_CResItem_1005___reference(lua_State* L)
{
	Pointer<CResHelper<CResItem,1005>>* self = (Pointer<CResHelper<CResItem,1005>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResItem,1005>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResHelper<CResItem,1005>");
	return 1;
}

static int tolua_set_Pointer_CResHelper_CResItem_1005___reference(lua_State* L)
{
	Pointer<CResHelper<CResItem,1005>>* self = (Pointer<CResHelper<CResItem,1005>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResItem,1005>>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResHelper<CResItem,1005>*)tolua_tousertype_dynamic(L, 2, 0, "CResHelper<CResItem,1005>");
	return 0;
}

static int tolua_function_Pointer_CResHelper_CResItem_1005___setValue(lua_State* L)
{
	Pointer<CResHelper<CResItem,1005>>* self = (Pointer<CResHelper<CResItem,1005>>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResHelper<CResItem,1005>>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResHelper<CResItem,1005>*)tolua_tousertype_dynamic(L, 2, 0, "CResHelper<CResItem,1005>"));
	return 0;
}

static int tolua_get_Pointer_CVidCell__reference(lua_State* L)
{
	Pointer<CVidCell>* self = (Pointer<CVidCell>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidCell>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVidCell");
	return 1;
}

static int tolua_set_Pointer_CVidCell__reference(lua_State* L)
{
	Pointer<CVidCell>* self = (Pointer<CVidCell>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidCell>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidCell*)tolua_tousertype_dynamic(L, 2, 0, "CVidCell");
	return 0;
}

static int tolua_function_Pointer_CVidCell__setValue(lua_State* L)
{
	Pointer<CVidCell>* self = (Pointer<CVidCell>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidCell>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVidCell*)tolua_tousertype_dynamic(L, 2, 0, "CVidCell"));
	return 0;
}

static int tolua_get_Pointer_CGameEffectFile__reference(lua_State* L)
{
	Pointer<CGameEffectFile>* self = (Pointer<CGameEffectFile>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffectFile>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameEffectFile");
	return 1;
}

static int tolua_set_Pointer_CGameEffectFile__reference(lua_State* L)
{
	Pointer<CGameEffectFile>* self = (Pointer<CGameEffectFile>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffectFile>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameEffectFile*)tolua_tousertype_dynamic(L, 2, 0, "CGameEffectFile");
	return 0;
}

static int tolua_function_Pointer_CGameEffectFile__setValue(lua_State* L)
{
	Pointer<CGameEffectFile>* self = (Pointer<CGameEffectFile>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffectFile>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameEffectFile*)tolua_tousertype_dynamic(L, 2, 0, "CGameEffectFile"));
	return 0;
}

static int tolua_get_Pointer_CVidMosaic__reference(lua_State* L)
{
	Pointer<CVidMosaic>* self = (Pointer<CVidMosaic>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMosaic>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CVidMosaic");
	return 1;
}

static int tolua_set_Pointer_CVidMosaic__reference(lua_State* L)
{
	Pointer<CVidMosaic>* self = (Pointer<CVidMosaic>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMosaic>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CVidMosaic*)tolua_tousertype_dynamic(L, 2, 0, "CVidMosaic");
	return 0;
}

static int tolua_function_Pointer_CVidMosaic__setValue(lua_State* L)
{
	Pointer<CVidMosaic>* self = (Pointer<CVidMosaic>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CVidMosaic>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CVidMosaic*)tolua_tousertype_dynamic(L, 2, 0, "CVidMosaic"));
	return 0;
}

static int tolua_get_Pointer_CUIControlButtonMap__reference(lua_State* L)
{
	Pointer<CUIControlButtonMap>* self = (Pointer<CUIControlButtonMap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButtonMap>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUIControlButtonMap");
	return 1;
}

static int tolua_set_Pointer_CUIControlButtonMap__reference(lua_State* L)
{
	Pointer<CUIControlButtonMap>* self = (Pointer<CUIControlButtonMap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButtonMap>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlButtonMap");
	return 0;
}

static int tolua_function_Pointer_CUIControlButtonMap__setValue(lua_State* L)
{
	Pointer<CUIControlButtonMap>* self = (Pointer<CUIControlButtonMap>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlButtonMap>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUIControlButtonMap*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlButtonMap"));
	return 0;
}

static int tolua_get_Pointer_CCacheStatus__reference(lua_State* L)
{
	Pointer<CCacheStatus>* self = (Pointer<CCacheStatus>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CCacheStatus>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CCacheStatus");
	return 1;
}

static int tolua_set_Pointer_CCacheStatus__reference(lua_State* L)
{
	Pointer<CCacheStatus>* self = (Pointer<CCacheStatus>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CCacheStatus>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CCacheStatus*)tolua_tousertype_dynamic(L, 2, 0, "CCacheStatus");
	return 0;
}

static int tolua_function_Pointer_CCacheStatus__setValue(lua_State* L)
{
	Pointer<CCacheStatus>* self = (Pointer<CCacheStatus>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CCacheStatus>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CCacheStatus*)tolua_tousertype_dynamic(L, 2, 0, "CCacheStatus"));
	return 0;
}

static int tolua_get_Pointer_CUIControlTextField__reference(lua_State* L)
{
	Pointer<CUIControlTextField>* self = (Pointer<CUIControlTextField>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlTextField>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CUIControlTextField");
	return 1;
}

static int tolua_set_Pointer_CUIControlTextField__reference(lua_State* L)
{
	Pointer<CUIControlTextField>* self = (Pointer<CUIControlTextField>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlTextField>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CUIControlTextField*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlTextField");
	return 0;
}

static int tolua_function_Pointer_CUIControlTextField__setValue(lua_State* L)
{
	Pointer<CUIControlTextField>* self = (Pointer<CUIControlTextField>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CUIControlTextField>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CUIControlTextField*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlTextField"));
	return 0;
}

static int tolua_get_Pointer_C2DArray__reference(lua_State* L)
{
	Pointer<C2DArray>* self = (Pointer<C2DArray>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<C2DArray>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "C2DArray");
	return 1;
}

static int tolua_set_Pointer_C2DArray__reference(lua_State* L)
{
	Pointer<C2DArray>* self = (Pointer<C2DArray>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<C2DArray>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (C2DArray*)tolua_tousertype_dynamic(L, 2, 0, "C2DArray");
	return 0;
}

static int tolua_function_Pointer_C2DArray__setValue(lua_State* L)
{
	Pointer<C2DArray>* self = (Pointer<C2DArray>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<C2DArray>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(C2DArray*)tolua_tousertype_dynamic(L, 2, 0, "C2DArray"));
	return 0;
}

static int tolua_get_Pointer_CRuleTables__reference(lua_State* L)
{
	Pointer<CRuleTables>* self = (Pointer<CRuleTables>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRuleTables>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CRuleTables");
	return 1;
}

static int tolua_set_Pointer_CRuleTables__reference(lua_State* L)
{
	Pointer<CRuleTables>* self = (Pointer<CRuleTables>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRuleTables>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CRuleTables*)tolua_tousertype_dynamic(L, 2, 0, "CRuleTables");
	return 0;
}

static int tolua_function_Pointer_CRuleTables__setValue(lua_State* L)
{
	Pointer<CRuleTables>* self = (Pointer<CRuleTables>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CRuleTables>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CRuleTables*)tolua_tousertype_dynamic(L, 2, 0, "CRuleTables"));
	return 0;
}

static int tolua_get_Pointer_WED_LayerHeader_st__reference(lua_State* L)
{
	Pointer<WED_LayerHeader_st>* self = (Pointer<WED_LayerHeader_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<WED_LayerHeader_st>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "WED_LayerHeader_st");
	return 1;
}

static int tolua_set_Pointer_WED_LayerHeader_st__reference(lua_State* L)
{
	Pointer<WED_LayerHeader_st>* self = (Pointer<WED_LayerHeader_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<WED_LayerHeader_st>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 2, 0, "WED_LayerHeader_st");
	return 0;
}

static int tolua_function_Pointer_WED_LayerHeader_st__setValue(lua_State* L)
{
	Pointer<WED_LayerHeader_st>* self = (Pointer<WED_LayerHeader_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<WED_LayerHeader_st>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 2, 0, "WED_LayerHeader_st"));
	return 0;
}

static int tolua_get_Pointer_Item_effect_st__reference(lua_State* L)
{
	Pointer<Item_effect_st>* self = (Pointer<Item_effect_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Item_effect_st>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "Item_effect_st");
	return 1;
}

static int tolua_set_Pointer_Item_effect_st__reference(lua_State* L)
{
	Pointer<Item_effect_st>* self = (Pointer<Item_effect_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Item_effect_st>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (Item_effect_st*)tolua_tousertype_dynamic(L, 2, 0, "Item_effect_st");
	return 0;
}

static int tolua_function_Pointer_Item_effect_st__setValue(lua_State* L)
{
	Pointer<Item_effect_st>* self = (Pointer<Item_effect_st>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<Item_effect_st>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(Item_effect_st*)tolua_tousertype_dynamic(L, 2, 0, "Item_effect_st"));
	return 0;
}

static int tolua_get_Pointer_CResourceManagerHashTable__reference(lua_State* L)
{
	Pointer<CResourceManagerHashTable>* self = (Pointer<CResourceManagerHashTable>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResourceManagerHashTable>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResourceManagerHashTable");
	return 1;
}

static int tolua_set_Pointer_CResourceManagerHashTable__reference(lua_State* L)
{
	Pointer<CResourceManagerHashTable>* self = (Pointer<CResourceManagerHashTable>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResourceManagerHashTable>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 2, 0, "CResourceManagerHashTable");
	return 0;
}

static int tolua_function_Pointer_CResourceManagerHashTable__setValue(lua_State* L)
{
	Pointer<CResourceManagerHashTable>* self = (Pointer<CResourceManagerHashTable>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResourceManagerHashTable>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 2, 0, "CResourceManagerHashTable"));
	return 0;
}

static int tolua_get_Pointer_CResourceManager__reference(lua_State* L)
{
	Pointer<CResourceManager>* self = (Pointer<CResourceManager>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResourceManager>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CResourceManager");
	return 1;
}

static int tolua_set_Pointer_CResourceManager__reference(lua_State* L)
{
	Pointer<CResourceManager>* self = (Pointer<CResourceManager>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResourceManager>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CResourceManager*)tolua_tousertype_dynamic(L, 2, 0, "CResourceManager");
	return 0;
}

static int tolua_function_Pointer_CResourceManager__setValue(lua_State* L)
{
	Pointer<CResourceManager>* self = (Pointer<CResourceManager>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CResourceManager>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CResourceManager*)tolua_tousertype_dynamic(L, 2, 0, "CResourceManager"));
	return 0;
}

static int tolua_get_Pointer_CInfButtonArray__reference(lua_State* L)
{
	Pointer<CInfButtonArray>* self = (Pointer<CInfButtonArray>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfButtonArray>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CInfButtonArray");
	return 1;
}

static int tolua_set_Pointer_CInfButtonArray__reference(lua_State* L)
{
	Pointer<CInfButtonArray>* self = (Pointer<CInfButtonArray>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfButtonArray>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CInfButtonArray*)tolua_tousertype_dynamic(L, 2, 0, "CInfButtonArray");
	return 0;
}

static int tolua_function_Pointer_CInfButtonArray__setValue(lua_State* L)
{
	Pointer<CInfButtonArray>* self = (Pointer<CInfButtonArray>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CInfButtonArray>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CInfButtonArray*)tolua_tousertype_dynamic(L, 2, 0, "CInfButtonArray"));
	return 0;
}

static int tolua_get_Pointer_CGameEffectBase__reference(lua_State* L)
{
	Pointer<CGameEffectBase>* self = (Pointer<CGameEffectBase>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffectBase>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameEffectBase");
	return 1;
}

static int tolua_set_Pointer_CGameEffectBase__reference(lua_State* L)
{
	Pointer<CGameEffectBase>* self = (Pointer<CGameEffectBase>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffectBase>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameEffectBase*)tolua_tousertype_dynamic(L, 2, 0, "CGameEffectBase");
	return 0;
}

static int tolua_function_Pointer_CGameEffectBase__setValue(lua_State* L)
{
	Pointer<CGameEffectBase>* self = (Pointer<CGameEffectBase>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameEffectBase>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameEffectBase*)tolua_tousertype_dynamic(L, 2, 0, "CGameEffectBase"));
	return 0;
}

static int tolua_get_Pointer_CAIAction__reference(lua_State* L)
{
	Pointer<CAIAction>* self = (Pointer<CAIAction>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAIAction>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CAIAction");
	return 1;
}

static int tolua_set_Pointer_CAIAction__reference(lua_State* L)
{
	Pointer<CAIAction>* self = (Pointer<CAIAction>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAIAction>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CAIAction*)tolua_tousertype_dynamic(L, 2, 0, "CAIAction");
	return 0;
}

static int tolua_function_Pointer_CAIAction__setValue(lua_State* L)
{
	Pointer<CAIAction>* self = (Pointer<CAIAction>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAIAction>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CAIAction*)tolua_tousertype_dynamic(L, 2, 0, "CAIAction"));
	return 0;
}

static int tolua_get_Pointer_CGameAIBase__vtbl__reference(lua_State* L)
{
	Pointer<CGameAIBase::vtbl>* self = (Pointer<CGameAIBase::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAIBase::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CGameAIBase::vtbl");
	return 1;
}

static int tolua_set_Pointer_CGameAIBase__vtbl__reference(lua_State* L)
{
	Pointer<CGameAIBase::vtbl>* self = (Pointer<CGameAIBase::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAIBase::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CGameAIBase::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CGameAIBase::vtbl");
	return 0;
}

static int tolua_function_Pointer_CGameAIBase__vtbl__setValue(lua_State* L)
{
	Pointer<CGameAIBase::vtbl>* self = (Pointer<CGameAIBase::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CGameAIBase::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CGameAIBase::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CGameAIBase::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CProjectile__vtbl__reference(lua_State* L)
{
	Pointer<CProjectile::vtbl>* self = (Pointer<CProjectile::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProjectile::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CProjectile::vtbl");
	return 1;
}

static int tolua_set_Pointer_CProjectile__vtbl__reference(lua_State* L)
{
	Pointer<CProjectile::vtbl>* self = (Pointer<CProjectile::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProjectile::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CProjectile::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CProjectile::vtbl");
	return 0;
}

static int tolua_function_Pointer_CProjectile__vtbl__setValue(lua_State* L)
{
	Pointer<CProjectile::vtbl>* self = (Pointer<CProjectile::vtbl>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProjectile::vtbl>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CProjectile::vtbl*)tolua_tousertype_dynamic(L, 2, 0, "CProjectile::vtbl"));
	return 0;
}

static int tolua_get_Pointer_CProjectileMagicMissile__reference(lua_State* L)
{
	Pointer<CProjectileMagicMissile>* self = (Pointer<CProjectileMagicMissile>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProjectileMagicMissile>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CProjectileMagicMissile");
	return 1;
}

static int tolua_set_Pointer_CProjectileMagicMissile__reference(lua_State* L)
{
	Pointer<CProjectileMagicMissile>* self = (Pointer<CProjectileMagicMissile>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProjectileMagicMissile>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CProjectileMagicMissile*)tolua_tousertype_dynamic(L, 2, 0, "CProjectileMagicMissile");
	return 0;
}

static int tolua_function_Pointer_CProjectileMagicMissile__setValue(lua_State* L)
{
	Pointer<CProjectileMagicMissile>* self = (Pointer<CProjectileMagicMissile>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CProjectileMagicMissile>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CProjectileMagicMissile*)tolua_tousertype_dynamic(L, 2, 0, "CProjectileMagicMissile"));
	return 0;
}

static int tolua_get_Pointer_CAITrigger__reference(lua_State* L)
{
	Pointer<CAITrigger>* self = (Pointer<CAITrigger>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAITrigger>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	tolua_pushusertype(L, (void*)self->reference, "CAITrigger");
	return 1;
}

static int tolua_set_Pointer_CAITrigger__reference(lua_State* L)
{
	Pointer<CAITrigger>* self = (Pointer<CAITrigger>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAITrigger>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'reference'", NULL);
	self->reference = (CAITrigger*)tolua_tousertype_dynamic(L, 2, 0, "CAITrigger");
	return 0;
}

static int tolua_function_Pointer_CAITrigger__setValue(lua_State* L)
{
	Pointer<CAITrigger>* self = (Pointer<CAITrigger>*)tolua_tousertype_dynamic(L, 1, 0, "Pointer<CAITrigger>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setValue'", NULL);
	self->setValue(*(CAITrigger*)tolua_tousertype_dynamic(L, 2, 0, "CAITrigger"));
	return 0;
}

static int tolua_get_EnhancedWidescreen_allowedOutOfBoundsLeft(lua_State* L)
{
	lua_pushinteger(L, (lua_Integer)EnhancedWidescreen::allowedOutOfBoundsLeft);
	return 1;
}

static int tolua_set_EnhancedWidescreen_allowedOutOfBoundsLeft(lua_State* L)
{
	EnhancedWidescreen::allowedOutOfBoundsLeft = tolua_setter_tointeger<int>(L, "allowedOutOfBoundsLeft");
	return 0;
}

static int tolua_get_EnhancedWidescreen_reference_allowedOutOfBoundsLeft(lua_State* L)
{
	tolua_pushusertype(L, (void*)&EnhancedWidescreen::allowedOutOfBoundsLeft, "Primitive<int>");
	return 1;
}

static int tolua_get_EnhancedWidescreen_allowedOutOfBoundsTop(lua_State* L)
{
	lua_pushinteger(L, (lua_Integer)EnhancedWidescreen::allowedOutOfBoundsTop);
	return 1;
}

static int tolua_set_EnhancedWidescreen_allowedOutOfBoundsTop(lua_State* L)
{
	EnhancedWidescreen::allowedOutOfBoundsTop = tolua_setter_tointeger<int>(L, "allowedOutOfBoundsTop");
	return 0;
}

static int tolua_get_EnhancedWidescreen_reference_allowedOutOfBoundsTop(lua_State* L)
{
	tolua_pushusertype(L, (void*)&EnhancedWidescreen::allowedOutOfBoundsTop, "Primitive<int>");
	return 1;
}

static int tolua_get_EnhancedWidescreen_allowedOutOfBoundsRight(lua_State* L)
{
	lua_pushinteger(L, (lua_Integer)EnhancedWidescreen::allowedOutOfBoundsRight);
	return 1;
}

static int tolua_set_EnhancedWidescreen_allowedOutOfBoundsRight(lua_State* L)
{
	EnhancedWidescreen::allowedOutOfBoundsRight = tolua_setter_tointeger<int>(L, "allowedOutOfBoundsRight");
	return 0;
}

static int tolua_get_EnhancedWidescreen_reference_allowedOutOfBoundsRight(lua_State* L)
{
	tolua_pushusertype(L, (void*)&EnhancedWidescreen::allowedOutOfBoundsRight, "Primitive<int>");
	return 1;
}

static int tolua_get_EnhancedWidescreen_allowedOutOfBoundsBottom(lua_State* L)
{
	lua_pushinteger(L, (lua_Integer)EnhancedWidescreen::allowedOutOfBoundsBottom);
	return 1;
}

static int tolua_set_EnhancedWidescreen_allowedOutOfBoundsBottom(lua_State* L)
{
	EnhancedWidescreen::allowedOutOfBoundsBottom = tolua_setter_tointeger<int>(L, "allowedOutOfBoundsBottom");
	return 0;
}

static int tolua_get_EnhancedWidescreen_reference_allowedOutOfBoundsBottom(lua_State* L)
{
	tolua_pushusertype(L, (void*)&EnhancedWidescreen::allowedOutOfBoundsBottom, "Primitive<int>");
	return 1;
}

static int tolua_function_EnhancedWidescreen_GetINIString(lua_State* L)
{
	EnhancedWidescreen::GetINIString(L, tolua_function_tostring(L, 1, "GetINIString"), tolua_function_tostring(L, 2, "GetINIString"), tolua_function_tostring(L, 3, "GetINIString"), tolua_function_tostring(L, 4, "GetINIString"));
	return 1;
}

static int tolua_function_EnhancedWidescreen_StringToVirtualKey(lua_State* L)
{
	byte returnVal = EnhancedWidescreen::StringToVirtualKey(tolua_function_tostring(L, 1, "StringToVirtualKey"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_ConstCharString_getChar(lua_State* L)
{
	ConstCharString* self = (ConstCharString*)tolua_tousertype_dynamic(L, 1, 0, "ConstCharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getChar'", NULL);
	char returnVal = self->getChar(tolua_function_tointeger<size_t>(L, 2, "getChar"));
	lua_pushlstring(L, (const char*)&returnVal, 1);
	return 1;
}

static int tolua_function_ConstCharString_set(lua_State* L)
{
	ConstCharString* self = (ConstCharString*)tolua_tousertype_dynamic(L, 1, 0, "ConstCharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tostring(L, 2, "set"));
	return 0;
}

static int tolua_function_ConstCharString_setL(lua_State* L)
{
	ConstCharString* self = (ConstCharString*)tolua_tousertype_dynamic(L, 1, 0, "ConstCharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setL'", NULL);
	self->setL(tolua_function_tostring(L, 2, "setL"), tolua_function_tointeger<size_t>(L, 3, "setL"));
	return 0;
}

static int tolua_function_ConstCharString_setReference(lua_State* L)
{
	ConstCharString* self = (ConstCharString*)tolua_tousertype_dynamic(L, 1, 0, "ConstCharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setReference'", NULL);
	self->setReference((ConstCharString*)tolua_tousertype_dynamic(L, 2, 0, "ConstCharString"));
	return 0;
}

static int tolua_function_ConstCharString_pointTo(lua_State* L)
{
	ConstCharString* self = (ConstCharString*)tolua_tousertype_dynamic(L, 1, 0, "ConstCharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'pointTo'", NULL);
	self->pointTo(tolua_function_tointeger<uintptr_t>(L, 2, "pointTo"));
	return 0;
}

static int tolua_function_ConstCharString_get(lua_State* L)
{
	ConstCharString* self = (ConstCharString*)tolua_tousertype_dynamic(L, 1, 0, "ConstCharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	const char* returnVal = self->get();
	tolua_pushstring(L, (const char*)returnVal);
	return 1;
}

static int tolua_function_ConstCharString_free(lua_State* L)
{
	ConstCharString* self = (ConstCharString*)tolua_tousertype_dynamic(L, 1, 0, "ConstCharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'free'", NULL);
	self->free();
	return 0;
}

static int tolua_get_g_pBaldurChitin(lua_State* L)
{
	tolua_pushusertype(L, (void*)*p_g_pBaldurChitin, "CBaldurChitin");
	return 1;
}

static int tolua_set_g_pBaldurChitin(lua_State* L)
{
	*p_g_pBaldurChitin = (CBaldurChitin*)tolua_tousertype_dynamic(L, 2, 0, "CBaldurChitin");
	return 0;
}

static int tolua_get_reference_g_pBaldurChitin(lua_State* L)
{
	tolua_pushusertype(L, (void*)p_g_pBaldurChitin, "Pointer<CBaldurChitin>");
	return 1;
}

static int tolua_get_AsyncThreadLastTickStart(lua_State* L)
{
	lua_pushinteger(L, (lua_Integer)*p_AsyncThreadLastTickStart);
	return 1;
}

static int tolua_set_AsyncThreadLastTickStart(lua_State* L)
{
	*p_AsyncThreadLastTickStart = tolua_setter_tointeger<DWORD>(L, "AsyncThreadLastTickStart");
	return 0;
}

static int tolua_get_reference_AsyncThreadLastTickStart(lua_State* L)
{
	tolua_pushusertype(L, (void*)p_AsyncThreadLastTickStart, "Primitive<DWORD>");
	return 1;
}

static int tolua_get_AsyncThreadTickDelta(lua_State* L)
{
	lua_pushinteger(L, (lua_Integer)*p_AsyncThreadTickDelta);
	return 1;
}

static int tolua_set_AsyncThreadTickDelta(lua_State* L)
{
	*p_AsyncThreadTickDelta = tolua_setter_tointeger<DWORD>(L, "AsyncThreadTickDelta");
	return 0;
}

static int tolua_get_reference_AsyncThreadTickDelta(lua_State* L)
{
	tolua_pushusertype(L, (void*)p_AsyncThreadTickDelta, "Primitive<DWORD>");
	return 1;
}

static int tolua_get_MaximumFrameRate(lua_State* L)
{
	lua_pushinteger(L, (lua_Integer)*p_MaximumFrameRate);
	return 1;
}

static int tolua_set_MaximumFrameRate(lua_State* L)
{
	*p_MaximumFrameRate = tolua_setter_tointeger<UINT>(L, "MaximumFrameRate");
	return 0;
}

static int tolua_get_reference_MaximumFrameRate(lua_State* L)
{
	tolua_pushusertype(L, (void*)p_MaximumFrameRate, "Primitive<UINT>");
	return 1;
}

static int tolua_get_ResolutionX(lua_State* L)
{
	lua_pushinteger(L, (lua_Integer)*p_ResolutionX);
	return 1;
}

static int tolua_set_ResolutionX(lua_State* L)
{
	*p_ResolutionX = tolua_setter_tointeger<short>(L, "ResolutionX");
	return 0;
}

static int tolua_get_reference_ResolutionX(lua_State* L)
{
	tolua_pushusertype(L, (void*)p_ResolutionX, "Primitive<short>");
	return 1;
}

static int tolua_get_ResolutionY(lua_State* L)
{
	lua_pushinteger(L, (lua_Integer)*p_ResolutionY);
	return 1;
}

static int tolua_set_ResolutionY(lua_State* L)
{
	*p_ResolutionY = tolua_setter_tointeger<short>(L, "ResolutionY");
	return 0;
}

static int tolua_get_reference_ResolutionY(lua_State* L)
{
	tolua_pushusertype(L, (void*)p_ResolutionY, "Primitive<short>");
	return 1;
}

static int tolua_function_AssertionFailed(lua_State* L)
{
	p_AssertionFailed(tolua_function_tointeger<uint>(L, 1, "AssertionFailed"), *(const char**)tolua_tousertype_dynamic(L, 2, 0, "ConstCharString"), *(const char**)tolua_tousertype_dynamic(L, 3, 0, "ConstCharString"));
	return 0;
}

static int tolua_get_reference_AssertionFailed(lua_State* L)
{
	tolua_pushusertype(L, *p_AssertionFailed, "UnmappedUserType");
	return 1;
}

static int tolua_function_GetDeviceBitDepth(lua_State* L)
{
	int returnVal = p_GetDeviceBitDepth();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_reference_GetDeviceBitDepth(lua_State* L)
{
	tolua_pushusertype(L, *p_GetDeviceBitDepth, "UnmappedUserType");
	return 1;
}

static int tolua_function_CoInitialize(lua_State* L)
{
	HRESULT returnVal = (*p_CoInitialize)((LPVOID)tolua_tousertype_dynamic(L, 1, 0, "LPVOID"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_reference_CoInitialize(lua_State* L)
{
	tolua_pushusertype(L, *CoInitialize, "UnmappedUserType");
	return 1;
}

static int tolua_function_CoUninitialize(lua_State* L)
{
	(*p_CoUninitialize)();
	return 0;
}

static int tolua_get_reference_CoUninitialize(lua_State* L)
{
	tolua_pushusertype(L, *CoUninitialize, "UnmappedUserType");
	return 1;
}

static int tolua_function_DispatchMessageA(lua_State* L)
{
	LRESULT returnVal = (*p_DispatchMessageA)((const MSG*)tolua_tousertype_dynamic(L, 1, 0, "MSG"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_reference_DispatchMessageA(lua_State* L)
{
	tolua_pushusertype(L, *DispatchMessageA, "UnmappedUserType");
	return 1;
}

static int tolua_function_GetCurrentThread(lua_State* L)
{
	HANDLE returnVal = (*p_GetCurrentThread)();
	tolua_pushusertype(L, (void*)returnVal, "HANDLE");
	return 1;
}

static int tolua_get_reference_GetCurrentThread(lua_State* L)
{
	tolua_pushusertype(L, *GetCurrentThread, "UnmappedUserType");
	return 1;
}

static int tolua_function_GetCursorPos(lua_State* L)
{
	BOOL returnVal = (*p_GetCursorPos)((LPPOINT)tolua_tousertype_dynamic(L, 1, 0, "LPPOINT"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_reference_GetCursorPos(lua_State* L)
{
	tolua_pushusertype(L, *GetCursorPos, "UnmappedUserType");
	return 1;
}

static int tolua_function_GetMessageA(lua_State* L)
{
	BOOL returnVal = (*p_GetMessageA)((LPMSG)tolua_tousertype_dynamic(L, 1, 0, "LPMSG"), (HWND)tolua_tousertype_dynamic(L, 2, 0, "HWND"), tolua_function_tointeger<UINT>(L, 3, "GetMessageA"), tolua_function_tointeger<UINT>(L, 4, "GetMessageA"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_reference_GetMessageA(lua_State* L)
{
	tolua_pushusertype(L, *GetMessageA, "UnmappedUserType");
	return 1;
}

static int tolua_function_GetPrivateProfileIntA(lua_State* L)
{
	UINT returnVal = (*p_GetPrivateProfileIntA)(tolua_function_tostring(L, 1, "GetPrivateProfileIntA"), tolua_function_tostring(L, 2, "GetPrivateProfileIntA"), tolua_function_tointeger<INT>(L, 3, "GetPrivateProfileIntA"), tolua_function_tostring(L, 4, "GetPrivateProfileIntA"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_reference_GetPrivateProfileIntA(lua_State* L)
{
	tolua_pushusertype(L, *GetPrivateProfileIntA, "UnmappedUserType");
	return 1;
}

static int tolua_function_GetTickCount(lua_State* L)
{
	DWORD returnVal = (*p_GetTickCount)();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_reference_GetTickCount(lua_State* L)
{
	tolua_pushusertype(L, *GetTickCount, "UnmappedUserType");
	return 1;
}

static int tolua_function_MessageBoxA(lua_State* L)
{
	int returnVal = (*p_MessageBoxA)((HWND)tolua_tousertype_dynamic(L, 1, 0, "HWND"), tolua_function_tostring(L, 2, "MessageBoxA"), tolua_function_tostring(L, 3, "MessageBoxA"), tolua_function_tointeger<UINT>(L, 4, "MessageBoxA"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_reference_MessageBoxA(lua_State* L)
{
	tolua_pushusertype(L, *MessageBoxA, "UnmappedUserType");
	return 1;
}

static int tolua_function_PeekMessageA(lua_State* L)
{
	BOOL returnVal = (*p_PeekMessageA)((LPMSG)tolua_tousertype_dynamic(L, 1, 0, "LPMSG"), (HWND)tolua_tousertype_dynamic(L, 2, 0, "HWND"), tolua_function_tointeger<UINT>(L, 3, "PeekMessageA"), tolua_function_tointeger<UINT>(L, 4, "PeekMessageA"), tolua_function_tointeger<UINT>(L, 5, "PeekMessageA"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_reference_PeekMessageA(lua_State* L)
{
	tolua_pushusertype(L, *PeekMessageA, "UnmappedUserType");
	return 1;
}

static int tolua_function_RegisterWindowMessageA(lua_State* L)
{
	UINT returnVal = (*p_RegisterWindowMessageA)(tolua_function_tostring(L, 1, "RegisterWindowMessageA"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_reference_RegisterWindowMessageA(lua_State* L)
{
	tolua_pushusertype(L, *RegisterWindowMessageA, "UnmappedUserType");
	return 1;
}

static int tolua_function_SetThreadPriority(lua_State* L)
{
	BOOL returnVal = (*p_SetThreadPriority)((HANDLE)tolua_tousertype_dynamic(L, 1, 0, "HANDLE"), tolua_function_tointeger<int>(L, 2, "SetThreadPriority"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_reference_SetThreadPriority(lua_State* L)
{
	tolua_pushusertype(L, *SetThreadPriority, "UnmappedUserType");
	return 1;
}

static int tolua_function_SuspendThread(lua_State* L)
{
	DWORD returnVal = (*p_SuspendThread)((HANDLE)tolua_tousertype_dynamic(L, 1, 0, "HANDLE"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_reference_SuspendThread(lua_State* L)
{
	tolua_pushusertype(L, *SuspendThread, "UnmappedUserType");
	return 1;
}

static int tolua_function_TranslateMessage(lua_State* L)
{
	BOOL returnVal = (*p_TranslateMessage)((const MSG*)tolua_tousertype_dynamic(L, 1, 0, "MSG"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_reference_TranslateMessage(lua_State* L)
{
	tolua_pushusertype(L, *TranslateMessage, "UnmappedUserType");
	return 1;
}

static int tolua_function_CharString_getChar(lua_State* L)
{
	CharString* self = (CharString*)tolua_tousertype_dynamic(L, 1, 0, "CharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getChar'", NULL);
	char returnVal = self->getChar(tolua_function_tointeger<size_t>(L, 2, "getChar"));
	lua_pushlstring(L, (const char*)&returnVal, 1);
	return 1;
}

static int tolua_function_CharString_setChar(lua_State* L)
{
	CharString* self = (CharString*)tolua_tousertype_dynamic(L, 1, 0, "CharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setChar'", NULL);
	self->setChar(tolua_function_tointeger<size_t>(L, 2, "setChar"), tolua_function_tochar(L, 3, "setChar"));
	return 0;
}

static int tolua_function_CharString_set(lua_State* L)
{
	CharString* self = (CharString*)tolua_tousertype_dynamic(L, 1, 0, "CharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tostring(L, 2, "set"));
	return 0;
}

static int tolua_function_CharString_setL(lua_State* L)
{
	CharString* self = (CharString*)tolua_tousertype_dynamic(L, 1, 0, "CharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setL'", NULL);
	self->setL(tolua_function_tostring(L, 2, "setL"), tolua_function_tointeger<size_t>(L, 3, "setL"));
	return 0;
}

static int tolua_function_CharString_write(lua_State* L)
{
	CharString* self = (CharString*)tolua_tousertype_dynamic(L, 1, 0, "CharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'write'", NULL);
	self->write(tolua_function_tostring(L, 2, "write"));
	return 0;
}

static int tolua_function_CharString_writeL(lua_State* L)
{
	CharString* self = (CharString*)tolua_tousertype_dynamic(L, 1, 0, "CharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'writeL'", NULL);
	self->writeL(tolua_function_tostring(L, 2, "writeL"), tolua_function_tointeger<size_t>(L, 3, "writeL"));
	return 0;
}

static int tolua_function_CharString_setReference(lua_State* L)
{
	CharString* self = (CharString*)tolua_tousertype_dynamic(L, 1, 0, "CharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'setReference'", NULL);
	self->setReference((CharString*)tolua_tousertype_dynamic(L, 2, 0, "CharString"));
	return 0;
}

static int tolua_function_CharString_pointTo(lua_State* L)
{
	CharString* self = (CharString*)tolua_tousertype_dynamic(L, 1, 0, "CharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'pointTo'", NULL);
	self->pointTo(tolua_function_tointeger<uintptr_t>(L, 2, "pointTo"));
	return 0;
}

static int tolua_function_CharString_get(lua_State* L)
{
	CharString* self = (CharString*)tolua_tousertype_dynamic(L, 1, 0, "CharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	char* returnVal = self->get();
	tolua_pushstring(L, (const char*)returnVal);
	return 1;
}

static int tolua_function_CharString_getL(lua_State* L)
{
	CharString* self = (CharString*)tolua_tousertype_dynamic(L, 1, 0, "CharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getL'", NULL);
	self->getL(L, tolua_function_tointeger<size_t>(L, 2, "getL"));
	return 1;
}

static int tolua_function_CharString_free(lua_State* L)
{
	CharString* self = (CharString*)tolua_tousertype_dynamic(L, 1, 0, "CharString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'free'", NULL);
	self->free();
	return 0;
}

static int tolua_get_CRuntimeClass_m_lpszClassName(lua_State* L)
{
	CRuntimeClass* self = (CRuntimeClass*)tolua_tousertype_dynamic(L, 1, 0, "CRuntimeClass");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_lpszClassName'", NULL);
	tolua_pushusertype(L, (void*)&self->m_lpszClassName, "CharString");
	return 1;
}

static int tolua_get_CRuntimeClass_m_nObjectSize(lua_State* L)
{
	CRuntimeClass* self = (CRuntimeClass*)tolua_tousertype_dynamic(L, 1, 0, "CRuntimeClass");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nObjectSize'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nObjectSize);
	return 1;
}

static int tolua_set_CRuntimeClass_m_nObjectSize(lua_State* L)
{
	CRuntimeClass* self = (CRuntimeClass*)tolua_tousertype_dynamic(L, 1, 0, "CRuntimeClass");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nObjectSize'", NULL);
	self->m_nObjectSize = tolua_setter_tointeger<int>(L, "m_nObjectSize");
	return 0;
}

static int tolua_get_CRuntimeClass_reference_m_nObjectSize(lua_State* L)
{
	CRuntimeClass* self = (CRuntimeClass*)tolua_tousertype_dynamic(L, 1, 0, "CRuntimeClass");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nObjectSize'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nObjectSize, "Primitive<int>");
	return 1;
}

static int tolua_get_CUIControlBase_m_pPanel(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPanel'", NULL);
	tolua_pushusertype(L, (void*)self->m_pPanel, "CUIPanel");
	return 1;
}

static int tolua_set_CUIControlBase_m_pPanel(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPanel'", NULL);
	self->m_pPanel = (CUIPanel*)tolua_tousertype_dynamic(L, 2, 0, "CUIPanel");
	return 0;
}

static int tolua_get_CUIControlBase_reference_m_pPanel(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPanel'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pPanel, "Pointer<CUIPanel>");
	return 1;
}

static int tolua_get_CUIControlBase_m_nId(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nId'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nId);
	return 1;
}

static int tolua_set_CUIControlBase_m_nId(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nId'", NULL);
	self->m_nId = tolua_setter_tointeger<int>(L, "m_nId");
	return 0;
}

static int tolua_get_CUIControlBase_reference_m_nId(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nId'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nId, "Primitive<int>");
	return 1;
}

static int tolua_get_CUIControlBase_m_nX(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nX'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nX);
	return 1;
}

static int tolua_set_CUIControlBase_m_nX(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nX'", NULL);
	self->m_nX = tolua_setter_tointeger<uint>(L, "m_nX");
	return 0;
}

static int tolua_get_CUIControlBase_reference_m_nX(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nX'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nX, "Primitive<uint>");
	return 1;
}

static int tolua_get_CUIControlBase_m_nY(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nY'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nY);
	return 1;
}

static int tolua_set_CUIControlBase_m_nY(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nY'", NULL);
	self->m_nY = tolua_setter_tointeger<uint>(L, "m_nY");
	return 0;
}

static int tolua_get_CUIControlBase_reference_m_nY(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nY'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nY, "Primitive<uint>");
	return 1;
}

static int tolua_get_CUIControlBase_m_nWidth(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nWidth'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nWidth);
	return 1;
}

static int tolua_set_CUIControlBase_m_nWidth(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nWidth'", NULL);
	self->m_nWidth = tolua_setter_tointeger<uint>(L, "m_nWidth");
	return 0;
}

static int tolua_get_CUIControlBase_reference_m_nWidth(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nWidth'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nWidth, "Primitive<uint>");
	return 1;
}

static int tolua_get_CUIControlBase_m_nHeight(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nHeight'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nHeight);
	return 1;
}

static int tolua_set_CUIControlBase_m_nHeight(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nHeight'", NULL);
	self->m_nHeight = tolua_setter_tointeger<uint>(L, "m_nHeight");
	return 0;
}

static int tolua_get_CUIControlBase_reference_m_nHeight(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nHeight'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nHeight, "Primitive<uint>");
	return 1;
}

static int tolua_get_CUIControlBase_m_bActive(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bActive'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bActive);
	return 1;
}

static int tolua_set_CUIControlBase_m_bActive(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bActive'", NULL);
	self->m_bActive = tolua_setter_tointeger<byte>(L, "m_bActive");
	return 0;
}

static int tolua_get_CUIControlBase_reference_m_bActive(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bActive'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bActive, "Primitive<byte>");
	return 1;
}

static int tolua_get_CUIControlBase_m_bInactiveRender(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInactiveRender'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bInactiveRender);
	return 1;
}

static int tolua_set_CUIControlBase_m_bInactiveRender(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInactiveRender'", NULL);
	self->m_bInactiveRender = tolua_setter_tointeger<int>(L, "m_bInactiveRender");
	return 0;
}

static int tolua_get_CUIControlBase_reference_m_bInactiveRender(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInactiveRender'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bInactiveRender, "Primitive<int>");
	return 1;
}

static int tolua_get_CUIControlBase_m_nToolTipStrref(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nToolTipStrref'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nToolTipStrref);
	return 1;
}

static int tolua_set_CUIControlBase_m_nToolTipStrref(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nToolTipStrref'", NULL);
	self->m_nToolTipStrref = tolua_setter_tointeger<uint>(L, "m_nToolTipStrref");
	return 0;
}

static int tolua_get_CUIControlBase_reference_m_nToolTipStrref(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nToolTipStrref'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nToolTipStrref, "Primitive<uint>");
	return 1;
}

static int tolua_function_CUIControlBase_CreateControl(lua_State* L)
{
	CUIControlBase* returnVal = CUIControlBase::CreateControl((CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel"), (UI_Control_st*)tolua_tousertype_dynamic(L, 2, 0, "UI_Control_st"));
	tolua_pushusertype(L, (void*)returnVal, "CUIControlBase");
	return 1;
}

static int tolua_get_reference_CUIControlBase_CreateControl(lua_State* L)
{
	tolua_pushusertype(L, CUIControlBase::CreateControl, "UnmappedUserType");
	return 1;
}

static int tolua_function_CUIControlBase_virtual_VirtualDestruct(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_VirtualDestruct'", NULL);
	self->virtual_VirtualDestruct();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_NeedMouseMove(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_NeedMouseMove'", NULL);
	self->virtual_NeedMouseMove();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_OnLButtonUp(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnLButtonUp'", NULL);
	self->virtual_OnLButtonUp();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_KillFocus(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_KillFocus'", NULL);
	self->virtual_KillFocus();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_OnMouseMove(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnMouseMove'", NULL);
	self->virtual_OnMouseMove();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_OnLButtonDown(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnLButtonDown'", NULL);
	self->virtual_OnLButtonDown();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_OnLButtonUpWithCoords(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnLButtonUpWithCoords'", NULL);
	self->virtual_OnLButtonUpWithCoords();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_OnLButtonDblClk(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnLButtonDblClk'", NULL);
	self->virtual_OnLButtonDblClk();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_OnRButtonDown(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnRButtonDown'", NULL);
	self->virtual_OnRButtonDown();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_OnRButtonUp(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnRButtonUp'", NULL);
	self->virtual_OnRButtonUp();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_OnKeyDown(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnKeyDown'", NULL);
	self->virtual_OnKeyDown();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_TimerAsynchronousUpdate(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_TimerAsynchronousUpdate'", NULL);
	self->virtual_TimerAsynchronousUpdate();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_GetTooltip(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetTooltip'", NULL);
	self->virtual_GetTooltip();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_Invalidate(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Invalidate'", NULL);
	self->virtual_Invalidate();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_Render(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Render'", NULL);
	self->virtual_Render();
	return 0;
}

static int tolua_function_CUIControlBase_virtual_NeedRender(lua_State* L)
{
	CUIControlBase* self = (CUIControlBase*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_NeedRender'", NULL);
	self->virtual_NeedRender();
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_VirtualDestruct(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_VirtualDestruct(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_VirtualDestruct(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_NeedMouseMove(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_NeedMouseMove(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_NeedMouseMove(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_OnLButtonUp(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_OnLButtonUp(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_OnLButtonUp(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_KillFocus(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_KillFocus(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_KillFocus(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_OnMouseMove(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_OnMouseMove(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_OnMouseMove(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_OnLButtonDown(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_OnLButtonDown(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_OnLButtonDown(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_OnLButtonUpWithCoords(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_OnLButtonUpWithCoords(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_OnLButtonUpWithCoords(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_OnLButtonDblClk(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_OnLButtonDblClk(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_OnLButtonDblClk(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_OnRButtonDown(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_OnRButtonDown(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_OnRButtonDown(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_OnRButtonUp(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_OnRButtonUp(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_OnRButtonUp(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_OnKeyDown(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_OnKeyDown(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_OnKeyDown(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_TimerAsynchronousUpdate(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_TimerAsynchronousUpdate(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_TimerAsynchronousUpdate(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_GetTooltip(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_GetTooltip(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_GetTooltip(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_Invalidate(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_Invalidate(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_Invalidate(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_Render(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_Render(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_Render(lua_State* L)
{
	return 1;
}

static int tolua_get_CUIControlBase__vtbl_NeedRender(lua_State* L)
{
	return 1;
}

static int tolua_set_CUIControlBase__vtbl_NeedRender(lua_State* L)
{
	return 0;
}

static int tolua_get_CUIControlBase__vtbl_reference_NeedRender(lua_State* L)
{
	return 1;
}

static int tolua_get_CString_m_pchData(lua_State* L)
{
	CString* self = (CString*)tolua_tousertype_dynamic(L, 1, 0, "CString");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pchData'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pchData, "ConstCharString");
	return 1;
}

static int tolua_function_CString_Construct(lua_State* L)
{
	CString* self = (CString*)tolua_tousertype_dynamic(L, 1, 0, "CString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Construct'", NULL);
	self->Construct();
	return 0;
}

static int tolua_function_CString_Destruct(lua_State* L)
{
	CString* self = (CString*)tolua_tousertype_dynamic(L, 1, 0, "CString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Destruct'", NULL);
	self->Destruct();
	return 0;
}

static int tolua_function_CString_LoadStringA(lua_State* L)
{
	CString* self = (CString*)tolua_tousertype_dynamic(L, 1, 0, "CString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'LoadStringA'", NULL);
	bool returnVal = self->LoadStringA(tolua_function_tointeger<UINT>(L, 2, "LoadStringA"));
	tolua_pushboolean(L, (bool)returnVal);
	return 1;
}

static int tolua_function_CString_SetFromChars(lua_State* L)
{
	CString* self = (CString*)tolua_tousertype_dynamic(L, 1, 0, "CString");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'SetFromChars'", NULL);
	self->operator=(tolua_function_tostring(L, 2, "SetFromChars"));
	return 0;
}

static int tolua_get_CSoundMixer_m_nActiveArea(lua_State* L)
{
	CSoundMixer* self = (CSoundMixer*)tolua_tousertype_dynamic(L, 1, 0, "CSoundMixer");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nActiveArea'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nActiveArea);
	return 1;
}

static int tolua_set_CSoundMixer_m_nActiveArea(lua_State* L)
{
	CSoundMixer* self = (CSoundMixer*)tolua_tousertype_dynamic(L, 1, 0, "CSoundMixer");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nActiveArea'", NULL);
	self->m_nActiveArea = tolua_setter_tointeger<int>(L, "m_nActiveArea");
	return 0;
}

static int tolua_get_CSoundMixer_reference_m_nActiveArea(lua_State* L)
{
	CSoundMixer* self = (CSoundMixer*)tolua_tousertype_dynamic(L, 1, 0, "CSoundMixer");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nActiveArea'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nActiveArea, "Primitive<int>");
	return 1;
}

static int tolua_get_CSoundMixer_m_nCurrentSong(lua_State* L)
{
	CSoundMixer* self = (CSoundMixer*)tolua_tousertype_dynamic(L, 1, 0, "CSoundMixer");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentSong'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCurrentSong);
	return 1;
}

static int tolua_set_CSoundMixer_m_nCurrentSong(lua_State* L)
{
	CSoundMixer* self = (CSoundMixer*)tolua_tousertype_dynamic(L, 1, 0, "CSoundMixer");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentSong'", NULL);
	self->m_nCurrentSong = tolua_setter_tointeger<int>(L, "m_nCurrentSong");
	return 0;
}

static int tolua_get_CSoundMixer_reference_m_nCurrentSong(lua_State* L)
{
	CSoundMixer* self = (CSoundMixer*)tolua_tousertype_dynamic(L, 1, 0, "CSoundMixer");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentSong'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCurrentSong, "Primitive<int>");
	return 1;
}

static int tolua_get_CSoundMixer_m_nLastSong(lua_State* L)
{
	CSoundMixer* self = (CSoundMixer*)tolua_tousertype_dynamic(L, 1, 0, "CSoundMixer");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nLastSong'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nLastSong);
	return 1;
}

static int tolua_set_CSoundMixer_m_nLastSong(lua_State* L)
{
	CSoundMixer* self = (CSoundMixer*)tolua_tousertype_dynamic(L, 1, 0, "CSoundMixer");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nLastSong'", NULL);
	self->m_nLastSong = tolua_setter_tointeger<int>(L, "m_nLastSong");
	return 0;
}

static int tolua_get_CSoundMixer_reference_m_nLastSong(lua_State* L)
{
	CSoundMixer* self = (CSoundMixer*)tolua_tousertype_dynamic(L, 1, 0, "CSoundMixer");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nLastSong'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nLastSong, "Primitive<int>");
	return 1;
}

static int tolua_get_CSingleLock_m_pObject(lua_State* L)
{
	CSingleLock* self = (CSingleLock*)tolua_tousertype_dynamic(L, 1, 0, "CSingleLock");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pObject'", NULL);
	tolua_pushusertype(L, (void*)self->m_pObject, "UnmappedUserType");
	return 1;
}

static int tolua_set_CSingleLock_m_pObject(lua_State* L)
{
	CSingleLock* self = (CSingleLock*)tolua_tousertype_dynamic(L, 1, 0, "CSingleLock");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pObject'", NULL);
	self->m_pObject = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CSingleLock_reference_m_pObject(lua_State* L)
{
	CSingleLock* self = (CSingleLock*)tolua_tousertype_dynamic(L, 1, 0, "CSingleLock");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pObject'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pObject, "VoidPointer");
	return 1;
}

static int tolua_get_CSingleLock_m_hObject(lua_State* L)
{
	CSingleLock* self = (CSingleLock*)tolua_tousertype_dynamic(L, 1, 0, "CSingleLock");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hObject'", NULL);
	tolua_pushusertype(L, (void*)self->m_hObject, "HANDLE");
	return 1;
}

static int tolua_set_CSingleLock_m_hObject(lua_State* L)
{
	CSingleLock* self = (CSingleLock*)tolua_tousertype_dynamic(L, 1, 0, "CSingleLock");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hObject'", NULL);
	self->m_hObject = (HANDLE)tolua_tousertype_dynamic(L, 2, 0, "HANDLE");
	return 0;
}

static int tolua_get_CSingleLock_reference_m_hObject(lua_State* L)
{
	CSingleLock* self = (CSingleLock*)tolua_tousertype_dynamic(L, 1, 0, "CSingleLock");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hObject'", NULL);
	tolua_pushusertype(L, (void*)&self->m_hObject, "HANDLE<HANDLE>");
	return 1;
}

static int tolua_get_CSingleLock_m_bAcquired(lua_State* L)
{
	CSingleLock* self = (CSingleLock*)tolua_tousertype_dynamic(L, 1, 0, "CSingleLock");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAcquired'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bAcquired);
	return 1;
}

static int tolua_set_CSingleLock_m_bAcquired(lua_State* L)
{
	CSingleLock* self = (CSingleLock*)tolua_tousertype_dynamic(L, 1, 0, "CSingleLock");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAcquired'", NULL);
	self->m_bAcquired = tolua_setter_tointeger<BOOL>(L, "m_bAcquired");
	return 0;
}

static int tolua_get_CSingleLock_reference_m_bAcquired(lua_State* L)
{
	CSingleLock* self = (CSingleLock*)tolua_tousertype_dynamic(L, 1, 0, "CSingleLock");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAcquired'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bAcquired, "Primitive<BOOL>");
	return 1;
}

static int tolua_function_CSingleLock_Construct(lua_State* L)
{
	CSingleLock* self = (CSingleLock*)tolua_tousertype_dynamic(L, 1, 0, "CSingleLock");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Construct'", NULL);
	self->Construct((CSyncObject*)tolua_tousertype_dynamic(L, 2, 0, "CSyncObject"), tolua_function_tointeger<BOOL>(L, 3, "Construct"));
	return 0;
}

static int tolua_function_CSingleLock_Destruct(lua_State* L)
{
	CSingleLock* self = (CSingleLock*)tolua_tousertype_dynamic(L, 1, 0, "CSingleLock");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Destruct'", NULL);
	self->Destruct();
	return 0;
}

static int tolua_function_CSingleLock_Lock(lua_State* L)
{
	CSingleLock* self = (CSingleLock*)tolua_tousertype_dynamic(L, 1, 0, "CSingleLock");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Lock'", NULL);
	BOOL returnVal = self->Lock(tolua_function_tointeger<DWORD>(L, 2, "Lock"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CSingleLock_Unlock(lua_State* L)
{
	CSingleLock* self = (CSingleLock*)tolua_tousertype_dynamic(L, 1, 0, "CSingleLock");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Unlock'", NULL);
	BOOL returnVal = self->Unlock();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CObject_virtual_GetRuntimeClass(lua_State* L)
{
	CObject* self = (CObject*)tolua_tousertype_dynamic(L, 1, 0, "CObject");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetRuntimeClass'", NULL);
	CRuntimeClass* returnVal = self->virtual_GetRuntimeClass();
	tolua_pushusertype(L, (void*)returnVal, "CRuntimeClass");
	return 1;
}

static int tolua_function_CObject_virtual_VirtualDestruct(lua_State* L)
{
	CObject* self = (CObject*)tolua_tousertype_dynamic(L, 1, 0, "CObject");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_VirtualDestruct'", NULL);
	CObject* returnVal = self->virtual_VirtualDestruct(tolua_function_tointeger<byte>(L, 2, "virtual_VirtualDestruct"));
	tolua_pushusertype(L, (void*)returnVal, "CObject");
	return 1;
}

static int tolua_function_CObject_virtual_Serialize(lua_State* L)
{
	CObject* self = (CObject*)tolua_tousertype_dynamic(L, 1, 0, "CObject");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Serialize'", NULL);
	self->virtual_Serialize((CArchive*)tolua_tousertype_dynamic(L, 2, 0, "CArchive"));
	return 0;
}

static int tolua_get_CObject__vtbl_GetRuntimeClass(lua_State* L)
{
	return 1;
}

static int tolua_set_CObject__vtbl_GetRuntimeClass(lua_State* L)
{
	return 0;
}

static int tolua_get_CObject__vtbl_reference_GetRuntimeClass(lua_State* L)
{
	return 1;
}

static int tolua_get_CObject__vtbl_VirtualDestruct(lua_State* L)
{
	return 1;
}

static int tolua_set_CObject__vtbl_VirtualDestruct(lua_State* L)
{
	return 0;
}

static int tolua_get_CObject__vtbl_reference_VirtualDestruct(lua_State* L)
{
	return 1;
}

static int tolua_get_CObject__vtbl_Serialize(lua_State* L)
{
	return 1;
}

static int tolua_set_CObject__vtbl_Serialize(lua_State* L)
{
	return 0;
}

static int tolua_get_CObject__vtbl_reference_Serialize(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp_m_pVidMode(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pVidMode'", NULL);
	tolua_pushusertype(L, (void*)self->m_pVidMode, "CVidMode");
	return 1;
}

static int tolua_set_CWarp_m_pVidMode(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pVidMode'", NULL);
	self->m_pVidMode = (CVidMode*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode");
	return 0;
}

static int tolua_get_CWarp_reference_m_pVidMode(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pVidMode'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pVidMode, "Pointer<CVidMode>");
	return 1;
}

static int tolua_get_CWarp_m_pLastEngine(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pLastEngine'", NULL);
	tolua_pushusertype(L, (void*)self->m_pLastEngine, "CWarp");
	return 1;
}

static int tolua_set_CWarp_m_pLastEngine(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pLastEngine'", NULL);
	self->m_pLastEngine = (CWarp*)tolua_tousertype_dynamic(L, 2, 0, "CWarp");
	return 0;
}

static int tolua_get_CWarp_reference_m_pLastEngine(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pLastEngine'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pLastEngine, "Pointer<CWarp>");
	return 1;
}

static int tolua_get_CWarp_lTimers(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'lTimers'", NULL);
	tolua_pushusertype(L, (void*)&self->lTimers, "CObList");
	return 1;
}

static int tolua_function_CWarp_virtual_EngineActivated(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_EngineActivated'", NULL);
	self->virtual_EngineActivated();
	return 0;
}

static int tolua_function_CWarp_virtual_EngineDeactivated(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_EngineDeactivated'", NULL);
	self->virtual_EngineDeactivated();
	return 0;
}

static int tolua_function_CWarp_virtual_EngineDestroyed(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_EngineDestroyed'", NULL);
	self->virtual_EngineDestroyed();
	return 0;
}

static int tolua_function_CWarp_virtual_EngineInitialized(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_EngineInitialized'", NULL);
	self->virtual_EngineInitialized();
	return 0;
}

static int tolua_function_CWarp_virtual_EngineGameInit(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_EngineGameInit'", NULL);
	self->virtual_EngineGameInit();
	return 0;
}

static int tolua_function_CWarp_virtual_EngineGameUninit(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_EngineGameUninit'", NULL);
	self->virtual_EngineGameUninit();
	return 0;
}

static int tolua_function_CWarp_virtual_SelectEngine(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_SelectEngine'", NULL);
	self->virtual_SelectEngine();
	return 0;
}

static int tolua_function_CWarp_virtual_OnMouseMove(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnMouseMove'", NULL);
	self->virtual_OnMouseMove();
	return 0;
}

static int tolua_function_CWarp_virtual_CheckMouseLButton(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_CheckMouseLButton'", NULL);
	self->virtual_CheckMouseLButton();
	return 0;
}

static int tolua_function_CWarp_virtual_OnLButtonDblClk(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnLButtonDblClk'", NULL);
	self->virtual_OnLButtonDblClk();
	return 0;
}

static int tolua_function_CWarp_virtual_OnLButtonDown(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnLButtonDown'", NULL);
	self->virtual_OnLButtonDown();
	return 0;
}

static int tolua_function_CWarp_virtual_OnLButtonUp(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnLButtonUp'", NULL);
	self->virtual_OnLButtonUp();
	return 0;
}

static int tolua_function_CWarp_virtual_CheckMouseRButton(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_CheckMouseRButton'", NULL);
	self->virtual_CheckMouseRButton();
	return 0;
}

static int tolua_function_CWarp_virtual_OnRButtonDblClk(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnRButtonDblClk'", NULL);
	self->virtual_OnRButtonDblClk();
	return 0;
}

static int tolua_function_CWarp_virtual_OnRButtonDown(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnRButtonDown'", NULL);
	self->virtual_OnRButtonDown();
	return 0;
}

static int tolua_function_CWarp_virtual_OnRButtonUp(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnRButtonUp'", NULL);
	self->virtual_OnRButtonUp();
	return 0;
}

static int tolua_function_CWarp_virtual_GetNumVirtualKeys(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetNumVirtualKeys'", NULL);
	self->virtual_GetNumVirtualKeys();
	return 0;
}

static int tolua_function_CWarp_virtual_GetVirtualKeys(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetVirtualKeys'", NULL);
	self->virtual_GetVirtualKeys();
	return 0;
}

static int tolua_function_CWarp_virtual_GetVirtualKeysFlags(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetVirtualKeysFlags'", NULL);
	self->virtual_GetVirtualKeysFlags();
	return 0;
}

static int tolua_function_CWarp_virtual_OnKeyDown(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnKeyDown'", NULL);
	self->virtual_OnKeyDown();
	return 0;
}

static int tolua_function_CWarp_virtual_TimerAsynchronousUpdate(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_TimerAsynchronousUpdate'", NULL);
	self->virtual_TimerAsynchronousUpdate();
	return 0;
}

static int tolua_function_CWarp_virtual_TimerSynchronousUpdate(lua_State* L)
{
	CWarp* self = (CWarp*)tolua_tousertype_dynamic(L, 1, 0, "CWarp");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_TimerSynchronousUpdate'", NULL);
	self->virtual_TimerSynchronousUpdate();
	return 0;
}

static int tolua_get_CWarp__vtbl_EngineActivated(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_EngineActivated(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_EngineActivated(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_EngineDeactivated(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_EngineDeactivated(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_EngineDeactivated(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_EngineDestroyed(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_EngineDestroyed(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_EngineDestroyed(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_EngineInitialized(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_EngineInitialized(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_EngineInitialized(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_EngineGameInit(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_EngineGameInit(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_EngineGameInit(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_EngineGameUninit(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_EngineGameUninit(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_EngineGameUninit(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_SelectEngine(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_SelectEngine(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_SelectEngine(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_OnMouseMove(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_OnMouseMove(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_OnMouseMove(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_CheckMouseLButton(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_CheckMouseLButton(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_CheckMouseLButton(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_OnLButtonDblClk(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_OnLButtonDblClk(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_OnLButtonDblClk(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_OnLButtonDown(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_OnLButtonDown(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_OnLButtonDown(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_OnLButtonUp(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_OnLButtonUp(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_OnLButtonUp(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_CheckMouseRButton(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_CheckMouseRButton(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_CheckMouseRButton(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_OnRButtonDblClk(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_OnRButtonDblClk(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_OnRButtonDblClk(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_OnRButtonDown(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_OnRButtonDown(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_OnRButtonDown(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_OnRButtonUp(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_OnRButtonUp(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_OnRButtonUp(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_GetNumVirtualKeys(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_GetNumVirtualKeys(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_GetNumVirtualKeys(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_GetVirtualKeys(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_GetVirtualKeys(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_GetVirtualKeys(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_GetVirtualKeysFlags(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_GetVirtualKeysFlags(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_GetVirtualKeysFlags(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_OnKeyDown(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_OnKeyDown(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_OnKeyDown(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_TimerAsynchronousUpdate(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_TimerAsynchronousUpdate(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_TimerAsynchronousUpdate(lua_State* L)
{
	return 1;
}

static int tolua_get_CWarp__vtbl_TimerSynchronousUpdate(lua_State* L)
{
	return 1;
}

static int tolua_set_CWarp__vtbl_TimerSynchronousUpdate(lua_State* L)
{
	return 0;
}

static int tolua_get_CWarp__vtbl_reference_TimerSynchronousUpdate(lua_State* L)
{
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_long__m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeHead, "CTypedPtrList<CPtrList,long>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_long__m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	self->m_pNodeHead = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,long>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_long__reference_m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeHead, "Pointer<CTypedPtrList<CPtrList,long>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_long__m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeTail, "CTypedPtrList<CPtrList,long>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_long__m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	self->m_pNodeTail = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,long>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_long__reference_m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeTail, "Pointer<CTypedPtrList<CPtrList,long>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_long__m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCount);
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_long__m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	self->m_nCount = tolua_setter_tointeger<int>(L, "m_nCount");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_long__reference_m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCount, "Primitive<int>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_long__m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeFree, "CTypedPtrList<CPtrList,long>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_long__m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	self->m_pNodeFree = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,long>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_long__reference_m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeFree, "Pointer<CTypedPtrList<CPtrList,long>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_long__m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	tolua_pushusertype(L, (void*)self->m_pBlocks, "UnmappedUserType");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_long__m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	self->m_pBlocks = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_long__reference_m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pBlocks, "VoidPointer");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_long__m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nBlockSize);
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_long__m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	self->m_nBlockSize = tolua_setter_tointeger<int>(L, "m_nBlockSize");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_long__reference_m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,long>* self = (CTypedPtrList<CPtrList,long>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nBlockSize, "Primitive<int>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_long___CNode_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,long>::CNode* self = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNext, "CTypedPtrList<CPtrList,long>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_long___CNode_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,long>::CNode* self = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	self->m_pNext = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,long>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_long___CNode_reference_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,long>::CNode* self = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNext, "Pointer<CTypedPtrList<CPtrList,long>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_long___CNode_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,long>::CNode* self = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	tolua_pushusertype(L, (void*)self->m_pPrev, "CTypedPtrList<CPtrList,long>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_long___CNode_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,long>::CNode* self = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	self->m_pPrev = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,long>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_long___CNode_reference_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,long>::CNode* self = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pPrev, "Pointer<CTypedPtrList<CPtrList,long>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_long___CNode_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,long>::CNode* self = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_pData);
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_long___CNode_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,long>::CNode* self = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	self->m_pData = tolua_setter_tointeger<long>(L, "m_pData");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_long___CNode_reference_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,long>::CNode* self = (CTypedPtrList<CPtrList,long>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,long>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pData, "Primitive<long>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp___m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeHead, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CWarp___m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	self->m_pNodeHead = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp___reference_m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeHead, "Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp___m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeTail, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CWarp___m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	self->m_pNodeTail = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp___reference_m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeTail, "Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp___m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCount);
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CWarp___m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	self->m_nCount = tolua_setter_tointeger<int>(L, "m_nCount");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp___reference_m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCount, "Primitive<int>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp___m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeFree, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CWarp___m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	self->m_pNodeFree = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp___reference_m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeFree, "Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp___m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	tolua_pushusertype(L, (void*)self->m_pBlocks, "UnmappedUserType");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CWarp___m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	self->m_pBlocks = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp___reference_m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pBlocks, "VoidPointer");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp___m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nBlockSize);
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CWarp___m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	self->m_nBlockSize = tolua_setter_tointeger<int>(L, "m_nBlockSize");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp___reference_m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>* self = (CTypedPtrList<CPtrList,CWarp*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nBlockSize, "Primitive<int>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp____CNode_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>::CNode* self = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNext, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CWarp____CNode_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>::CNode* self = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	self->m_pNext = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp____CNode_reference_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>::CNode* self = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNext, "Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp____CNode_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>::CNode* self = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	tolua_pushusertype(L, (void*)self->m_pPrev, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CWarp____CNode_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>::CNode* self = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	self->m_pPrev = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp____CNode_reference_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>::CNode* self = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pPrev, "Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp____CNode_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>::CNode* self = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)self->m_pData, "CWarp");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CWarp____CNode_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>::CNode* self = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	self->m_pData = (CWarp*)tolua_tousertype_dynamic(L, 2, 0, "CWarp");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CWarp____CNode_reference_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,CWarp*>::CNode* self = (CTypedPtrList<CPtrList,CWarp*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pData, "Pointer<CWarp>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel___m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeHead, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIPanel___m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	self->m_pNodeHead = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel___reference_m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeHead, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel___m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeTail, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIPanel___m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	self->m_pNodeTail = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel___reference_m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeTail, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel___m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCount);
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIPanel___m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	self->m_nCount = tolua_setter_tointeger<int>(L, "m_nCount");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel___reference_m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCount, "Primitive<int>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel___m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeFree, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIPanel___m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	self->m_pNodeFree = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel___reference_m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeFree, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel___m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	tolua_pushusertype(L, (void*)self->m_pBlocks, "UnmappedUserType");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIPanel___m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	self->m_pBlocks = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel___reference_m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pBlocks, "VoidPointer");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel___m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nBlockSize);
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIPanel___m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	self->m_nBlockSize = tolua_setter_tointeger<int>(L, "m_nBlockSize");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel___reference_m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>* self = (CTypedPtrList<CPtrList,CUIPanel*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nBlockSize, "Primitive<int>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel____CNode_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>::CNode* self = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNext, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIPanel____CNode_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>::CNode* self = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	self->m_pNext = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel____CNode_reference_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>::CNode* self = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNext, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel____CNode_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>::CNode* self = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	tolua_pushusertype(L, (void*)self->m_pPrev, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIPanel____CNode_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>::CNode* self = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	self->m_pPrev = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel____CNode_reference_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>::CNode* self = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pPrev, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel____CNode_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>::CNode* self = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)self->m_pData, "CUIPanel");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIPanel____CNode_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>::CNode* self = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	self->m_pData = (CUIPanel*)tolua_tousertype_dynamic(L, 2, 0, "CUIPanel");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIPanel____CNode_reference_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIPanel*>::CNode* self = (CTypedPtrList<CPtrList,CUIPanel*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pData, "Pointer<CUIPanel>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase___m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeHead, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIControlBase___m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	self->m_pNodeHead = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase___reference_m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeHead, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase___m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeTail, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIControlBase___m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	self->m_pNodeTail = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase___reference_m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeTail, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase___m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCount);
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIControlBase___m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	self->m_nCount = tolua_setter_tointeger<int>(L, "m_nCount");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase___reference_m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCount, "Primitive<int>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase___m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeFree, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIControlBase___m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	self->m_pNodeFree = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase___reference_m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeFree, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase___m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	tolua_pushusertype(L, (void*)self->m_pBlocks, "UnmappedUserType");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIControlBase___m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	self->m_pBlocks = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase___reference_m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pBlocks, "VoidPointer");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase___m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nBlockSize);
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIControlBase___m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	self->m_nBlockSize = tolua_setter_tointeger<int>(L, "m_nBlockSize");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase___reference_m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>* self = (CTypedPtrList<CPtrList,CUIControlBase*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nBlockSize, "Primitive<int>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase____CNode_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>::CNode* self = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNext, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIControlBase____CNode_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>::CNode* self = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	self->m_pNext = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase____CNode_reference_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>::CNode* self = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNext, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase____CNode_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>::CNode* self = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	tolua_pushusertype(L, (void*)self->m_pPrev, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIControlBase____CNode_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>::CNode* self = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	self->m_pPrev = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase____CNode_reference_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>::CNode* self = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pPrev, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase____CNode_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>::CNode* self = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)self->m_pData, "CUIControlBase");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CUIControlBase____CNode_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>::CNode* self = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	self->m_pData = (CUIControlBase*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlBase");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CUIControlBase____CNode_reference_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,CUIControlBase*>::CNode* self = (CTypedPtrList<CPtrList,CUIControlBase*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pData, "Pointer<CUIControlBase>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect___m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeHead, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CGameEffect___m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	self->m_pNodeHead = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect___reference_m_pNodeHead(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeHead'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeHead, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect___m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeTail, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CGameEffect___m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	self->m_pNodeTail = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect___reference_m_pNodeTail(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeTail'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeTail, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect___m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCount);
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CGameEffect___m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	self->m_nCount = tolua_setter_tointeger<int>(L, "m_nCount");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect___reference_m_nCount(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCount'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCount, "Primitive<int>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect___m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNodeFree, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CGameEffect___m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	self->m_pNodeFree = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect___reference_m_pNodeFree(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNodeFree'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNodeFree, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect___m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	tolua_pushusertype(L, (void*)self->m_pBlocks, "UnmappedUserType");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CGameEffect___m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	self->m_pBlocks = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect___reference_m_pBlocks(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBlocks'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pBlocks, "VoidPointer");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect___m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nBlockSize);
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CGameEffect___m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	self->m_nBlockSize = tolua_setter_tointeger<int>(L, "m_nBlockSize");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect___reference_m_nBlockSize(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>* self = (CTypedPtrList<CPtrList,CGameEffect*>*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlockSize'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nBlockSize, "Primitive<int>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect____CNode_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>::CNode* self = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNext, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CGameEffect____CNode_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>::CNode* self = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	self->m_pNext = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect____CNode_reference_m_pNext(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>::CNode* self = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNext'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNext, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect____CNode_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>::CNode* self = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	tolua_pushusertype(L, (void*)self->m_pPrev, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CGameEffect____CNode_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>::CNode* self = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	self->m_pPrev = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect____CNode_reference_m_pPrev(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>::CNode* self = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPrev'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pPrev, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	return 1;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect____CNode_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>::CNode* self = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)self->m_pData, "CGameEffect");
	return 1;
}

static int tolua_set_CTypedPtrList_CPtrList_CGameEffect____CNode_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>::CNode* self = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	self->m_pData = (CGameEffect*)tolua_tousertype_dynamic(L, 2, 0, "CGameEffect");
	return 0;
}

static int tolua_get_CTypedPtrList_CPtrList_CGameEffect____CNode_reference_m_pData(lua_State* L)
{
	CTypedPtrList<CPtrList,CGameEffect*>::CNode* self = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 1, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pData, "Pointer<CGameEffect>");
	return 1;
}

static int tolua_get_CGameEffectList_m_posNext(lua_State* L)
{
	CGameEffectList* self = (CGameEffectList*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_posNext'", NULL);
	tolua_pushusertype(L, (void*)self->m_posNext, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 1;
}

static int tolua_set_CGameEffectList_m_posNext(lua_State* L)
{
	CGameEffectList* self = (CGameEffectList*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_posNext'", NULL);
	self->m_posNext = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 0;
}

static int tolua_get_CGameEffectList_reference_m_posNext(lua_State* L)
{
	CGameEffectList* self = (CGameEffectList*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_posNext'", NULL);
	tolua_pushusertype(L, (void*)&self->m_posNext, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	return 1;
}

static int tolua_get_CGameEffectList_m_posCurrent(lua_State* L)
{
	CGameEffectList* self = (CGameEffectList*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_posCurrent'", NULL);
	tolua_pushusertype(L, (void*)self->m_posCurrent, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 1;
}

static int tolua_set_CGameEffectList_m_posCurrent(lua_State* L)
{
	CGameEffectList* self = (CGameEffectList*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_posCurrent'", NULL);
	self->m_posCurrent = (CTypedPtrList<CPtrList,CGameEffect*>::CNode*)tolua_tousertype_dynamic(L, 2, 0, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	return 0;
}

static int tolua_get_CGameEffectList_reference_m_posCurrent(lua_State* L)
{
	CGameEffectList* self = (CGameEffectList*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_posCurrent'", NULL);
	tolua_pushusertype(L, (void*)&self->m_posCurrent, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	return 1;
}

static int tolua_get_CGameEffectList_m_newEffect(lua_State* L)
{
	CGameEffectList* self = (CGameEffectList*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_newEffect'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_newEffect);
	return 1;
}

static int tolua_set_CGameEffectList_m_newEffect(lua_State* L)
{
	CGameEffectList* self = (CGameEffectList*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_newEffect'", NULL);
	self->m_newEffect = tolua_setter_tointeger<int>(L, "m_newEffect");
	return 0;
}

static int tolua_get_CGameEffectList_reference_m_newEffect(lua_State* L)
{
	CGameEffectList* self = (CGameEffectList*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_newEffect'", NULL);
	tolua_pushusertype(L, (void*)&self->m_newEffect, "Primitive<int>");
	return 1;
}

static int tolua_get_CGameEffectList_m_retry(lua_State* L)
{
	CGameEffectList* self = (CGameEffectList*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_retry'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_retry);
	return 1;
}

static int tolua_set_CGameEffectList_m_retry(lua_State* L)
{
	CGameEffectList* self = (CGameEffectList*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_retry'", NULL);
	self->m_retry = tolua_setter_tointeger<int>(L, "m_retry");
	return 0;
}

static int tolua_get_CGameEffectList_reference_m_retry(lua_State* L)
{
	CGameEffectList* self = (CGameEffectList*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectList");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_retry'", NULL);
	tolua_pushusertype(L, (void*)&self->m_retry, "Primitive<int>");
	return 1;
}

static int tolua_get_CSyncObject_m_hObject(lua_State* L)
{
	CSyncObject* self = (CSyncObject*)tolua_tousertype_dynamic(L, 1, 0, "CSyncObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hObject'", NULL);
	tolua_pushusertype(L, (void*)self->m_hObject, "HANDLE");
	return 1;
}

static int tolua_set_CSyncObject_m_hObject(lua_State* L)
{
	CSyncObject* self = (CSyncObject*)tolua_tousertype_dynamic(L, 1, 0, "CSyncObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hObject'", NULL);
	self->m_hObject = (HANDLE)tolua_tousertype_dynamic(L, 2, 0, "HANDLE");
	return 0;
}

static int tolua_get_CSyncObject_reference_m_hObject(lua_State* L)
{
	CSyncObject* self = (CSyncObject*)tolua_tousertype_dynamic(L, 1, 0, "CSyncObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hObject'", NULL);
	tolua_pushusertype(L, (void*)&self->m_hObject, "HANDLE<HANDLE>");
	return 1;
}

static int tolua_function_CSyncObject_virtual_Lock(lua_State* L)
{
	CSyncObject* self = (CSyncObject*)tolua_tousertype_dynamic(L, 1, 0, "CSyncObject");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Lock'", NULL);
	BOOL returnVal = self->virtual_Lock(tolua_function_tointeger<DWORD>(L, 2, "virtual_Lock"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CSyncObject_virtual_Unlock(lua_State* L)
{
	CSyncObject* self = (CSyncObject*)tolua_tousertype_dynamic(L, 1, 0, "CSyncObject");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Unlock'", NULL);
	BOOL returnVal = self->virtual_Unlock(tolua_function_tointeger<long>(L, 2, "virtual_Unlock"), *(LPLONG*)tolua_tousertype_dynamic(L, 3, 0, "LPLONG"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CSyncObject_virtual_Unlock_2(lua_State* L)
{
	CSyncObject* self = (CSyncObject*)tolua_tousertype_dynamic(L, 1, 0, "CSyncObject");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Unlock_2'", NULL);
	BOOL returnVal = self->virtual_Unlock_2();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_CSyncObject__vtbl_Lock(lua_State* L)
{
	return 1;
}

static int tolua_set_CSyncObject__vtbl_Lock(lua_State* L)
{
	return 0;
}

static int tolua_get_CSyncObject__vtbl_reference_Lock(lua_State* L)
{
	return 1;
}

static int tolua_get_CSyncObject__vtbl_Unlock(lua_State* L)
{
	return 1;
}

static int tolua_set_CSyncObject__vtbl_Unlock(lua_State* L)
{
	return 0;
}

static int tolua_get_CSyncObject__vtbl_reference_Unlock(lua_State* L)
{
	return 1;
}

static int tolua_get_CSyncObject__vtbl_Unlock_2(lua_State* L)
{
	return 1;
}

static int tolua_set_CSyncObject__vtbl_Unlock_2(lua_State* L)
{
	return 0;
}

static int tolua_get_CSyncObject__vtbl_reference_Unlock_2(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameObjectArray_m_lock(lua_State* L)
{
	CGameObjectArray* self = (CGameObjectArray*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_lock'", NULL);
	tolua_pushusertype(L, (void*)&self->m_lock, "CSyncObject");
	return 1;
}

static int tolua_get_CGameObjectArray_m_pArray(lua_State* L)
{
	CGameObjectArray* self = (CGameObjectArray*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pArray'", NULL);
	tolua_pushusertype(L, (void*)self->m_pArray, "CGameObjectArrayEntry");
	return 1;
}

static int tolua_set_CGameObjectArray_m_pArray(lua_State* L)
{
	CGameObjectArray* self = (CGameObjectArray*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pArray'", NULL);
	self->m_pArray = (CGameObjectArrayEntry*)tolua_tousertype_dynamic(L, 2, 0, "CGameObjectArrayEntry");
	return 0;
}

static int tolua_get_CGameObjectArray_reference_m_pArray(lua_State* L)
{
	CGameObjectArray* self = (CGameObjectArray*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pArray'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pArray, "Pointer<CGameObjectArrayEntry>");
	return 1;
}

static int tolua_get_CGameObjectArray_m_nArray(lua_State* L)
{
	CGameObjectArray* self = (CGameObjectArray*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nArray'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nArray);
	return 1;
}

static int tolua_set_CGameObjectArray_m_nArray(lua_State* L)
{
	CGameObjectArray* self = (CGameObjectArray*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nArray'", NULL);
	self->m_nArray = tolua_setter_tointeger<short>(L, "m_nArray");
	return 0;
}

static int tolua_get_CGameObjectArray_reference_m_nArray(lua_State* L)
{
	CGameObjectArray* self = (CGameObjectArray*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nArray'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nArray, "Primitive<short>");
	return 1;
}

static int tolua_get_CGameObjectArray_m_maxArrayIndex(lua_State* L)
{
	CGameObjectArray* self = (CGameObjectArray*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_maxArrayIndex'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_maxArrayIndex);
	return 1;
}

static int tolua_set_CGameObjectArray_m_maxArrayIndex(lua_State* L)
{
	CGameObjectArray* self = (CGameObjectArray*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_maxArrayIndex'", NULL);
	self->m_maxArrayIndex = tolua_setter_tointeger<short>(L, "m_maxArrayIndex");
	return 0;
}

static int tolua_get_CGameObjectArray_reference_m_maxArrayIndex(lua_State* L)
{
	CGameObjectArray* self = (CGameObjectArray*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_maxArrayIndex'", NULL);
	tolua_pushusertype(L, (void*)&self->m_maxArrayIndex, "Primitive<short>");
	return 1;
}

static int tolua_get_CGameObjectArray_m_nextObjectId(lua_State* L)
{
	CGameObjectArray* self = (CGameObjectArray*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nextObjectId'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nextObjectId);
	return 1;
}

static int tolua_set_CGameObjectArray_m_nextObjectId(lua_State* L)
{
	CGameObjectArray* self = (CGameObjectArray*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nextObjectId'", NULL);
	self->m_nextObjectId = tolua_setter_tointeger<short>(L, "m_nextObjectId");
	return 0;
}

static int tolua_get_CGameObjectArray_reference_m_nextObjectId(lua_State* L)
{
	CGameObjectArray* self = (CGameObjectArray*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nextObjectId'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nextObjectId, "Primitive<short>");
	return 1;
}

static int tolua_get_CVidMode_m_bNonVideoMemoryFullscreen(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bNonVideoMemoryFullscreen'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bNonVideoMemoryFullscreen);
	return 1;
}

static int tolua_set_CVidMode_m_bNonVideoMemoryFullscreen(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bNonVideoMemoryFullscreen'", NULL);
	self->m_bNonVideoMemoryFullscreen = tolua_setter_tointeger<int>(L, "m_bNonVideoMemoryFullscreen");
	return 0;
}

static int tolua_get_CVidMode_reference_m_bNonVideoMemoryFullscreen(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bNonVideoMemoryFullscreen'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bNonVideoMemoryFullscreen, "Primitive<int>");
	return 1;
}

static int tolua_get_CVidMode_m_bScreenshotQueued(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bScreenshotQueued'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bScreenshotQueued);
	return 1;
}

static int tolua_set_CVidMode_m_bScreenshotQueued(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bScreenshotQueued'", NULL);
	self->m_bScreenshotQueued = tolua_setter_tointeger<byte>(L, "m_bScreenshotQueued");
	return 0;
}

static int tolua_get_CVidMode_reference_m_bScreenshotQueued(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bScreenshotQueued'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bScreenshotQueued, "Primitive<byte>");
	return 1;
}

static int tolua_get_CVidMode_m_pTexSurfaces(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pTexSurfaces'", NULL);
	tolua_pushusertype(L, (void*)self->m_pTexSurfaces, "Pointer<IDirectDrawSurface>");
	return 1;
}

static int tolua_set_CVidMode_m_pTexSurfaces(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pTexSurfaces'", NULL);
	self->m_pTexSurfaces = (IDirectDrawSurface**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<IDirectDrawSurface>");
	return 0;
}

static int tolua_get_CVidMode_reference_m_pTexSurfaces(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pTexSurfaces'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pTexSurfaces, "Pointer<IDirectDrawSurface*>");
	return 1;
}

static int tolua_get_CVidMode_m_rgbGlobalTint(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rgbGlobalTint'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_rgbGlobalTint);
	return 1;
}

static int tolua_set_CVidMode_m_rgbGlobalTint(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rgbGlobalTint'", NULL);
	self->m_rgbGlobalTint = tolua_setter_tointeger<uint>(L, "m_rgbGlobalTint");
	return 0;
}

static int tolua_get_CVidMode_reference_m_rgbGlobalTint(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rgbGlobalTint'", NULL);
	tolua_pushusertype(L, (void*)&self->m_rgbGlobalTint, "Primitive<uint>");
	return 1;
}

static int tolua_get_CVidMode_m_nRedBitOffset(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nRedBitOffset'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nRedBitOffset);
	return 1;
}

static int tolua_set_CVidMode_m_nRedBitOffset(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nRedBitOffset'", NULL);
	self->m_nRedBitOffset = tolua_setter_tointeger<int>(L, "m_nRedBitOffset");
	return 0;
}

static int tolua_get_CVidMode_reference_m_nRedBitOffset(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nRedBitOffset'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nRedBitOffset, "Primitive<int>");
	return 1;
}

static int tolua_get_CVidMode_m_nGreenBitOffset(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nGreenBitOffset'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nGreenBitOffset);
	return 1;
}

static int tolua_set_CVidMode_m_nGreenBitOffset(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nGreenBitOffset'", NULL);
	self->m_nGreenBitOffset = tolua_setter_tointeger<int>(L, "m_nGreenBitOffset");
	return 0;
}

static int tolua_get_CVidMode_reference_m_nGreenBitOffset(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nGreenBitOffset'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nGreenBitOffset, "Primitive<int>");
	return 1;
}

static int tolua_get_CVidMode_m_nBlueBitOffset(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlueBitOffset'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nBlueBitOffset);
	return 1;
}

static int tolua_set_CVidMode_m_nBlueBitOffset(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlueBitOffset'", NULL);
	self->m_nBlueBitOffset = tolua_setter_tointeger<int>(L, "m_nBlueBitOffset");
	return 0;
}

static int tolua_get_CVidMode_reference_m_nBlueBitOffset(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBlueBitOffset'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nBlueBitOffset, "Primitive<int>");
	return 1;
}

static int tolua_function_CVidMode_CheckBltResult(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'CheckBltResult'", NULL);
	int returnVal = self->CheckBltResult(tolua_function_tointeger<HRESULT>(L, 2, "CheckBltResult"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CVidMode_LockTexSurface(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'LockTexSurface'", NULL);
	byte returnVal = self->LockTexSurface(tolua_function_tointeger<uint>(L, 2, "LockTexSurface"), (DDSURFACEDESC*)tolua_tousertype_dynamic(L, 3, 0, "DDSURFACEDESC"), (CRect*)tolua_tousertype_dynamic(L, 4, 0, "CRect"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CVidMode_UnlockTexSurface(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'UnlockTexSurface'", NULL);
	byte returnVal = self->UnlockTexSurface(tolua_function_tointeger<uint>(L, 2, "UnlockTexSurface"), (void*)tolua_tousertype_dynamic(L, 3, 0, "UnmappedUserType"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CVidMode_virtual_Screenshot(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Screenshot'", NULL);
	self->virtual_Screenshot();
	return 0;
}

static int tolua_function_CVidMode_virtual_Select(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Select'", NULL);
	int returnVal = self->virtual_Select((CVidMode*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode"), (HWND)tolua_tousertype_dynamic(L, 3, 0, "HWND"), tolua_function_tointeger<byte>(L, 4, "virtual_Select"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CVidMode_virtual_SetClipper(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_SetClipper'", NULL);
	self->virtual_SetClipper();
	return 0;
}

static int tolua_function_CVidMode_virtual_SetupTexSurfaces(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_SetupTexSurfaces'", NULL);
	self->virtual_SetupTexSurfaces();
	return 0;
}

static int tolua_function_CVidMode_virtual_RenderDebugTimes(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_RenderDebugTimes'", NULL);
	self->virtual_RenderDebugTimes();
	return 0;
}

static int tolua_function_CVidMode_virtual_Blt(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Blt'", NULL);
	self->virtual_Blt();
	return 0;
}

static int tolua_function_CVidMode_virtual_Blt16(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Blt16'", NULL);
	self->virtual_Blt16();
	return 0;
}

static int tolua_function_CVidMode_virtual_Blt24(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Blt24'", NULL);
	self->virtual_Blt24();
	return 0;
}

static int tolua_function_CVidMode_virtual_Blt32(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Blt32'", NULL);
	self->virtual_Blt32();
	return 0;
}

static int tolua_function_CVidMode_virtual_FlipBuffers(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_FlipBuffers'", NULL);
	self->virtual_FlipBuffers();
	return 0;
}

static int tolua_function_CVidMode_virtual_GetResolution(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetResolution'", NULL);
	self->virtual_GetResolution();
	return 0;
}

static int tolua_function_CVidMode_virtual_PreventSurfacesChange(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_PreventSurfacesChange'", NULL);
	self->virtual_PreventSurfacesChange();
	return 0;
}

static int tolua_function_CVidMode_virtual_RenderCursorToSurface(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_RenderCursorToSurface'", NULL);
	self->virtual_RenderCursorToSurface();
	return 0;
}

static int tolua_function_CVidMode_virtual_RenderCursor(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_RenderCursor'", NULL);
	self->virtual_RenderCursor();
	return 0;
}

static int tolua_function_CVidMode_virtual_RestoreSurfaces(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_RestoreSurfaces'", NULL);
	self->virtual_RestoreSurfaces();
	return 0;
}

static int tolua_function_CVidMode_virtual_ConvertSurfaceToBmp(lua_State* L)
{
	CVidMode* self = (CVidMode*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_ConvertSurfaceToBmp'", NULL);
	byte returnVal = self->virtual_ConvertSurfaceToBmp((void**)tolua_tousertype_dynamic(L, 2, 0, "VoidPointer"), tolua_function_tointeger<uint>(L, 3, "virtual_ConvertSurfaceToBmp"), (CRect*)tolua_tousertype_dynamic(L, 4, 0, "CRect"), (uint*)tolua_tousertype_dynamic(L, 5, 0, "Primitive<uint>"), tolua_function_tointeger<short>(L, 6, "virtual_ConvertSurfaceToBmp"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_CVidMode__vtbl_Screenshot(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_Screenshot(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_Screenshot(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_Select(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_Select(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_Select(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_SetClipper(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_SetClipper(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_SetClipper(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_SetupTexSurfaces(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_SetupTexSurfaces(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_SetupTexSurfaces(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_RenderDebugTimes(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_RenderDebugTimes(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_RenderDebugTimes(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_Blt(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_Blt(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_Blt(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_Blt16(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_Blt16(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_Blt16(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_Blt24(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_Blt24(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_Blt24(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_Blt32(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_Blt32(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_Blt32(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_FlipBuffers(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_FlipBuffers(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_FlipBuffers(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_GetResolution(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_GetResolution(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_GetResolution(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_PreventSurfacesChange(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_PreventSurfacesChange(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_PreventSurfacesChange(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_RenderCursorToSurface(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_RenderCursorToSurface(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_RenderCursorToSurface(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_RenderCursor(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_RenderCursor(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_RenderCursor(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_RestoreSurfaces(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_RestoreSurfaces(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_RestoreSurfaces(lua_State* L)
{
	return 1;
}

static int tolua_get_CVidMode__vtbl_ConvertSurfaceToBmp(lua_State* L)
{
	return 1;
}

static int tolua_set_CVidMode__vtbl_ConvertSurfaceToBmp(lua_State* L)
{
	return 0;
}

static int tolua_get_CVidMode__vtbl_reference_ConvertSurfaceToBmp(lua_State* L)
{
	return 1;
}

static int tolua_function_CVidMode0_Export_Override_ConvertSurfaceToBmp(lua_State* L)
{
	CVidMode0* self = (CVidMode0*)tolua_tousertype_dynamic(L, 1, 0, "CVidMode0");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Export_Override_ConvertSurfaceToBmp'", NULL);
	byte returnVal = self->Export_Override_ConvertSurfaceToBmp((void**)tolua_tousertype_dynamic(L, 2, 0, "VoidPointer"), tolua_function_tointeger<uint>(L, 3, "Export_Override_ConvertSurfaceToBmp"), (CRect*)tolua_tousertype_dynamic(L, 4, 0, "CRect"), (uint*)tolua_tousertype_dynamic(L, 5, 0, "Primitive<uint>"), tolua_function_tointeger<short>(L, 6, "Export_Override_ConvertSurfaceToBmp"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_CCriticalSection_m_sect(lua_State* L)
{
	CCriticalSection* self = (CCriticalSection*)tolua_tousertype_dynamic(L, 1, 0, "CCriticalSection");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sect'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sect, "CRITICAL_SECTION");
	return 1;
}

static int tolua_get_CRes_m_nResFlags(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nResFlags'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nResFlags);
	return 1;
}

static int tolua_set_CRes_m_nResFlags(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nResFlags'", NULL);
	self->m_nResFlags = tolua_setter_tointeger<uint>(L, "m_nResFlags");
	return 0;
}

static int tolua_get_CRes_reference_m_nResFlags(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nResFlags'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nResFlags, "Primitive<uint>");
	return 1;
}

static int tolua_get_CRes_m_pViewBase(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pViewBase'", NULL);
	tolua_pushusertype(L, (void*)self->m_pViewBase, "UnmappedUserType");
	return 1;
}

static int tolua_set_CRes_m_pViewBase(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pViewBase'", NULL);
	self->m_pViewBase = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CRes_reference_m_pViewBase(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pViewBase'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pViewBase, "VoidPointer");
	return 1;
}

static int tolua_get_CRes_m_myPriorityList(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_myPriorityList'", NULL);
	tolua_pushusertype(L, (void*)self->m_myPriorityList, "CPtrList");
	return 1;
}

static int tolua_set_CRes_m_myPriorityList(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_myPriorityList'", NULL);
	self->m_myPriorityList = (CPtrList*)tolua_tousertype_dynamic(L, 2, 0, "CPtrList");
	return 0;
}

static int tolua_get_CRes_reference_m_myPriorityList(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_myPriorityList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_myPriorityList, "Pointer<CPtrList>");
	return 1;
}

static int tolua_get_CRes_m_pHashEntry(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pHashEntry'", NULL);
	tolua_pushusertype(L, (void*)self->m_pHashEntry, "UnmappedUserType");
	return 1;
}

static int tolua_set_CRes_m_pHashEntry(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pHashEntry'", NULL);
	self->m_pHashEntry = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CRes_reference_m_pHashEntry(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pHashEntry'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pHashEntry, "VoidPointer");
	return 1;
}

static int tolua_get_CRes_m_nDemands(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nDemands'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nDemands);
	return 1;
}

static int tolua_set_CRes_m_nDemands(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nDemands'", NULL);
	self->m_nDemands = tolua_setter_tointeger<int>(L, "m_nDemands");
	return 0;
}

static int tolua_get_CRes_reference_m_nDemands(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nDemands'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nDemands, "Primitive<int>");
	return 1;
}

static int tolua_get_CRes_m_nRequests(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nRequests'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nRequests);
	return 1;
}

static int tolua_set_CRes_m_nRequests(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nRequests'", NULL);
	self->m_nRequests = tolua_setter_tointeger<int>(L, "m_nRequests");
	return 0;
}

static int tolua_get_CRes_reference_m_nRequests(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nRequests'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nRequests, "Primitive<int>");
	return 1;
}

static int tolua_get_CRes_m_myPriorityListNode(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_myPriorityListNode'", NULL);
	tolua_pushusertype(L, (void*)self->m_myPriorityListNode, "CPtrList_CNode");
	return 1;
}

static int tolua_set_CRes_m_myPriorityListNode(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_myPriorityListNode'", NULL);
	self->m_myPriorityListNode = (CPtrList_CNode*)tolua_tousertype_dynamic(L, 2, 0, "CPtrList_CNode");
	return 0;
}

static int tolua_get_CRes_reference_m_myPriorityListNode(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_myPriorityListNode'", NULL);
	tolua_pushusertype(L, (void*)&self->m_myPriorityListNode, "Pointer<CPtrList_CNode>");
	return 1;
}

static int tolua_function_CRes_DecrementDemands(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'DecrementDemands'", NULL);
	self->DecrementDemands();
	return 0;
}

static int tolua_function_CRes_DecrementRequests(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'DecrementRequests'", NULL);
	self->DecrementRequests();
	return 0;
}

static int tolua_function_CRes_Demand(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Demand'", NULL);
	void* returnVal = self->Demand();
	tolua_pushusertype(L, (void*)returnVal, "UnmappedUserType");
	return 1;
}

static int tolua_function_CRes_Request(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Request'", NULL);
	self->Request();
	return 0;
}

static int tolua_function_CRes_virtual_GetResRef(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetResRef'", NULL);
	CResRef* returnVal = self->virtual_GetResRef((CResRef*)tolua_tousertype_dynamic(L, 2, 0, "CResRef"));
	tolua_pushusertype(L, (void*)returnVal, "CResRef");
	return 1;
}

static int tolua_function_CRes_virtual_GetFileType(lua_State* L)
{
	CRes* self = (CRes*)tolua_tousertype_dynamic(L, 1, 0, "CRes");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetFileType'", NULL);
	short returnVal = self->virtual_GetFileType();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_CRes__vtbl_GetResRef(lua_State* L)
{
	return 1;
}

static int tolua_set_CRes__vtbl_GetResRef(lua_State* L)
{
	return 0;
}

static int tolua_get_CRes__vtbl_reference_GetResRef(lua_State* L)
{
	return 1;
}

static int tolua_get_CRes__vtbl_GetFileType(lua_State* L)
{
	return 1;
}

static int tolua_set_CRes__vtbl_GetFileType(lua_State* L)
{
	return 0;
}

static int tolua_get_CRes__vtbl_reference_GetFileType(lua_State* L)
{
	return 1;
}

static int tolua_get_CResUI_m_pData(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)self->m_pData, "UnmappedUserType");
	return 1;
}

static int tolua_set_CResUI_m_pData(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	self->m_pData = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CResUI_reference_m_pData(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pData, "VoidPointer");
	return 1;
}

static int tolua_get_CResUI_m_pPanels(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPanels'", NULL);
	tolua_pushusertype(L, (void*)self->m_pPanels, "UI_PanelHeader_st");
	return 1;
}

static int tolua_set_CResUI_m_pPanels(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPanels'", NULL);
	self->m_pPanels = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 2, 0, "UI_PanelHeader_st");
	return 0;
}

static int tolua_get_CResUI_reference_m_pPanels(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPanels'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pPanels, "Pointer<UI_PanelHeader_st>");
	return 1;
}

static int tolua_get_CResUI_m_pControls(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pControls'", NULL);
	tolua_pushusertype(L, (void*)self->m_pControls, "UI_Control_st");
	return 1;
}

static int tolua_set_CResUI_m_pControls(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pControls'", NULL);
	self->m_pControls = (UI_Control_st*)tolua_tousertype_dynamic(L, 2, 0, "UI_Control_st");
	return 0;
}

static int tolua_get_CResUI_reference_m_pControls(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pControls'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pControls, "Pointer<UI_Control_st>");
	return 1;
}

static int tolua_get_CResUI_m_bParsed(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bParsed'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bParsed);
	return 1;
}

static int tolua_set_CResUI_m_bParsed(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bParsed'", NULL);
	self->m_bParsed = tolua_setter_tointeger<int>(L, "m_bParsed");
	return 0;
}

static int tolua_get_CResUI_reference_m_bParsed(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bParsed'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bParsed, "Primitive<int>");
	return 1;
}

static int tolua_function_CResUI_DecrementDemands(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'DecrementDemands'", NULL);
	self->DecrementDemands();
	return 0;
}

static int tolua_function_CResUI_Demand(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Demand'", NULL);
	void* returnVal = self->Demand();
	tolua_pushusertype(L, (void*)returnVal, "UnmappedUserType");
	return 1;
}

static int tolua_function_CResUI_GetControl(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'GetControl'", NULL);
	UI_Control_st* returnVal = self->GetControl(tolua_function_tointeger<uint>(L, 2, "GetControl"), tolua_function_tointeger<uint>(L, 3, "GetControl"));
	tolua_pushusertype(L, (void*)returnVal, "UI_Control_st");
	return 1;
}

static int tolua_function_CResUI_GetControlNo(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'GetControlNo'", NULL);
	int returnVal = self->GetControlNo(tolua_function_tointeger<uint>(L, 2, "GetControlNo"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CResUI_GetPanel(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'GetPanel'", NULL);
	UI_PanelHeader_st* returnVal = self->GetPanel(tolua_function_tointeger<uint>(L, 2, "GetPanel"));
	tolua_pushusertype(L, (void*)returnVal, "UI_PanelHeader_st");
	return 1;
}

static int tolua_function_CResUI_GetPanelNo(lua_State* L)
{
	CResUI* self = (CResUI*)tolua_tousertype_dynamic(L, 1, 0, "CResUI");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'GetPanelNo'", NULL);
	int returnVal = self->GetPanelNo();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_CResMosaic_m_pData(lua_State* L)
{
	CResMosaic* self = (CResMosaic*)tolua_tousertype_dynamic(L, 1, 0, "CResMosaic");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)self->m_pData, "mosHeader_st");
	return 1;
}

static int tolua_set_CResMosaic_m_pData(lua_State* L)
{
	CResMosaic* self = (CResMosaic*)tolua_tousertype_dynamic(L, 1, 0, "CResMosaic");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	self->m_pData = (mosHeader_st*)tolua_tousertype_dynamic(L, 2, 0, "mosHeader_st");
	return 0;
}

static int tolua_get_CResMosaic_reference_m_pData(lua_State* L)
{
	CResMosaic* self = (CResMosaic*)tolua_tousertype_dynamic(L, 1, 0, "CResMosaic");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pData'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pData, "Pointer<mosHeader_st>");
	return 1;
}

static int tolua_get_CResMosaic_m_bParsed(lua_State* L)
{
	CResMosaic* self = (CResMosaic*)tolua_tousertype_dynamic(L, 1, 0, "CResMosaic");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bParsed'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bParsed);
	return 1;
}

static int tolua_set_CResMosaic_m_bParsed(lua_State* L)
{
	CResMosaic* self = (CResMosaic*)tolua_tousertype_dynamic(L, 1, 0, "CResMosaic");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bParsed'", NULL);
	self->m_bParsed = tolua_setter_tointeger<int>(L, "m_bParsed");
	return 0;
}

static int tolua_get_CResMosaic_reference_m_bParsed(lua_State* L)
{
	CResMosaic* self = (CResMosaic*)tolua_tousertype_dynamic(L, 1, 0, "CResMosaic");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bParsed'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bParsed, "Primitive<int>");
	return 1;
}

static int tolua_function_CResMosaic_DecrementDemands(lua_State* L)
{
	CResMosaic* self = (CResMosaic*)tolua_tousertype_dynamic(L, 1, 0, "CResMosaic");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'DecrementDemands'", NULL);
	self->DecrementDemands();
	return 0;
}

static int tolua_function_CResMosaic_Demand(lua_State* L)
{
	CResMosaic* self = (CResMosaic*)tolua_tousertype_dynamic(L, 1, 0, "CResMosaic");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Demand'", NULL);
	void* returnVal = self->Demand();
	tolua_pushusertype(L, (void*)returnVal, "UnmappedUserType");
	return 1;
}

static int tolua_get_CResItem_pHeader(lua_State* L)
{
	CResItem* self = (CResItem*)tolua_tousertype_dynamic(L, 1, 0, "CResItem");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'pHeader'", NULL);
	tolua_pushusertype(L, (void*)&self->pHeader, "dword");
	return 1;
}

static int tolua_get_CResCell_m_pPalette(lua_State* L)
{
	CResCell* self = (CResCell*)tolua_tousertype_dynamic(L, 1, 0, "CResCell");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPalette'", NULL);
	tolua_pushusertype(L, (void*)self->m_pPalette, "tagRGBQUAD");
	return 1;
}

static int tolua_set_CResCell_m_pPalette(lua_State* L)
{
	CResCell* self = (CResCell*)tolua_tousertype_dynamic(L, 1, 0, "CResCell");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPalette'", NULL);
	self->m_pPalette = (tagRGBQUAD*)tolua_tousertype_dynamic(L, 2, 0, "tagRGBQUAD");
	return 0;
}

static int tolua_get_CResCell_reference_m_pPalette(lua_State* L)
{
	CResCell* self = (CResCell*)tolua_tousertype_dynamic(L, 1, 0, "CResCell");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPalette'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pPalette, "Pointer<tagRGBQUAD>");
	return 1;
}

static int tolua_get_CMessage_m_targetId(lua_State* L)
{
	CMessage* self = (CMessage*)tolua_tousertype_dynamic(L, 1, 0, "CMessage");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_targetId'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_targetId);
	return 1;
}

static int tolua_set_CMessage_m_targetId(lua_State* L)
{
	CMessage* self = (CMessage*)tolua_tousertype_dynamic(L, 1, 0, "CMessage");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_targetId'", NULL);
	self->m_targetId = tolua_setter_tointeger<int>(L, "m_targetId");
	return 0;
}

static int tolua_get_CMessage_reference_m_targetId(lua_State* L)
{
	CMessage* self = (CMessage*)tolua_tousertype_dynamic(L, 1, 0, "CMessage");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_targetId'", NULL);
	tolua_pushusertype(L, (void*)&self->m_targetId, "Primitive<int>");
	return 1;
}

static int tolua_get_CMessage_m_sourceId(lua_State* L)
{
	CMessage* self = (CMessage*)tolua_tousertype_dynamic(L, 1, 0, "CMessage");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sourceId'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_sourceId);
	return 1;
}

static int tolua_set_CMessage_m_sourceId(lua_State* L)
{
	CMessage* self = (CMessage*)tolua_tousertype_dynamic(L, 1, 0, "CMessage");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sourceId'", NULL);
	self->m_sourceId = tolua_setter_tointeger<int>(L, "m_sourceId");
	return 0;
}

static int tolua_get_CMessage_reference_m_sourceId(lua_State* L)
{
	CMessage* self = (CMessage*)tolua_tousertype_dynamic(L, 1, 0, "CMessage");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sourceId'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sourceId, "Primitive<int>");
	return 1;
}

static int tolua_function_CMessage_virtual_VirtualDestruct(lua_State* L)
{
	CMessage* self = (CMessage*)tolua_tousertype_dynamic(L, 1, 0, "CMessage");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_VirtualDestruct'", NULL);
	self->virtual_VirtualDestruct();
	return 0;
}

static int tolua_function_CMessage_virtual_GetCommType(lua_State* L)
{
	CMessage* self = (CMessage*)tolua_tousertype_dynamic(L, 1, 0, "CMessage");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetCommType'", NULL);
	short returnVal = self->virtual_GetCommType();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CMessage_virtual_GetMsgType(lua_State* L)
{
	CMessage* self = (CMessage*)tolua_tousertype_dynamic(L, 1, 0, "CMessage");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetMsgType'", NULL);
	byte returnVal = self->virtual_GetMsgType();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CMessage_virtual_GetMsgSubType(lua_State* L)
{
	CMessage* self = (CMessage*)tolua_tousertype_dynamic(L, 1, 0, "CMessage");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetMsgSubType'", NULL);
	byte returnVal = self->virtual_GetMsgSubType();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CMessage_virtual_MarshalMessage(lua_State* L)
{
	CMessage* self = (CMessage*)tolua_tousertype_dynamic(L, 1, 0, "CMessage");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_MarshalMessage'", NULL);
	self->virtual_MarshalMessage((byte**)tolua_tousertype_dynamic(L, 2, 0, "Pointer<byte>"), (uint*)tolua_tousertype_dynamic(L, 3, 0, "Primitive<uint>"));
	return 0;
}

static int tolua_function_CMessage_virtual_UnmarshalMessage(lua_State* L)
{
	CMessage* self = (CMessage*)tolua_tousertype_dynamic(L, 1, 0, "CMessage");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_UnmarshalMessage'", NULL);
	int returnVal = self->virtual_UnmarshalMessage((byte*)tolua_tousertype_dynamic(L, 2, 0, "Primitive<byte>"), tolua_function_tointeger<uint>(L, 3, "virtual_UnmarshalMessage"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CMessage_virtual_Run(lua_State* L)
{
	CMessage* self = (CMessage*)tolua_tousertype_dynamic(L, 1, 0, "CMessage");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Run'", NULL);
	self->virtual_Run();
	return 0;
}

static int tolua_get_CMessage__vtbl_VirtualDestruct(lua_State* L)
{
	return 1;
}

static int tolua_set_CMessage__vtbl_VirtualDestruct(lua_State* L)
{
	return 0;
}

static int tolua_get_CMessage__vtbl_reference_VirtualDestruct(lua_State* L)
{
	return 1;
}

static int tolua_get_CMessage__vtbl_GetCommType(lua_State* L)
{
	return 1;
}

static int tolua_set_CMessage__vtbl_GetCommType(lua_State* L)
{
	return 0;
}

static int tolua_get_CMessage__vtbl_reference_GetCommType(lua_State* L)
{
	return 1;
}

static int tolua_get_CMessage__vtbl_GetMsgType(lua_State* L)
{
	return 1;
}

static int tolua_set_CMessage__vtbl_GetMsgType(lua_State* L)
{
	return 0;
}

static int tolua_get_CMessage__vtbl_reference_GetMsgType(lua_State* L)
{
	return 1;
}

static int tolua_get_CMessage__vtbl_GetMsgSubType(lua_State* L)
{
	return 1;
}

static int tolua_set_CMessage__vtbl_GetMsgSubType(lua_State* L)
{
	return 0;
}

static int tolua_get_CMessage__vtbl_reference_GetMsgSubType(lua_State* L)
{
	return 1;
}

static int tolua_get_CMessage__vtbl_MarshalMessage(lua_State* L)
{
	return 1;
}

static int tolua_set_CMessage__vtbl_MarshalMessage(lua_State* L)
{
	return 0;
}

static int tolua_get_CMessage__vtbl_reference_MarshalMessage(lua_State* L)
{
	return 1;
}

static int tolua_get_CMessage__vtbl_UnmarshalMessage(lua_State* L)
{
	return 1;
}

static int tolua_set_CMessage__vtbl_UnmarshalMessage(lua_State* L)
{
	return 0;
}

static int tolua_get_CMessage__vtbl_reference_UnmarshalMessage(lua_State* L)
{
	return 1;
}

static int tolua_get_CMessage__vtbl_Run(lua_State* L)
{
	return 1;
}

static int tolua_set_CMessage__vtbl_Run(lua_State* L)
{
	return 0;
}

static int tolua_get_CMessage__vtbl_reference_Run(lua_State* L)
{
	return 1;
}

static int tolua_get_CMessageVisualEffect_m_nEffectType(lua_State* L)
{
	CMessageVisualEffect* self = (CMessageVisualEffect*)tolua_tousertype_dynamic(L, 1, 0, "CMessageVisualEffect");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nEffectType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nEffectType);
	return 1;
}

static int tolua_set_CMessageVisualEffect_m_nEffectType(lua_State* L)
{
	CMessageVisualEffect* self = (CMessageVisualEffect*)tolua_tousertype_dynamic(L, 1, 0, "CMessageVisualEffect");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nEffectType'", NULL);
	self->m_nEffectType = tolua_setter_tointeger<byte>(L, "m_nEffectType");
	return 0;
}

static int tolua_get_CMessageVisualEffect_reference_m_nEffectType(lua_State* L)
{
	CMessageVisualEffect* self = (CMessageVisualEffect*)tolua_tousertype_dynamic(L, 1, 0, "CMessageVisualEffect");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nEffectType'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nEffectType, "Primitive<byte>");
	return 1;
}

static int tolua_get_CMessageVisualEffect_m_nEffectProperty(lua_State* L)
{
	CMessageVisualEffect* self = (CMessageVisualEffect*)tolua_tousertype_dynamic(L, 1, 0, "CMessageVisualEffect");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nEffectProperty'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nEffectProperty);
	return 1;
}

static int tolua_set_CMessageVisualEffect_m_nEffectProperty(lua_State* L)
{
	CMessageVisualEffect* self = (CMessageVisualEffect*)tolua_tousertype_dynamic(L, 1, 0, "CMessageVisualEffect");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nEffectProperty'", NULL);
	self->m_nEffectProperty = tolua_setter_tointeger<byte>(L, "m_nEffectProperty");
	return 0;
}

static int tolua_get_CMessageVisualEffect_reference_m_nEffectProperty(lua_State* L)
{
	CMessageVisualEffect* self = (CMessageVisualEffect*)tolua_tousertype_dynamic(L, 1, 0, "CMessageVisualEffect");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nEffectProperty'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nEffectProperty, "Primitive<byte>");
	return 1;
}

static int tolua_get_CMessageUnknown_m_entryNum(lua_State* L)
{
	CMessageUnknown* self = (CMessageUnknown*)tolua_tousertype_dynamic(L, 1, 0, "CMessageUnknown");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_entryNum'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_entryNum);
	return 1;
}

static int tolua_set_CMessageUnknown_m_entryNum(lua_State* L)
{
	CMessageUnknown* self = (CMessageUnknown*)tolua_tousertype_dynamic(L, 1, 0, "CMessageUnknown");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_entryNum'", NULL);
	self->m_entryNum = tolua_setter_tointeger<uint>(L, "m_entryNum");
	return 0;
}

static int tolua_get_CMessageUnknown_reference_m_entryNum(lua_State* L)
{
	CMessageUnknown* self = (CMessageUnknown*)tolua_tousertype_dynamic(L, 1, 0, "CMessageUnknown");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_entryNum'", NULL);
	tolua_pushusertype(L, (void*)&self->m_entryNum, "Primitive<uint>");
	return 1;
}

static int tolua_get_CMessageAutoScroll_m_sArea(lua_State* L)
{
	CMessageAutoScroll* self = (CMessageAutoScroll*)tolua_tousertype_dynamic(L, 1, 0, "CMessageAutoScroll");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sArea'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sArea, "CString");
	return 1;
}

static int tolua_get_CMessageAutoScroll_m_startPos(lua_State* L)
{
	CMessageAutoScroll* self = (CMessageAutoScroll*)tolua_tousertype_dynamic(L, 1, 0, "CMessageAutoScroll");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_startPos'", NULL);
	tolua_pushusertype(L, (void*)&self->m_startPos, "CPoint");
	return 1;
}

static int tolua_get_CMessageAutoScroll_m_destPos(lua_State* L)
{
	CMessageAutoScroll* self = (CMessageAutoScroll*)tolua_tousertype_dynamic(L, 1, 0, "CMessageAutoScroll");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_destPos'", NULL);
	tolua_pushusertype(L, (void*)&self->m_destPos, "CPoint");
	return 1;
}

static int tolua_get_CMessageAutoScroll_m_nSpeed(lua_State* L)
{
	CMessageAutoScroll* self = (CMessageAutoScroll*)tolua_tousertype_dynamic(L, 1, 0, "CMessageAutoScroll");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nSpeed'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nSpeed);
	return 1;
}

static int tolua_set_CMessageAutoScroll_m_nSpeed(lua_State* L)
{
	CMessageAutoScroll* self = (CMessageAutoScroll*)tolua_tousertype_dynamic(L, 1, 0, "CMessageAutoScroll");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nSpeed'", NULL);
	self->m_nSpeed = tolua_setter_tointeger<byte>(L, "m_nSpeed");
	return 0;
}

static int tolua_get_CMessageAutoScroll_reference_m_nSpeed(lua_State* L)
{
	CMessageAutoScroll* self = (CMessageAutoScroll*)tolua_tousertype_dynamic(L, 1, 0, "CMessageAutoScroll");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nSpeed'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nSpeed, "Primitive<byte>");
	return 1;
}

static int tolua_get_CMessageAddEffect_m_effect(lua_State* L)
{
	CMessageAddEffect* self = (CMessageAddEffect*)tolua_tousertype_dynamic(L, 1, 0, "CMessageAddEffect");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effect'", NULL);
	tolua_pushusertype(L, (void*)self->m_effect, "CGameEffect");
	return 1;
}

static int tolua_set_CMessageAddEffect_m_effect(lua_State* L)
{
	CMessageAddEffect* self = (CMessageAddEffect*)tolua_tousertype_dynamic(L, 1, 0, "CMessageAddEffect");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effect'", NULL);
	self->m_effect = (CGameEffect*)tolua_tousertype_dynamic(L, 2, 0, "CGameEffect");
	return 0;
}

static int tolua_get_CMessageAddEffect_reference_m_effect(lua_State* L)
{
	CMessageAddEffect* self = (CMessageAddEffect*)tolua_tousertype_dynamic(L, 1, 0, "CMessageAddEffect");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effect'", NULL);
	tolua_pushusertype(L, (void*)&self->m_effect, "Pointer<CGameEffect>");
	return 1;
}

static int tolua_get_CInfCursor_m_nCurrentCursor(lua_State* L)
{
	CInfCursor* self = (CInfCursor*)tolua_tousertype_dynamic(L, 1, 0, "CInfCursor");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentCursor'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCurrentCursor);
	return 1;
}

static int tolua_set_CInfCursor_m_nCurrentCursor(lua_State* L)
{
	CInfCursor* self = (CInfCursor*)tolua_tousertype_dynamic(L, 1, 0, "CInfCursor");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentCursor'", NULL);
	self->m_nCurrentCursor = tolua_setter_tointeger<int>(L, "m_nCurrentCursor");
	return 0;
}

static int tolua_get_CInfCursor_reference_m_nCurrentCursor(lua_State* L)
{
	CInfCursor* self = (CInfCursor*)tolua_tousertype_dynamic(L, 1, 0, "CInfCursor");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentCursor'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCurrentCursor, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfCursor_m_nDirection(lua_State* L)
{
	CInfCursor* self = (CInfCursor*)tolua_tousertype_dynamic(L, 1, 0, "CInfCursor");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nDirection'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nDirection);
	return 1;
}

static int tolua_set_CInfCursor_m_nDirection(lua_State* L)
{
	CInfCursor* self = (CInfCursor*)tolua_tousertype_dynamic(L, 1, 0, "CInfCursor");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nDirection'", NULL);
	self->m_nDirection = tolua_setter_tointeger<int>(L, "m_nDirection");
	return 0;
}

static int tolua_get_CInfCursor_reference_m_nDirection(lua_State* L)
{
	CInfCursor* self = (CInfCursor*)tolua_tousertype_dynamic(L, 1, 0, "CInfCursor");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nDirection'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nDirection, "Primitive<int>");
	return 1;
}

static int tolua_function_CInfCursor_SetCursor(lua_State* L)
{
	CInfCursor* self = (CInfCursor*)tolua_tousertype_dynamic(L, 1, 0, "CInfCursor");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'SetCursor'", NULL);
	self->SetCursor(tolua_function_tointeger<int>(L, 2, "SetCursor"), tolua_function_tointeger<byte>(L, 3, "SetCursor"));
	return 0;
}

static int tolua_function_CGameAnimationType_virtual_CalculateFxRect(lua_State* L)
{
	CGameAnimationType* self = (CGameAnimationType*)tolua_tousertype_dynamic(L, 1, 0, "CGameAnimationType");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_CalculateFxRect'", NULL);
	self->virtual_CalculateFxRect();
	return 0;
}

static int tolua_function_CGameAnimationType_virtual_Render(lua_State* L)
{
	CGameAnimationType* self = (CGameAnimationType*)tolua_tousertype_dynamic(L, 1, 0, "CGameAnimationType");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Render'", NULL);
	self->virtual_Render((CInfinity*)tolua_tousertype_dynamic(L, 2, 0, "CInfinity"), (CVidMode*)tolua_tousertype_dynamic(L, 3, 0, "CVidMode"), tolua_function_tointeger<int>(L, 4, "virtual_Render"), (CRect*)tolua_tousertype_dynamic(L, 5, 0, "CRect"), (CPoint*)tolua_tousertype_dynamic(L, 6, 0, "CPoint"), (CPoint*)tolua_tousertype_dynamic(L, 7, 0, "CPoint"), tolua_function_tointeger<uint>(L, 8, "virtual_Render"), tolua_function_tointeger<uint>(L, 9, "virtual_Render"), (CRect*)tolua_tousertype_dynamic(L, 10, 0, "CRect"), tolua_function_tointeger<byte>(L, 11, "virtual_Render"), tolua_function_tointeger<int>(L, 12, "virtual_Render"), tolua_function_tointeger<int>(L, 13, "virtual_Render"), tolua_function_tointeger<byte>(L, 14, "virtual_Render"));
	return 0;
}

static int tolua_get_CGameAnimationType__vtbl_CalculateFxRect(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameAnimationType__vtbl_CalculateFxRect(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameAnimationType__vtbl_reference_CalculateFxRect(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameAnimationType__vtbl_Render(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameAnimationType__vtbl_Render(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameAnimationType__vtbl_reference_Render(lua_State* L)
{
	return 1;
}

static int tolua_get_CAIGroup_m_groupId(lua_State* L)
{
	CAIGroup* self = (CAIGroup*)tolua_tousertype_dynamic(L, 1, 0, "CAIGroup");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_groupId'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_groupId);
	return 1;
}

static int tolua_set_CAIGroup_m_groupId(lua_State* L)
{
	CAIGroup* self = (CAIGroup*)tolua_tousertype_dynamic(L, 1, 0, "CAIGroup");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_groupId'", NULL);
	self->m_groupId = tolua_setter_tointeger<short>(L, "m_groupId");
	return 0;
}

static int tolua_get_CAIGroup_reference_m_groupId(lua_State* L)
{
	CAIGroup* self = (CAIGroup*)tolua_tousertype_dynamic(L, 1, 0, "CAIGroup");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_groupId'", NULL);
	tolua_pushusertype(L, (void*)&self->m_groupId, "Primitive<short>");
	return 1;
}

static int tolua_get_CAIGroup_m_groupChanged(lua_State* L)
{
	CAIGroup* self = (CAIGroup*)tolua_tousertype_dynamic(L, 1, 0, "CAIGroup");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_groupChanged'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_groupChanged);
	return 1;
}

static int tolua_set_CAIGroup_m_groupChanged(lua_State* L)
{
	CAIGroup* self = (CAIGroup*)tolua_tousertype_dynamic(L, 1, 0, "CAIGroup");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_groupChanged'", NULL);
	self->m_groupChanged = tolua_setter_tointeger<int>(L, "m_groupChanged");
	return 0;
}

static int tolua_get_CAIGroup_reference_m_groupChanged(lua_State* L)
{
	CAIGroup* self = (CAIGroup*)tolua_tousertype_dynamic(L, 1, 0, "CAIGroup");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_groupChanged'", NULL);
	tolua_pushusertype(L, (void*)&self->m_groupChanged, "Primitive<int>");
	return 1;
}

static int tolua_get_CAIGroup_m_memberList(lua_State* L)
{
	CAIGroup* self = (CAIGroup*)tolua_tousertype_dynamic(L, 1, 0, "CAIGroup");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_memberList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_memberList, "CTypedPtrList<CPtrList,long>");
	return 1;
}

static int tolua_function_CAIGroup_GroupCancelMove(lua_State* L)
{
	CAIGroup* self = (CAIGroup*)tolua_tousertype_dynamic(L, 1, 0, "CAIGroup");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'GroupCancelMove'", NULL);
	self->GroupCancelMove();
	return 0;
}

static int tolua_function_CAIGroup_GroupDrawMove(lua_State* L)
{
	CAIGroup* self = (CAIGroup*)tolua_tousertype_dynamic(L, 1, 0, "CAIGroup");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'GroupDrawMove'", NULL);
	self->GroupDrawMove(tolua_function_tointeger<int>(L, 2, "GroupDrawMove"), tolua_function_tointeger<int>(L, 3, "GroupDrawMove"), tolua_function_tointeger<short>(L, 4, "GroupDrawMove"), tolua_function_tointeger<int>(L, 5, "GroupDrawMove"), tolua_function_tointeger<int>(L, 6, "GroupDrawMove"));
	return 0;
}

static int tolua_function_Array_char_8__get(lua_State* L)
{
	Array<char,8>* self = (Array<char,8>*)tolua_tousertype_dynamic(L, 1, 0, "Array<char,8>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	char returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	lua_pushlstring(L, (const char*)&returnVal, 1);
	return 1;
}

static int tolua_function_Array_char_8__set(lua_State* L)
{
	Array<char,8>* self = (Array<char,8>*)tolua_tousertype_dynamic(L, 1, 0, "Array<char,8>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), tolua_function_tochar(L, 3, "set"));
	return 0;
}

static int tolua_function_Array_DWORD_10__get(lua_State* L)
{
	Array<DWORD,10>* self = (Array<DWORD,10>*)tolua_tousertype_dynamic(L, 1, 0, "Array<DWORD,10>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	DWORD returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Array_DWORD_10__getReference(lua_State* L)
{
	Array<DWORD,10>* self = (Array<DWORD,10>*)tolua_tousertype_dynamic(L, 1, 0, "Array<DWORD,10>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	DWORD* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Primitive<DWORD>");
	return 1;
}

static int tolua_function_Array_DWORD_10__set(lua_State* L)
{
	Array<DWORD,10>* self = (Array<DWORD,10>*)tolua_tousertype_dynamic(L, 1, 0, "Array<DWORD,10>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), tolua_function_tointeger<DWORD>(L, 3, "set"));
	return 0;
}

static int tolua_function_Array_CInfTileSet__5__get(lua_State* L)
{
	Array<CInfTileSet*,5>* self = (Array<CInfTileSet*,5>*)tolua_tousertype_dynamic(L, 1, 0, "Array<CInfTileSet*,5>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	CInfTileSet* returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	tolua_pushusertype(L, (void*)returnVal, "CInfTileSet");
	return 1;
}

static int tolua_function_Array_CInfTileSet__5__getReference(lua_State* L)
{
	Array<CInfTileSet*,5>* self = (Array<CInfTileSet*,5>*)tolua_tousertype_dynamic(L, 1, 0, "Array<CInfTileSet*,5>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CInfTileSet** returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Pointer<CInfTileSet>");
	return 1;
}

static int tolua_function_Array_CInfTileSet__5__set(lua_State* L)
{
	Array<CInfTileSet*,5>* self = (Array<CInfTileSet*,5>*)tolua_tousertype_dynamic(L, 1, 0, "Array<CInfTileSet*,5>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), (CInfTileSet*)tolua_tousertype_dynamic(L, 3, 0, "CInfTileSet"));
	return 0;
}

static int tolua_function_Array_tagRGBQUAD_256__getReference(lua_State* L)
{
	Array<tagRGBQUAD,256>* self = (Array<tagRGBQUAD,256>*)tolua_tousertype_dynamic(L, 1, 0, "Array<tagRGBQUAD,256>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	tagRGBQUAD* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "tagRGBQUAD");
	return 1;
}

static int tolua_function_Array_tagRGBQUAD_256__set(lua_State* L)
{
	Array<tagRGBQUAD,256>* self = (Array<tagRGBQUAD,256>*)tolua_tousertype_dynamic(L, 1, 0, "Array<tagRGBQUAD,256>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(tagRGBQUAD*)tolua_tousertype_dynamic(L, 3, 0, "tagRGBQUAD"));
	return 0;
}

static int tolua_function_Array_char_32__get(lua_State* L)
{
	Array<char,32>* self = (Array<char,32>*)tolua_tousertype_dynamic(L, 1, 0, "Array<char,32>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	char returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	lua_pushlstring(L, (const char*)&returnVal, 1);
	return 1;
}

static int tolua_function_Array_char_32__set(lua_State* L)
{
	Array<char,32>* self = (Array<char,32>*)tolua_tousertype_dynamic(L, 1, 0, "Array<char,32>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), tolua_function_tochar(L, 3, "set"));
	return 0;
}

static int tolua_function_Array_byte_5__get(lua_State* L)
{
	Array<byte,5>* self = (Array<byte,5>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,5>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	byte returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Array_byte_5__getReference(lua_State* L)
{
	Array<byte,5>* self = (Array<byte,5>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,5>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	byte* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Primitive<byte>");
	return 1;
}

static int tolua_function_Array_byte_5__set(lua_State* L)
{
	Array<byte,5>* self = (Array<byte,5>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,5>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), tolua_function_tointeger<byte>(L, 3, "set"));
	return 0;
}

static int tolua_function_Array_byte_16__get(lua_State* L)
{
	Array<byte,16>* self = (Array<byte,16>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,16>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	byte returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Array_byte_16__getReference(lua_State* L)
{
	Array<byte,16>* self = (Array<byte,16>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,16>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	byte* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Primitive<byte>");
	return 1;
}

static int tolua_function_Array_byte_16__set(lua_State* L)
{
	Array<byte,16>* self = (Array<byte,16>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,16>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), tolua_function_tointeger<byte>(L, 3, "set"));
	return 0;
}

static int tolua_function_Array_uint_15__get(lua_State* L)
{
	Array<uint,15>* self = (Array<uint,15>*)tolua_tousertype_dynamic(L, 1, 0, "Array<uint,15>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	uint returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Array_uint_15__getReference(lua_State* L)
{
	Array<uint,15>* self = (Array<uint,15>*)tolua_tousertype_dynamic(L, 1, 0, "Array<uint,15>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	uint* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Primitive<uint>");
	return 1;
}

static int tolua_function_Array_uint_15__set(lua_State* L)
{
	Array<uint,15>* self = (Array<uint,15>*)tolua_tousertype_dynamic(L, 1, 0, "Array<uint,15>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), tolua_function_tointeger<uint>(L, 3, "set"));
	return 0;
}

static int tolua_function_Array_CGameArea__12__get(lua_State* L)
{
	Array<CGameArea*,12>* self = (Array<CGameArea*,12>*)tolua_tousertype_dynamic(L, 1, 0, "Array<CGameArea*,12>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	CGameArea* returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	tolua_pushusertype(L, (void*)returnVal, "CGameArea");
	return 1;
}

static int tolua_function_Array_CGameArea__12__getReference(lua_State* L)
{
	Array<CGameArea*,12>* self = (Array<CGameArea*,12>*)tolua_tousertype_dynamic(L, 1, 0, "Array<CGameArea*,12>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CGameArea** returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Pointer<CGameArea>");
	return 1;
}

static int tolua_function_Array_CGameArea__12__set(lua_State* L)
{
	Array<CGameArea*,12>* self = (Array<CGameArea*,12>*)tolua_tousertype_dynamic(L, 1, 0, "Array<CGameArea*,12>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), (CGameArea*)tolua_tousertype_dynamic(L, 3, 0, "CGameArea"));
	return 0;
}

static int tolua_function_Array_int_6__get(lua_State* L)
{
	Array<int,6>* self = (Array<int,6>*)tolua_tousertype_dynamic(L, 1, 0, "Array<int,6>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	int returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Array_int_6__getReference(lua_State* L)
{
	Array<int,6>* self = (Array<int,6>*)tolua_tousertype_dynamic(L, 1, 0, "Array<int,6>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	int* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Primitive<int>");
	return 1;
}

static int tolua_function_Array_int_6__set(lua_State* L)
{
	Array<int,6>* self = (Array<int,6>*)tolua_tousertype_dynamic(L, 1, 0, "Array<int,6>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), tolua_function_tointeger<int>(L, 3, "set"));
	return 0;
}

static int tolua_function_Array_byte_168__get(lua_State* L)
{
	Array<byte,168>* self = (Array<byte,168>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,168>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	byte returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Array_byte_168__getReference(lua_State* L)
{
	Array<byte,168>* self = (Array<byte,168>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,168>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	byte* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Primitive<byte>");
	return 1;
}

static int tolua_function_Array_byte_168__set(lua_State* L)
{
	Array<byte,168>* self = (Array<byte,168>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,168>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), tolua_function_tointeger<byte>(L, 3, "set"));
	return 0;
}

static int tolua_function_Array_CVidMode__4__get(lua_State* L)
{
	Array<CVidMode*,4>* self = (Array<CVidMode*,4>*)tolua_tousertype_dynamic(L, 1, 0, "Array<CVidMode*,4>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	CVidMode* returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	tolua_pushusertype(L, (void*)returnVal, "CVidMode");
	return 1;
}

static int tolua_function_Array_CVidMode__4__getReference(lua_State* L)
{
	Array<CVidMode*,4>* self = (Array<CVidMode*,4>*)tolua_tousertype_dynamic(L, 1, 0, "Array<CVidMode*,4>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CVidMode** returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Pointer<CVidMode>");
	return 1;
}

static int tolua_function_Array_CVidMode__4__set(lua_State* L)
{
	Array<CVidMode*,4>* self = (Array<CVidMode*,4>*)tolua_tousertype_dynamic(L, 1, 0, "Array<CVidMode*,4>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), (CVidMode*)tolua_tousertype_dynamic(L, 3, 0, "CVidMode"));
	return 0;
}

static int tolua_function_Array_CUIControlButtonMapEntry_1__getReference(lua_State* L)
{
	Array<CUIControlButtonMapEntry,1>* self = (Array<CUIControlButtonMapEntry,1>*)tolua_tousertype_dynamic(L, 1, 0, "Array<CUIControlButtonMapEntry,1>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	CUIControlButtonMapEntry* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "CUIControlButtonMapEntry");
	return 1;
}

static int tolua_function_Array_CUIControlButtonMapEntry_1__set(lua_State* L)
{
	Array<CUIControlButtonMapEntry,1>* self = (Array<CUIControlButtonMapEntry,1>*)tolua_tousertype_dynamic(L, 1, 0, "Array<CUIControlButtonMapEntry,1>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), *(CUIControlButtonMapEntry*)tolua_tousertype_dynamic(L, 3, 0, "CUIControlButtonMapEntry"));
	return 0;
}

static int tolua_function_Array_int_12__get(lua_State* L)
{
	Array<int,12>* self = (Array<int,12>*)tolua_tousertype_dynamic(L, 1, 0, "Array<int,12>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	int returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Array_int_12__getReference(lua_State* L)
{
	Array<int,12>* self = (Array<int,12>*)tolua_tousertype_dynamic(L, 1, 0, "Array<int,12>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	int* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Primitive<int>");
	return 1;
}

static int tolua_function_Array_int_12__set(lua_State* L)
{
	Array<int,12>* self = (Array<int,12>*)tolua_tousertype_dynamic(L, 1, 0, "Array<int,12>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), tolua_function_tointeger<int>(L, 3, "set"));
	return 0;
}

static int tolua_function_Array_byte_10__get(lua_State* L)
{
	Array<byte,10>* self = (Array<byte,10>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,10>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	byte returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Array_byte_10__getReference(lua_State* L)
{
	Array<byte,10>* self = (Array<byte,10>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,10>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	byte* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Primitive<byte>");
	return 1;
}

static int tolua_function_Array_byte_10__set(lua_State* L)
{
	Array<byte,10>* self = (Array<byte,10>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,10>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), tolua_function_tointeger<byte>(L, 3, "set"));
	return 0;
}

static int tolua_function_Array_byte_7__get(lua_State* L)
{
	Array<byte,7>* self = (Array<byte,7>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,7>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	byte returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Array_byte_7__getReference(lua_State* L)
{
	Array<byte,7>* self = (Array<byte,7>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,7>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	byte* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Primitive<byte>");
	return 1;
}

static int tolua_function_Array_byte_7__set(lua_State* L)
{
	Array<byte,7>* self = (Array<byte,7>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,7>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), tolua_function_tointeger<byte>(L, 3, "set"));
	return 0;
}

static int tolua_function_Array_byte_3__get(lua_State* L)
{
	Array<byte,3>* self = (Array<byte,3>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,3>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	byte returnVal = self->get(tolua_function_tointeger<size_t>(L, 2, "get"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_Array_byte_3__getReference(lua_State* L)
{
	Array<byte,3>* self = (Array<byte,3>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,3>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'getReference'", NULL);
	byte* returnVal = self->getReference(tolua_function_tointeger<size_t>(L, 2, "getReference"));
	tolua_pushusertype(L, (void*)returnVal, "Primitive<byte>");
	return 1;
}

static int tolua_function_Array_byte_3__set(lua_State* L)
{
	Array<byte,3>* self = (Array<byte,3>*)tolua_tousertype_dynamic(L, 1, 0, "Array<byte,3>");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tointeger<size_t>(L, 2, "set"), tolua_function_tointeger<byte>(L, 3, "set"));
	return 0;
}

static int tolua_get_CVideo_m_nBitDepth(lua_State* L)
{
	CVideo* self = (CVideo*)tolua_tousertype_dynamic(L, 1, 0, "CVideo");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBitDepth'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nBitDepth);
	return 1;
}

static int tolua_set_CVideo_m_nBitDepth(lua_State* L)
{
	CVideo* self = (CVideo*)tolua_tousertype_dynamic(L, 1, 0, "CVideo");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBitDepth'", NULL);
	self->m_nBitDepth = tolua_setter_tointeger<short>(L, "m_nBitDepth");
	return 0;
}

static int tolua_get_CVideo_reference_m_nBitDepth(lua_State* L)
{
	CVideo* self = (CVideo*)tolua_tousertype_dynamic(L, 1, 0, "CVideo");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBitDepth'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nBitDepth, "Primitive<short>");
	return 1;
}

static int tolua_get_CVideo_m_functions(lua_State* L)
{
	CVideo* self = (CVideo*)tolua_tousertype_dynamic(L, 1, 0, "CVideo");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_functions'", NULL);
	tolua_pushusertype(L, (void*)&self->m_functions, "CVideoFunctions");
	return 1;
}

static int tolua_get_CVideo_m_pDirectDraw(lua_State* L)
{
	CVideo* self = (CVideo*)tolua_tousertype_dynamic(L, 1, 0, "CVideo");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pDirectDraw'", NULL);
	tolua_pushusertype(L, (void*)self->m_pDirectDraw, "IDirectDraw");
	return 1;
}

static int tolua_set_CVideo_m_pDirectDraw(lua_State* L)
{
	CVideo* self = (CVideo*)tolua_tousertype_dynamic(L, 1, 0, "CVideo");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pDirectDraw'", NULL);
	self->m_pDirectDraw = (IDirectDraw*)tolua_tousertype_dynamic(L, 2, 0, "IDirectDraw");
	return 0;
}

static int tolua_get_CVideo_reference_m_pDirectDraw(lua_State* L)
{
	CVideo* self = (CVideo*)tolua_tousertype_dynamic(L, 1, 0, "CVideo");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pDirectDraw'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pDirectDraw, "Pointer<IDirectDraw>");
	return 1;
}

static int tolua_get_CVideo_m_aVidModes(lua_State* L)
{
	CVideo* self = (CVideo*)tolua_tousertype_dynamic(L, 1, 0, "CVideo");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_aVidModes'", NULL);
	tolua_pushusertype(L, (void*)&self->m_aVidModes, "Array<CVidMode*,4>");
	return 1;
}

static int tolua_get_CVideo_m_pActiveVidMode(lua_State* L)
{
	CVideo* self = (CVideo*)tolua_tousertype_dynamic(L, 1, 0, "CVideo");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pActiveVidMode'", NULL);
	tolua_pushusertype(L, (void*)self->m_pActiveVidMode, "CVidMode");
	return 1;
}

static int tolua_set_CVideo_m_pActiveVidMode(lua_State* L)
{
	CVideo* self = (CVideo*)tolua_tousertype_dynamic(L, 1, 0, "CVideo");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pActiveVidMode'", NULL);
	self->m_pActiveVidMode = (CVidMode*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode");
	return 0;
}

static int tolua_get_CVideo_reference_m_pActiveVidMode(lua_State* L)
{
	CVideo* self = (CVideo*)tolua_tousertype_dynamic(L, 1, 0, "CVideo");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pActiveVidMode'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pActiveVidMode, "Pointer<CVidMode>");
	return 1;
}

static int tolua_get_CVideo_m_hWindow(lua_State* L)
{
	CVideo* self = (CVideo*)tolua_tousertype_dynamic(L, 1, 0, "CVideo");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hWindow'", NULL);
	tolua_pushusertype(L, (void*)self->m_hWindow, "HWND");
	return 1;
}

static int tolua_set_CVideo_m_hWindow(lua_State* L)
{
	CVideo* self = (CVideo*)tolua_tousertype_dynamic(L, 1, 0, "CVideo");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hWindow'", NULL);
	self->m_hWindow = (HWND)tolua_tousertype_dynamic(L, 2, 0, "HWND");
	return 0;
}

static int tolua_get_CVideo_reference_m_hWindow(lua_State* L)
{
	CVideo* self = (CVideo*)tolua_tousertype_dynamic(L, 1, 0, "CVideo");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hWindow'", NULL);
	tolua_pushusertype(L, (void*)&self->m_hWindow, "HWND<HWND>");
	return 1;
}

static int tolua_get_CVidPalette_m_pPalette(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPalette'", NULL);
	tolua_pushusertype(L, (void*)self->m_pPalette, "tagRGBQUAD");
	return 1;
}

static int tolua_set_CVidPalette_m_pPalette(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPalette'", NULL);
	self->m_pPalette = (tagRGBQUAD*)tolua_tousertype_dynamic(L, 2, 0, "tagRGBQUAD");
	return 0;
}

static int tolua_get_CVidPalette_reference_m_pPalette(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pPalette'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pPalette, "Pointer<tagRGBQUAD>");
	return 1;
}

static int tolua_get_CVidPalette_m_nEntries(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nEntries'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nEntries);
	return 1;
}

static int tolua_set_CVidPalette_m_nEntries(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nEntries'", NULL);
	self->m_nEntries = tolua_setter_tointeger<int>(L, "m_nEntries");
	return 0;
}

static int tolua_get_CVidPalette_reference_m_nEntries(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nEntries'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nEntries, "Primitive<int>");
	return 1;
}

static int tolua_get_CVidPalette_rgbGlobalTint(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'rgbGlobalTint'", NULL);
	lua_pushinteger(L, (lua_Integer)self->rgbGlobalTint);
	return 1;
}

static int tolua_set_CVidPalette_rgbGlobalTint(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'rgbGlobalTint'", NULL);
	self->rgbGlobalTint = tolua_setter_tointeger<int>(L, "rgbGlobalTint");
	return 0;
}

static int tolua_get_CVidPalette_reference_rgbGlobalTint(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'rgbGlobalTint'", NULL);
	tolua_pushusertype(L, (void*)&self->rgbGlobalTint, "Primitive<int>");
	return 1;
}

static int tolua_get_CVidPalette_m_nType(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nType);
	return 1;
}

static int tolua_set_CVidPalette_m_nType(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nType'", NULL);
	self->m_nType = tolua_setter_tointeger<short>(L, "m_nType");
	return 0;
}

static int tolua_get_CVidPalette_reference_m_nType(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nType'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nType, "Primitive<short>");
	return 1;
}

static int tolua_get_CVidPalette_m_bPaletteOwner(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bPaletteOwner'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bPaletteOwner);
	return 1;
}

static int tolua_set_CVidPalette_m_bPaletteOwner(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bPaletteOwner'", NULL);
	self->m_bPaletteOwner = tolua_setter_tointeger<byte>(L, "m_bPaletteOwner");
	return 0;
}

static int tolua_get_CVidPalette_reference_m_bPaletteOwner(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bPaletteOwner'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bPaletteOwner, "Primitive<byte>");
	return 1;
}

static int tolua_get_CVidPalette_m_nUnknown(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nUnknown'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nUnknown);
	return 1;
}

static int tolua_set_CVidPalette_m_nUnknown(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nUnknown'", NULL);
	self->m_nUnknown = tolua_setter_tointeger<byte>(L, "m_nUnknown");
	return 0;
}

static int tolua_get_CVidPalette_reference_m_nUnknown(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nUnknown'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nUnknown, "Primitive<byte>");
	return 1;
}

static int tolua_get_CVidPalette_m_bSubRangesCalculated(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bSubRangesCalculated'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bSubRangesCalculated);
	return 1;
}

static int tolua_set_CVidPalette_m_bSubRangesCalculated(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bSubRangesCalculated'", NULL);
	self->m_bSubRangesCalculated = tolua_setter_tointeger<int>(L, "m_bSubRangesCalculated");
	return 0;
}

static int tolua_get_CVidPalette_reference_m_bSubRangesCalculated(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bSubRangesCalculated'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bSubRangesCalculated, "Primitive<int>");
	return 1;
}

static int tolua_get_CVidPalette_m_rangeColors(lua_State* L)
{
	CVidPalette* self = (CVidPalette*)tolua_tousertype_dynamic(L, 1, 0, "CVidPalette");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rangeColors'", NULL);
	tolua_pushusertype(L, (void*)&self->m_rangeColors, "Array<byte,7>");
	return 1;
}

static int tolua_get_CVidImage_m_cPalette(lua_State* L)
{
	CVidImage* self = (CVidImage*)tolua_tousertype_dynamic(L, 1, 0, "CVidImage");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cPalette'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cPalette, "CVidPalette");
	return 1;
}

static int tolua_get_CResRef_m_resRef(lua_State* L)
{
	CResRef* self = (CResRef*)tolua_tousertype_dynamic(L, 1, 0, "CResRef");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_resRef'", NULL);
	tolua_pushusertype(L, (void*)&self->m_resRef, "Array<char,8>");
	return 1;
}

static int tolua_function_CResRef_get(lua_State* L)
{
	CResRef* self = (CResRef*)tolua_tousertype_dynamic(L, 1, 0, "CResRef");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'get'", NULL);
	self->get(L);
	return 1;
}

static int tolua_function_CResRef_set(lua_State* L)
{
	CResRef* self = (CResRef*)tolua_tousertype_dynamic(L, 1, 0, "CResRef");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'set'", NULL);
	self->set(tolua_function_tostring(L, 2, "set"));
	return 0;
}

static int tolua_get_CResHelper_CResMosaic_1004__m_bAutoRequested(lua_State* L)
{
	CResHelper<CResMosaic,1004>* self = (CResHelper<CResMosaic,1004>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResMosaic,1004>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bAutoRequested);
	return 1;
}

static int tolua_set_CResHelper_CResMosaic_1004__m_bAutoRequested(lua_State* L)
{
	CResHelper<CResMosaic,1004>* self = (CResHelper<CResMosaic,1004>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResMosaic,1004>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	self->m_bAutoRequested = tolua_setter_tointeger<int>(L, "m_bAutoRequested");
	return 0;
}

static int tolua_get_CResHelper_CResMosaic_1004__reference_m_bAutoRequested(lua_State* L)
{
	CResHelper<CResMosaic,1004>* self = (CResHelper<CResMosaic,1004>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResMosaic,1004>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bAutoRequested, "Primitive<int>");
	return 1;
}

static int tolua_get_CResHelper_CResMosaic_1004__m_pRes(lua_State* L)
{
	CResHelper<CResMosaic,1004>* self = (CResHelper<CResMosaic,1004>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResMosaic,1004>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	tolua_pushusertype(L, (void*)self->m_pRes, "CResMosaic");
	return 1;
}

static int tolua_set_CResHelper_CResMosaic_1004__m_pRes(lua_State* L)
{
	CResHelper<CResMosaic,1004>* self = (CResHelper<CResMosaic,1004>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResMosaic,1004>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	self->m_pRes = (CResMosaic*)tolua_tousertype_dynamic(L, 2, 0, "CResMosaic");
	return 0;
}

static int tolua_get_CResHelper_CResMosaic_1004__reference_m_pRes(lua_State* L)
{
	CResHelper<CResMosaic,1004>* self = (CResHelper<CResMosaic,1004>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResMosaic,1004>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pRes, "Pointer<CResMosaic>");
	return 1;
}

static int tolua_get_CResHelper_CResMosaic_1004__m_cResRef(lua_State* L)
{
	CResHelper<CResMosaic,1004>* self = (CResHelper<CResMosaic,1004>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResMosaic,1004>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cResRef'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cResRef, "CResRef");
	return 1;
}

static int tolua_get_CResHelper_CResText_1012__m_bAutoRequested(lua_State* L)
{
	CResHelper<CResText,1012>* self = (CResHelper<CResText,1012>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResText,1012>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bAutoRequested);
	return 1;
}

static int tolua_set_CResHelper_CResText_1012__m_bAutoRequested(lua_State* L)
{
	CResHelper<CResText,1012>* self = (CResHelper<CResText,1012>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResText,1012>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	self->m_bAutoRequested = tolua_setter_tointeger<int>(L, "m_bAutoRequested");
	return 0;
}

static int tolua_get_CResHelper_CResText_1012__reference_m_bAutoRequested(lua_State* L)
{
	CResHelper<CResText,1012>* self = (CResHelper<CResText,1012>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResText,1012>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bAutoRequested, "Primitive<int>");
	return 1;
}

static int tolua_get_CResHelper_CResText_1012__m_pRes(lua_State* L)
{
	CResHelper<CResText,1012>* self = (CResHelper<CResText,1012>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResText,1012>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	tolua_pushusertype(L, (void*)self->m_pRes, "CResText");
	return 1;
}

static int tolua_set_CResHelper_CResText_1012__m_pRes(lua_State* L)
{
	CResHelper<CResText,1012>* self = (CResHelper<CResText,1012>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResText,1012>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	self->m_pRes = (CResText*)tolua_tousertype_dynamic(L, 2, 0, "CResText");
	return 0;
}

static int tolua_get_CResHelper_CResText_1012__reference_m_pRes(lua_State* L)
{
	CResHelper<CResText,1012>* self = (CResHelper<CResText,1012>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResText,1012>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pRes, "Pointer<CResText>");
	return 1;
}

static int tolua_get_CResHelper_CResText_1012__m_cResRef(lua_State* L)
{
	CResHelper<CResText,1012>* self = (CResHelper<CResText,1012>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResText,1012>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cResRef'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cResRef, "CResRef");
	return 1;
}

static int tolua_get_CResHelper_CResCell_1000__m_bAutoRequested(lua_State* L)
{
	CResHelper<CResCell,1000>* self = (CResHelper<CResCell,1000>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResCell,1000>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bAutoRequested);
	return 1;
}

static int tolua_set_CResHelper_CResCell_1000__m_bAutoRequested(lua_State* L)
{
	CResHelper<CResCell,1000>* self = (CResHelper<CResCell,1000>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResCell,1000>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	self->m_bAutoRequested = tolua_setter_tointeger<int>(L, "m_bAutoRequested");
	return 0;
}

static int tolua_get_CResHelper_CResCell_1000__reference_m_bAutoRequested(lua_State* L)
{
	CResHelper<CResCell,1000>* self = (CResHelper<CResCell,1000>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResCell,1000>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bAutoRequested, "Primitive<int>");
	return 1;
}

static int tolua_get_CResHelper_CResCell_1000__m_pRes(lua_State* L)
{
	CResHelper<CResCell,1000>* self = (CResHelper<CResCell,1000>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResCell,1000>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	tolua_pushusertype(L, (void*)self->m_pRes, "CResCell");
	return 1;
}

static int tolua_set_CResHelper_CResCell_1000__m_pRes(lua_State* L)
{
	CResHelper<CResCell,1000>* self = (CResHelper<CResCell,1000>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResCell,1000>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	self->m_pRes = (CResCell*)tolua_tousertype_dynamic(L, 2, 0, "CResCell");
	return 0;
}

static int tolua_get_CResHelper_CResCell_1000__reference_m_pRes(lua_State* L)
{
	CResHelper<CResCell,1000>* self = (CResHelper<CResCell,1000>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResCell,1000>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pRes, "Pointer<CResCell>");
	return 1;
}

static int tolua_get_CResHelper_CResCell_1000__m_cResRef(lua_State* L)
{
	CResHelper<CResCell,1000>* self = (CResHelper<CResCell,1000>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResCell,1000>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cResRef'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cResRef, "CResRef");
	return 1;
}

static int tolua_get_CResHelper_CResEffect_1016__m_bAutoRequested(lua_State* L)
{
	CResHelper<CResEffect,1016>* self = (CResHelper<CResEffect,1016>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResEffect,1016>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bAutoRequested);
	return 1;
}

static int tolua_set_CResHelper_CResEffect_1016__m_bAutoRequested(lua_State* L)
{
	CResHelper<CResEffect,1016>* self = (CResHelper<CResEffect,1016>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResEffect,1016>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	self->m_bAutoRequested = tolua_setter_tointeger<int>(L, "m_bAutoRequested");
	return 0;
}

static int tolua_get_CResHelper_CResEffect_1016__reference_m_bAutoRequested(lua_State* L)
{
	CResHelper<CResEffect,1016>* self = (CResHelper<CResEffect,1016>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResEffect,1016>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bAutoRequested, "Primitive<int>");
	return 1;
}

static int tolua_get_CResHelper_CResEffect_1016__m_pRes(lua_State* L)
{
	CResHelper<CResEffect,1016>* self = (CResHelper<CResEffect,1016>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResEffect,1016>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	tolua_pushusertype(L, (void*)self->m_pRes, "CResEffect");
	return 1;
}

static int tolua_set_CResHelper_CResEffect_1016__m_pRes(lua_State* L)
{
	CResHelper<CResEffect,1016>* self = (CResHelper<CResEffect,1016>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResEffect,1016>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	self->m_pRes = (CResEffect*)tolua_tousertype_dynamic(L, 2, 0, "CResEffect");
	return 0;
}

static int tolua_get_CResHelper_CResEffect_1016__reference_m_pRes(lua_State* L)
{
	CResHelper<CResEffect,1016>* self = (CResHelper<CResEffect,1016>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResEffect,1016>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pRes, "Pointer<CResEffect>");
	return 1;
}

static int tolua_get_CResHelper_CResEffect_1016__m_cResRef(lua_State* L)
{
	CResHelper<CResEffect,1016>* self = (CResHelper<CResEffect,1016>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResEffect,1016>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cResRef'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cResRef, "CResRef");
	return 1;
}

static int tolua_get_CResHelper_CResItem_1005__m_bAutoRequested(lua_State* L)
{
	CResHelper<CResItem,1005>* self = (CResHelper<CResItem,1005>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResItem,1005>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bAutoRequested);
	return 1;
}

static int tolua_set_CResHelper_CResItem_1005__m_bAutoRequested(lua_State* L)
{
	CResHelper<CResItem,1005>* self = (CResHelper<CResItem,1005>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResItem,1005>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	self->m_bAutoRequested = tolua_setter_tointeger<int>(L, "m_bAutoRequested");
	return 0;
}

static int tolua_get_CResHelper_CResItem_1005__reference_m_bAutoRequested(lua_State* L)
{
	CResHelper<CResItem,1005>* self = (CResHelper<CResItem,1005>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResItem,1005>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAutoRequested'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bAutoRequested, "Primitive<int>");
	return 1;
}

static int tolua_get_CResHelper_CResItem_1005__m_pRes(lua_State* L)
{
	CResHelper<CResItem,1005>* self = (CResHelper<CResItem,1005>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResItem,1005>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	tolua_pushusertype(L, (void*)self->m_pRes, "CResItem");
	return 1;
}

static int tolua_set_CResHelper_CResItem_1005__m_pRes(lua_State* L)
{
	CResHelper<CResItem,1005>* self = (CResHelper<CResItem,1005>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResItem,1005>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	self->m_pRes = (CResItem*)tolua_tousertype_dynamic(L, 2, 0, "CResItem");
	return 0;
}

static int tolua_get_CResHelper_CResItem_1005__reference_m_pRes(lua_State* L)
{
	CResHelper<CResItem,1005>* self = (CResHelper<CResItem,1005>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResItem,1005>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pRes, "Pointer<CResItem>");
	return 1;
}

static int tolua_get_CResHelper_CResItem_1005__m_cResRef(lua_State* L)
{
	CResHelper<CResItem,1005>* self = (CResHelper<CResItem,1005>*)tolua_tousertype_dynamic(L, 1, 0, "CResHelper<CResItem,1005>");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cResRef'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cResRef, "CResRef");
	return 1;
}

static int tolua_get_CVidCell_m_nCurrentFrame(lua_State* L)
{
	CVidCell* self = (CVidCell*)tolua_tousertype_dynamic(L, 1, 0, "CVidCell");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentFrame'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCurrentFrame);
	return 1;
}

static int tolua_set_CVidCell_m_nCurrentFrame(lua_State* L)
{
	CVidCell* self = (CVidCell*)tolua_tousertype_dynamic(L, 1, 0, "CVidCell");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentFrame'", NULL);
	self->m_nCurrentFrame = tolua_setter_tointeger<short>(L, "m_nCurrentFrame");
	return 0;
}

static int tolua_get_CVidCell_reference_m_nCurrentFrame(lua_State* L)
{
	CVidCell* self = (CVidCell*)tolua_tousertype_dynamic(L, 1, 0, "CVidCell");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentFrame'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCurrentFrame, "Primitive<short>");
	return 1;
}

static int tolua_get_CVidCell_m_nCurrentSequence(lua_State* L)
{
	CVidCell* self = (CVidCell*)tolua_tousertype_dynamic(L, 1, 0, "CVidCell");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentSequence'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCurrentSequence);
	return 1;
}

static int tolua_set_CVidCell_m_nCurrentSequence(lua_State* L)
{
	CVidCell* self = (CVidCell*)tolua_tousertype_dynamic(L, 1, 0, "CVidCell");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentSequence'", NULL);
	self->m_nCurrentSequence = tolua_setter_tointeger<short>(L, "m_nCurrentSequence");
	return 0;
}

static int tolua_get_CVidCell_reference_m_nCurrentSequence(lua_State* L)
{
	CVidCell* self = (CVidCell*)tolua_tousertype_dynamic(L, 1, 0, "CVidCell");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentSequence'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCurrentSequence, "Primitive<short>");
	return 1;
}

static int tolua_get_CVidCell_m_bPaletteChanged(lua_State* L)
{
	CVidCell* self = (CVidCell*)tolua_tousertype_dynamic(L, 1, 0, "CVidCell");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bPaletteChanged'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bPaletteChanged);
	return 1;
}

static int tolua_set_CVidCell_m_bPaletteChanged(lua_State* L)
{
	CVidCell* self = (CVidCell*)tolua_tousertype_dynamic(L, 1, 0, "CVidCell");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bPaletteChanged'", NULL);
	self->m_bPaletteChanged = tolua_setter_tointeger<int>(L, "m_bPaletteChanged");
	return 0;
}

static int tolua_get_CVidCell_reference_m_bPaletteChanged(lua_State* L)
{
	CVidCell* self = (CVidCell*)tolua_tousertype_dynamic(L, 1, 0, "CVidCell");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bPaletteChanged'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bPaletteChanged, "Primitive<int>");
	return 1;
}

static int tolua_get_CVidFont_m_palette(lua_State* L)
{
	CVidFont* self = (CVidFont*)tolua_tousertype_dynamic(L, 1, 0, "CVidFont");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_palette'", NULL);
	tolua_pushusertype(L, (void*)&self->m_palette, "Array<tagRGBQUAD,256>");
	return 1;
}

static int tolua_function_CVidFont_Render(lua_State* L)
{
	CVidFont* self = (CVidFont*)tolua_tousertype_dynamic(L, 1, 0, "CVidFont");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Render'", NULL);
	int returnVal = self->Render((CString*)tolua_tousertype_dynamic(L, 2, 0, "CString"), (void*)tolua_tousertype_dynamic(L, 3, 0, "UnmappedUserType"), tolua_function_tointeger<uint>(L, 4, "Render"), tolua_function_tointeger<int>(L, 5, "Render"), tolua_function_tointeger<int>(L, 6, "Render"), (CRect*)tolua_tousertype_dynamic(L, 7, 0, "CRect"), tolua_function_tointeger<uint>(L, 8, "Render"), tolua_function_tointeger<int>(L, 9, "Render"), tolua_function_tointeger<int>(L, 10, "Render"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_CUIControlButton_m_vidCellButton(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_vidCellButton'", NULL);
	tolua_pushusertype(L, (void*)&self->m_vidCellButton, "CVidCell");
	return 1;
}

static int tolua_get_CUIControlButton_m_nFrameUp(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nFrameUp'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nFrameUp);
	return 1;
}

static int tolua_set_CUIControlButton_m_nFrameUp(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nFrameUp'", NULL);
	self->m_nFrameUp = tolua_setter_tointeger<short>(L, "m_nFrameUp");
	return 0;
}

static int tolua_get_CUIControlButton_reference_m_nFrameUp(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nFrameUp'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nFrameUp, "Primitive<short>");
	return 1;
}

static int tolua_get_CUIControlButton_m_nFrameDisabled(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nFrameDisabled'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nFrameDisabled);
	return 1;
}

static int tolua_set_CUIControlButton_m_nFrameDisabled(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nFrameDisabled'", NULL);
	self->m_nFrameDisabled = tolua_setter_tointeger<short>(L, "m_nFrameDisabled");
	return 0;
}

static int tolua_get_CUIControlButton_reference_m_nFrameDisabled(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nFrameDisabled'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nFrameDisabled, "Primitive<short>");
	return 1;
}

static int tolua_get_CUIControlButton_m_doRender(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_doRender'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_doRender);
	return 1;
}

static int tolua_set_CUIControlButton_m_doRender(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_doRender'", NULL);
	self->m_doRender = tolua_setter_tointeger<short>(L, "m_doRender");
	return 0;
}

static int tolua_get_CUIControlButton_reference_m_doRender(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_doRender'", NULL);
	tolua_pushusertype(L, (void*)&self->m_doRender, "Primitive<short>");
	return 1;
}

static int tolua_get_CUIControlButton_m_BAMFrameDown(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_BAMFrameDown'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_BAMFrameDown);
	return 1;
}

static int tolua_set_CUIControlButton_m_BAMFrameDown(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_BAMFrameDown'", NULL);
	self->m_BAMFrameDown = tolua_setter_tointeger<int>(L, "m_BAMFrameDown");
	return 0;
}

static int tolua_get_CUIControlButton_reference_m_BAMFrameDown(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_BAMFrameDown'", NULL);
	tolua_pushusertype(L, (void*)&self->m_BAMFrameDown, "Primitive<int>");
	return 1;
}

static int tolua_get_CUIControlButton_m_sText(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sText'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sText, "CString");
	return 1;
}

static int tolua_get_CUIControlButton_m_bClickable(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bClickable'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bClickable);
	return 1;
}

static int tolua_set_CUIControlButton_m_bClickable(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bClickable'", NULL);
	self->m_bClickable = tolua_setter_tointeger<int>(L, "m_bClickable");
	return 0;
}

static int tolua_get_CUIControlButton_reference_m_bClickable(lua_State* L)
{
	CUIControlButton* self = (CUIControlButton*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButton");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bClickable'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bClickable, "Primitive<int>");
	return 1;
}

static int tolua_function_CVidMosaic_Render(lua_State* L)
{
	CVidMosaic* self = (CVidMosaic*)tolua_tousertype_dynamic(L, 1, 0, "CVidMosaic");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Render'", NULL);
	int returnVal = self->Render(tolua_function_tointeger<int>(L, 2, "Render"), tolua_function_tointeger<int>(L, 3, "Render"), tolua_function_tointeger<int>(L, 4, "Render"), (CRect*)tolua_tousertype_dynamic(L, 5, 0, "CRect"), (CRect*)tolua_tousertype_dynamic(L, 6, 0, "CRect"), tolua_function_tointeger<uint>(L, 7, "Render"), tolua_function_tointeger<int>(L, 8, "Render"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_CUIControlButtonMap_m_mosaic(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_mosaic'", NULL);
	tolua_pushusertype(L, (void*)&self->m_mosaic, "CVidMosaic");
	return 1;
}

static int tolua_get_CUIControlButtonMap_m_pArea(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pArea'", NULL);
	tolua_pushusertype(L, (void*)self->m_pArea, "CGameArea");
	return 1;
}

static int tolua_set_CUIControlButtonMap_m_pArea(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pArea'", NULL);
	self->m_pArea = (CGameArea*)tolua_tousertype_dynamic(L, 2, 0, "CGameArea");
	return 0;
}

static int tolua_get_CUIControlButtonMap_reference_m_pArea(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pArea'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pArea, "Pointer<CGameArea>");
	return 1;
}

static int tolua_get_CUIControlButtonMap_m_bMosaicLoaded(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bMosaicLoaded'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bMosaicLoaded);
	return 1;
}

static int tolua_set_CUIControlButtonMap_m_bMosaicLoaded(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bMosaicLoaded'", NULL);
	self->m_bMosaicLoaded = tolua_setter_tointeger<byte>(L, "m_bMosaicLoaded");
	return 0;
}

static int tolua_get_CUIControlButtonMap_reference_m_bMosaicLoaded(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bMosaicLoaded'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bMosaicLoaded, "Primitive<byte>");
	return 1;
}

static int tolua_get_CUIControlButtonMap_m_rMosaic(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rMosaic'", NULL);
	tolua_pushusertype(L, (void*)&self->m_rMosaic, "CRect");
	return 1;
}

static int tolua_get_CUIControlButtonMap_m_bIsLButtonDown(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bIsLButtonDown'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bIsLButtonDown);
	return 1;
}

static int tolua_set_CUIControlButtonMap_m_bIsLButtonDown(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bIsLButtonDown'", NULL);
	self->m_bIsLButtonDown = tolua_setter_tointeger<byte>(L, "m_bIsLButtonDown");
	return 0;
}

static int tolua_get_CUIControlButtonMap_reference_m_bIsLButtonDown(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bIsLButtonDown'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bIsLButtonDown, "Primitive<byte>");
	return 1;
}

static int tolua_get_CUIControlButtonMap_m_bMouseBeingDragged(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bMouseBeingDragged'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bMouseBeingDragged);
	return 1;
}

static int tolua_set_CUIControlButtonMap_m_bMouseBeingDragged(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bMouseBeingDragged'", NULL);
	self->m_bMouseBeingDragged = tolua_setter_tointeger<byte>(L, "m_bMouseBeingDragged");
	return 0;
}

static int tolua_get_CUIControlButtonMap_reference_m_bMouseBeingDragged(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bMouseBeingDragged'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bMouseBeingDragged, "Primitive<byte>");
	return 1;
}

static int tolua_get_CUIControlButtonMap_m_initialLButtonDownPoint(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_initialLButtonDownPoint'", NULL);
	tolua_pushusertype(L, (void*)&self->m_initialLButtonDownPoint, "CPoint");
	return 1;
}

static int tolua_get_CUIControlButtonMap_m_rViewPosition(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rViewPosition'", NULL);
	tolua_pushusertype(L, (void*)&self->m_rViewPosition, "CRect");
	return 1;
}

static int tolua_get_CUIControlButtonMap_m_lock(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_lock'", NULL);
	tolua_pushusertype(L, (void*)&self->m_lock, "CSyncObject");
	return 1;
}

static int tolua_get_CUIControlButtonMap_m_rect3(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rect3'", NULL);
	tolua_pushusertype(L, (void*)&self->m_rect3, "CRect");
	return 1;
}

static int tolua_get_CUIControlButtonMap_m_nRenderCounter(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nRenderCounter'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nRenderCounter);
	return 1;
}

static int tolua_set_CUIControlButtonMap_m_nRenderCounter(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nRenderCounter'", NULL);
	self->m_nRenderCounter = tolua_setter_tointeger<byte>(L, "m_nRenderCounter");
	return 0;
}

static int tolua_get_CUIControlButtonMap_reference_m_nRenderCounter(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nRenderCounter'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nRenderCounter, "Primitive<byte>");
	return 1;
}

static int tolua_get_CUIControlButtonMap_m_curViewPos(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_curViewPos'", NULL);
	tolua_pushusertype(L, (void*)&self->m_curViewPos, "CPoint");
	return 1;
}

static int tolua_get_CUIControlButtonMap_m_pendingViewPos(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pendingViewPos'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pendingViewPos, "CPoint");
	return 1;
}

static int tolua_get_CUIControlButtonMap_m_nUnused(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nUnused'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nUnused);
	return 1;
}

static int tolua_set_CUIControlButtonMap_m_nUnused(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nUnused'", NULL);
	self->m_nUnused = tolua_setter_tointeger<byte>(L, "m_nUnused");
	return 0;
}

static int tolua_get_CUIControlButtonMap_reference_m_nUnused(lua_State* L)
{
	CUIControlButtonMap* self = (CUIControlButtonMap*)tolua_tousertype_dynamic(L, 1, 0, "CUIControlButtonMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nUnused'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nUnused, "Primitive<byte>");
	return 1;
}

static int tolua_get_CUIPanel_m_pUIManager(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUIManager'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUIManager, "CUIManager");
	return 1;
}

static int tolua_set_CUIPanel_m_pUIManager(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUIManager'", NULL);
	self->m_pUIManager = (CUIManager*)tolua_tousertype_dynamic(L, 2, 0, "CUIManager");
	return 0;
}

static int tolua_get_CUIPanel_reference_m_pUIManager(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUIManager'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUIManager, "Pointer<CUIManager>");
	return 1;
}

static int tolua_get_CUIPanel_m_controlList(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_controlList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_controlList, "CTypedPtrList<CPtrList,CUIControlBase*>");
	return 1;
}

static int tolua_get_CUIPanel_m_nId(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nId'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nId);
	return 1;
}

static int tolua_set_CUIPanel_m_nId(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nId'", NULL);
	self->m_nId = tolua_setter_tointeger<int>(L, "m_nId");
	return 0;
}

static int tolua_get_CUIPanel_reference_m_nId(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nId'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nId, "Primitive<int>");
	return 1;
}

static int tolua_get_CUIPanel_m_nX(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nX'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nX);
	return 1;
}

static int tolua_set_CUIPanel_m_nX(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nX'", NULL);
	self->m_nX = tolua_setter_tointeger<uint>(L, "m_nX");
	return 0;
}

static int tolua_get_CUIPanel_reference_m_nX(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nX'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nX, "Primitive<uint>");
	return 1;
}

static int tolua_get_CUIPanel_m_nY(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nY'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nY);
	return 1;
}

static int tolua_set_CUIPanel_m_nY(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nY'", NULL);
	self->m_nY = tolua_setter_tointeger<uint>(L, "m_nY");
	return 0;
}

static int tolua_get_CUIPanel_reference_m_nY(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nY'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nY, "Primitive<uint>");
	return 1;
}

static int tolua_get_CUIPanel_m_nWidth(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nWidth'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nWidth);
	return 1;
}

static int tolua_set_CUIPanel_m_nWidth(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nWidth'", NULL);
	self->m_nWidth = tolua_setter_tointeger<uint>(L, "m_nWidth");
	return 0;
}

static int tolua_get_CUIPanel_reference_m_nWidth(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nWidth'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nWidth, "Primitive<uint>");
	return 1;
}

static int tolua_get_CUIPanel_m_nHeight(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nHeight'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nHeight);
	return 1;
}

static int tolua_set_CUIPanel_m_nHeight(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nHeight'", NULL);
	self->m_nHeight = tolua_setter_tointeger<uint>(L, "m_nHeight");
	return 0;
}

static int tolua_get_CUIPanel_reference_m_nHeight(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nHeight'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nHeight, "Primitive<uint>");
	return 1;
}

static int tolua_get_CUIPanel_m_mosaic(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_mosaic'", NULL);
	tolua_pushusertype(L, (void*)&self->m_mosaic, "CVidMosaic");
	return 1;
}

static int tolua_get_CUIPanel_m_nPendingRenderCount(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nPendingRenderCount'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nPendingRenderCount);
	return 1;
}

static int tolua_set_CUIPanel_m_nPendingRenderCount(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nPendingRenderCount'", NULL);
	self->m_nPendingRenderCount = tolua_setter_tointeger<short>(L, "m_nPendingRenderCount");
	return 0;
}

static int tolua_get_CUIPanel_reference_m_nPendingRenderCount(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nPendingRenderCount'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nPendingRenderCount, "Primitive<short>");
	return 1;
}

static int tolua_get_CUIPanel_m_bActive(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bActive'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bActive);
	return 1;
}

static int tolua_set_CUIPanel_m_bActive(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bActive'", NULL);
	self->m_bActive = tolua_setter_tointeger<int>(L, "m_bActive");
	return 0;
}

static int tolua_get_CUIPanel_reference_m_bActive(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bActive'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bActive, "Primitive<int>");
	return 1;
}

static int tolua_get_CUIPanel_m_rInvalid(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rInvalid'", NULL);
	tolua_pushusertype(L, (void*)&self->m_rInvalid, "CRect");
	return 1;
}

static int tolua_get_CUIPanel_m_bInactiveRender(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInactiveRender'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bInactiveRender);
	return 1;
}

static int tolua_set_CUIPanel_m_bInactiveRender(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInactiveRender'", NULL);
	self->m_bInactiveRender = tolua_setter_tointeger<int>(L, "m_bInactiveRender");
	return 0;
}

static int tolua_get_CUIPanel_reference_m_bInactiveRender(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInactiveRender'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bInactiveRender, "Primitive<int>");
	return 1;
}

static int tolua_get_CUIPanel_m_bEnabled(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bEnabled'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bEnabled);
	return 1;
}

static int tolua_set_CUIPanel_m_bEnabled(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bEnabled'", NULL);
	self->m_bEnabled = tolua_setter_tointeger<int>(L, "m_bEnabled");
	return 0;
}

static int tolua_get_CUIPanel_reference_m_bEnabled(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bEnabled'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bEnabled, "Primitive<int>");
	return 1;
}

static int tolua_function_CUIPanel_Construct(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Construct'", NULL);
	self->Construct((CUIManager*)tolua_tousertype_dynamic(L, 2, 0, "CUIManager"), (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 3, 0, "UI_PanelHeader_st"));
	return 0;
}

static int tolua_function_CUIPanel_InvalidateRect(lua_State* L)
{
	CUIPanel* self = (CUIPanel*)tolua_tousertype_dynamic(L, 1, 0, "CUIPanel");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'InvalidateRect'", NULL);
	self->InvalidateRect((CRect*)tolua_tousertype_dynamic(L, 2, 0, "CRect"));
	return 0;
}

static int tolua_function_CItem_virtual_VirtualDestruct(lua_State* L)
{
	CItem* self = (CItem*)tolua_tousertype_dynamic(L, 1, 0, "CItem");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_VirtualDestruct'", NULL);
	CItem* returnVal = self->virtual_VirtualDestruct(tolua_function_tointeger<uint>(L, 2, "virtual_VirtualDestruct"));
	tolua_pushusertype(L, (void*)returnVal, "CItem");
	return 1;
}

static int tolua_get_CItem__vtbl_VirtualDestruct(lua_State* L)
{
	return 1;
}

static int tolua_set_CItem__vtbl_VirtualDestruct(lua_State* L)
{
	return 0;
}

static int tolua_get_CItem__vtbl_reference_VirtualDestruct(lua_State* L)
{
	return 1;
}

static int tolua_get_C2DArray_m_pNamesX(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNamesX'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNamesX, "CString");
	return 1;
}

static int tolua_set_C2DArray_m_pNamesX(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNamesX'", NULL);
	self->m_pNamesX = (CString*)tolua_tousertype_dynamic(L, 2, 0, "CString");
	return 0;
}

static int tolua_get_C2DArray_reference_m_pNamesX(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNamesX'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNamesX, "Pointer<CString>");
	return 1;
}

static int tolua_get_C2DArray_m_pNamesY(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNamesY'", NULL);
	tolua_pushusertype(L, (void*)self->m_pNamesY, "CString");
	return 1;
}

static int tolua_set_C2DArray_m_pNamesY(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNamesY'", NULL);
	self->m_pNamesY = (CString*)tolua_tousertype_dynamic(L, 2, 0, "CString");
	return 0;
}

static int tolua_get_C2DArray_reference_m_pNamesY(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pNamesY'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pNamesY, "Pointer<CString>");
	return 1;
}

static int tolua_get_C2DArray_m_pArray(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pArray'", NULL);
	tolua_pushusertype(L, (void*)self->m_pArray, "CString");
	return 1;
}

static int tolua_set_C2DArray_m_pArray(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pArray'", NULL);
	self->m_pArray = (CString*)tolua_tousertype_dynamic(L, 2, 0, "CString");
	return 0;
}

static int tolua_get_C2DArray_reference_m_pArray(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pArray'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pArray, "Pointer<CString>");
	return 1;
}

static int tolua_get_C2DArray_m_default(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_default'", NULL);
	tolua_pushusertype(L, (void*)&self->m_default, "CString");
	return 1;
}

static int tolua_get_C2DArray_m_nSizeX(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nSizeX'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nSizeX);
	return 1;
}

static int tolua_set_C2DArray_m_nSizeX(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nSizeX'", NULL);
	self->m_nSizeX = tolua_setter_tointeger<short>(L, "m_nSizeX");
	return 0;
}

static int tolua_get_C2DArray_reference_m_nSizeX(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nSizeX'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nSizeX, "Primitive<short>");
	return 1;
}

static int tolua_get_C2DArray_m_nSizeY(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nSizeY'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nSizeY);
	return 1;
}

static int tolua_set_C2DArray_m_nSizeY(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nSizeY'", NULL);
	self->m_nSizeY = tolua_setter_tointeger<short>(L, "m_nSizeY");
	return 0;
}

static int tolua_get_C2DArray_reference_m_nSizeY(lua_State* L)
{
	C2DArray* self = (C2DArray*)tolua_tousertype_dynamic(L, 1, 0, "C2DArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nSizeY'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nSizeY, "Primitive<short>");
	return 1;
}

static int tolua_get_CRuleTables_m_tStartArea(lua_State* L)
{
	CRuleTables* self = (CRuleTables*)tolua_tousertype_dynamic(L, 1, 0, "CRuleTables");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_tStartArea'", NULL);
	tolua_pushusertype(L, (void*)&self->m_tStartArea, "C2DArray");
	return 1;
}

static int tolua_get_WED_LayerHeader_st_nTilesAcross(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nTilesAcross'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nTilesAcross);
	return 1;
}

static int tolua_set_WED_LayerHeader_st_nTilesAcross(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nTilesAcross'", NULL);
	self->nTilesAcross = tolua_setter_tointeger<ushort>(L, "nTilesAcross");
	return 0;
}

static int tolua_get_WED_LayerHeader_st_reference_nTilesAcross(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nTilesAcross'", NULL);
	tolua_pushusertype(L, (void*)&self->nTilesAcross, "Primitive<ushort>");
	return 1;
}

static int tolua_get_WED_LayerHeader_st_nTilesDown(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nTilesDown'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nTilesDown);
	return 1;
}

static int tolua_set_WED_LayerHeader_st_nTilesDown(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nTilesDown'", NULL);
	self->nTilesDown = tolua_setter_tointeger<ushort>(L, "nTilesDown");
	return 0;
}

static int tolua_get_WED_LayerHeader_st_reference_nTilesDown(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nTilesDown'", NULL);
	tolua_pushusertype(L, (void*)&self->nTilesDown, "Primitive<ushort>");
	return 1;
}

static int tolua_get_WED_LayerHeader_st_resrefTileSet(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'resrefTileSet'", NULL);
	tolua_pushusertype(L, (void*)&self->resrefTileSet, "CResRef");
	return 1;
}

static int tolua_get_WED_LayerHeader_st_nNumUniqueTiles(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nNumUniqueTiles'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nNumUniqueTiles);
	return 1;
}

static int tolua_set_WED_LayerHeader_st_nNumUniqueTiles(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nNumUniqueTiles'", NULL);
	self->nNumUniqueTiles = tolua_setter_tointeger<ushort>(L, "nNumUniqueTiles");
	return 0;
}

static int tolua_get_WED_LayerHeader_st_reference_nNumUniqueTiles(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nNumUniqueTiles'", NULL);
	tolua_pushusertype(L, (void*)&self->nNumUniqueTiles, "Primitive<ushort>");
	return 1;
}

static int tolua_get_WED_LayerHeader_st_nLayerFlags(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nLayerFlags'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nLayerFlags);
	return 1;
}

static int tolua_set_WED_LayerHeader_st_nLayerFlags(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nLayerFlags'", NULL);
	self->nLayerFlags = tolua_setter_tointeger<ushort>(L, "nLayerFlags");
	return 0;
}

static int tolua_get_WED_LayerHeader_st_reference_nLayerFlags(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nLayerFlags'", NULL);
	tolua_pushusertype(L, (void*)&self->nLayerFlags, "Primitive<ushort>");
	return 1;
}

static int tolua_get_WED_LayerHeader_st_nOffsetToTileData(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nOffsetToTileData'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nOffsetToTileData);
	return 1;
}

static int tolua_set_WED_LayerHeader_st_nOffsetToTileData(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nOffsetToTileData'", NULL);
	self->nOffsetToTileData = tolua_setter_tointeger<uint>(L, "nOffsetToTileData");
	return 0;
}

static int tolua_get_WED_LayerHeader_st_reference_nOffsetToTileData(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nOffsetToTileData'", NULL);
	tolua_pushusertype(L, (void*)&self->nOffsetToTileData, "Primitive<uint>");
	return 1;
}

static int tolua_get_WED_LayerHeader_st_nOffsetToTileSetLookupArray(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nOffsetToTileSetLookupArray'", NULL);
	lua_pushinteger(L, (lua_Integer)self->nOffsetToTileSetLookupArray);
	return 1;
}

static int tolua_set_WED_LayerHeader_st_nOffsetToTileSetLookupArray(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nOffsetToTileSetLookupArray'", NULL);
	self->nOffsetToTileSetLookupArray = tolua_setter_tointeger<uint>(L, "nOffsetToTileSetLookupArray");
	return 0;
}

static int tolua_get_WED_LayerHeader_st_reference_nOffsetToTileSetLookupArray(lua_State* L)
{
	WED_LayerHeader_st* self = (WED_LayerHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "WED_LayerHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'nOffsetToTileSetLookupArray'", NULL);
	tolua_pushusertype(L, (void*)&self->nOffsetToTileSetLookupArray, "Primitive<uint>");
	return 1;
}

static int tolua_get_UI_PanelHeader_st_id(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'id'", NULL);
	lua_pushinteger(L, (lua_Integer)self->id);
	return 1;
}

static int tolua_set_UI_PanelHeader_st_id(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'id'", NULL);
	self->id = tolua_setter_tointeger<int>(L, "id");
	return 0;
}

static int tolua_get_UI_PanelHeader_st_reference_id(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'id'", NULL);
	tolua_pushusertype(L, (void*)&self->id, "Primitive<int>");
	return 1;
}

static int tolua_get_UI_PanelHeader_st_x(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'x'", NULL);
	lua_pushinteger(L, (lua_Integer)self->x);
	return 1;
}

static int tolua_set_UI_PanelHeader_st_x(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'x'", NULL);
	self->x = tolua_setter_tointeger<ushort>(L, "x");
	return 0;
}

static int tolua_get_UI_PanelHeader_st_reference_x(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'x'", NULL);
	tolua_pushusertype(L, (void*)&self->x, "Primitive<ushort>");
	return 1;
}

static int tolua_get_UI_PanelHeader_st_y(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'y'", NULL);
	lua_pushinteger(L, (lua_Integer)self->y);
	return 1;
}

static int tolua_set_UI_PanelHeader_st_y(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'y'", NULL);
	self->y = tolua_setter_tointeger<ushort>(L, "y");
	return 0;
}

static int tolua_get_UI_PanelHeader_st_reference_y(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'y'", NULL);
	tolua_pushusertype(L, (void*)&self->y, "Primitive<ushort>");
	return 1;
}

static int tolua_get_UI_PanelHeader_st_width(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'width'", NULL);
	lua_pushinteger(L, (lua_Integer)self->width);
	return 1;
}

static int tolua_set_UI_PanelHeader_st_width(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'width'", NULL);
	self->width = tolua_setter_tointeger<short>(L, "width");
	return 0;
}

static int tolua_get_UI_PanelHeader_st_reference_width(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'width'", NULL);
	tolua_pushusertype(L, (void*)&self->width, "Primitive<short>");
	return 1;
}

static int tolua_get_UI_PanelHeader_st_height(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'height'", NULL);
	lua_pushinteger(L, (lua_Integer)self->height);
	return 1;
}

static int tolua_set_UI_PanelHeader_st_height(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'height'", NULL);
	self->height = tolua_setter_tointeger<short>(L, "height");
	return 0;
}

static int tolua_get_UI_PanelHeader_st_reference_height(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'height'", NULL);
	tolua_pushusertype(L, (void*)&self->height, "Primitive<short>");
	return 1;
}

static int tolua_get_UI_PanelHeader_st_type(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'type'", NULL);
	lua_pushinteger(L, (lua_Integer)self->type);
	return 1;
}

static int tolua_set_UI_PanelHeader_st_type(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'type'", NULL);
	self->type = tolua_setter_tointeger<short>(L, "type");
	return 0;
}

static int tolua_get_UI_PanelHeader_st_reference_type(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'type'", NULL);
	tolua_pushusertype(L, (void*)&self->type, "Primitive<short>");
	return 1;
}

static int tolua_get_UI_PanelHeader_st_numControls(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'numControls'", NULL);
	lua_pushinteger(L, (lua_Integer)self->numControls);
	return 1;
}

static int tolua_set_UI_PanelHeader_st_numControls(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'numControls'", NULL);
	self->numControls = tolua_setter_tointeger<short>(L, "numControls");
	return 0;
}

static int tolua_get_UI_PanelHeader_st_reference_numControls(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'numControls'", NULL);
	tolua_pushusertype(L, (void*)&self->numControls, "Primitive<short>");
	return 1;
}

static int tolua_get_UI_PanelHeader_st_mosaic(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'mosaic'", NULL);
	tolua_pushusertype(L, (void*)&self->mosaic, "CResRef");
	return 1;
}

static int tolua_get_UI_PanelHeader_st_firstControlIndex(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'firstControlIndex'", NULL);
	lua_pushinteger(L, (lua_Integer)self->firstControlIndex);
	return 1;
}

static int tolua_set_UI_PanelHeader_st_firstControlIndex(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'firstControlIndex'", NULL);
	self->firstControlIndex = tolua_setter_tointeger<short>(L, "firstControlIndex");
	return 0;
}

static int tolua_get_UI_PanelHeader_st_reference_firstControlIndex(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'firstControlIndex'", NULL);
	tolua_pushusertype(L, (void*)&self->firstControlIndex, "Primitive<short>");
	return 1;
}

static int tolua_get_UI_PanelHeader_st_flags(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'flags'", NULL);
	lua_pushinteger(L, (lua_Integer)self->flags);
	return 1;
}

static int tolua_set_UI_PanelHeader_st_flags(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'flags'", NULL);
	self->flags = tolua_setter_tointeger<short>(L, "flags");
	return 0;
}

static int tolua_get_UI_PanelHeader_st_reference_flags(lua_State* L)
{
	UI_PanelHeader_st* self = (UI_PanelHeader_st*)tolua_tousertype_dynamic(L, 1, 0, "UI_PanelHeader_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'flags'", NULL);
	tolua_pushusertype(L, (void*)&self->flags, "Primitive<short>");
	return 1;
}

static int tolua_get_Item_effect_st_effectID(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'effectID'", NULL);
	lua_pushinteger(L, (lua_Integer)self->effectID);
	return 1;
}

static int tolua_set_Item_effect_st_effectID(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'effectID'", NULL);
	self->effectID = tolua_setter_tointeger<ushort>(L, "effectID");
	return 0;
}

static int tolua_get_Item_effect_st_reference_effectID(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'effectID'", NULL);
	tolua_pushusertype(L, (void*)&self->effectID, "Primitive<ushort>");
	return 1;
}

static int tolua_get_Item_effect_st_targetType(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'targetType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->targetType);
	return 1;
}

static int tolua_set_Item_effect_st_targetType(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'targetType'", NULL);
	self->targetType = tolua_setter_tointeger<byte>(L, "targetType");
	return 0;
}

static int tolua_get_Item_effect_st_reference_targetType(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'targetType'", NULL);
	tolua_pushusertype(L, (void*)&self->targetType, "Primitive<byte>");
	return 1;
}

static int tolua_get_Item_effect_st_spellLevel(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'spellLevel'", NULL);
	lua_pushinteger(L, (lua_Integer)self->spellLevel);
	return 1;
}

static int tolua_set_Item_effect_st_spellLevel(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'spellLevel'", NULL);
	self->spellLevel = tolua_setter_tointeger<byte>(L, "spellLevel");
	return 0;
}

static int tolua_get_Item_effect_st_reference_spellLevel(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'spellLevel'", NULL);
	tolua_pushusertype(L, (void*)&self->spellLevel, "Primitive<byte>");
	return 1;
}

static int tolua_get_Item_effect_st_effectAmount(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'effectAmount'", NULL);
	lua_pushinteger(L, (lua_Integer)self->effectAmount);
	return 1;
}

static int tolua_set_Item_effect_st_effectAmount(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'effectAmount'", NULL);
	self->effectAmount = tolua_setter_tointeger<int>(L, "effectAmount");
	return 0;
}

static int tolua_get_Item_effect_st_reference_effectAmount(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'effectAmount'", NULL);
	tolua_pushusertype(L, (void*)&self->effectAmount, "Primitive<int>");
	return 1;
}

static int tolua_get_Item_effect_st_dwFlags(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'dwFlags'", NULL);
	lua_pushinteger(L, (lua_Integer)self->dwFlags);
	return 1;
}

static int tolua_set_Item_effect_st_dwFlags(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'dwFlags'", NULL);
	self->dwFlags = tolua_setter_tointeger<uint>(L, "dwFlags");
	return 0;
}

static int tolua_get_Item_effect_st_reference_dwFlags(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'dwFlags'", NULL);
	tolua_pushusertype(L, (void*)&self->dwFlags, "Primitive<uint>");
	return 1;
}

static int tolua_get_Item_effect_st_durationType(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'durationType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->durationType);
	return 1;
}

static int tolua_set_Item_effect_st_durationType(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'durationType'", NULL);
	self->durationType = tolua_setter_tointeger<ushort>(L, "durationType");
	return 0;
}

static int tolua_get_Item_effect_st_reference_durationType(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'durationType'", NULL);
	tolua_pushusertype(L, (void*)&self->durationType, "Primitive<ushort>");
	return 1;
}

static int tolua_get_Item_effect_st_duration(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'duration'", NULL);
	lua_pushinteger(L, (lua_Integer)self->duration);
	return 1;
}

static int tolua_set_Item_effect_st_duration(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'duration'", NULL);
	self->duration = tolua_setter_tointeger<uint>(L, "duration");
	return 0;
}

static int tolua_get_Item_effect_st_reference_duration(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'duration'", NULL);
	tolua_pushusertype(L, (void*)&self->duration, "Primitive<uint>");
	return 1;
}

static int tolua_get_Item_effect_st_probabilityUpper(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'probabilityUpper'", NULL);
	lua_pushinteger(L, (lua_Integer)self->probabilityUpper);
	return 1;
}

static int tolua_set_Item_effect_st_probabilityUpper(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'probabilityUpper'", NULL);
	self->probabilityUpper = tolua_setter_tointeger<byte>(L, "probabilityUpper");
	return 0;
}

static int tolua_get_Item_effect_st_reference_probabilityUpper(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'probabilityUpper'", NULL);
	tolua_pushusertype(L, (void*)&self->probabilityUpper, "Primitive<byte>");
	return 1;
}

static int tolua_get_Item_effect_st_probabilityLower(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'probabilityLower'", NULL);
	lua_pushinteger(L, (lua_Integer)self->probabilityLower);
	return 1;
}

static int tolua_set_Item_effect_st_probabilityLower(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'probabilityLower'", NULL);
	self->probabilityLower = tolua_setter_tointeger<byte>(L, "probabilityLower");
	return 0;
}

static int tolua_get_Item_effect_st_reference_probabilityLower(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'probabilityLower'", NULL);
	tolua_pushusertype(L, (void*)&self->probabilityLower, "Primitive<byte>");
	return 1;
}

static int tolua_get_Item_effect_st_res(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'res'", NULL);
	tolua_pushusertype(L, (void*)&self->res, "CResRef");
	return 1;
}

static int tolua_get_Item_effect_st_numDice(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'numDice'", NULL);
	lua_pushinteger(L, (lua_Integer)self->numDice);
	return 1;
}

static int tolua_set_Item_effect_st_numDice(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'numDice'", NULL);
	self->numDice = tolua_setter_tointeger<uint>(L, "numDice");
	return 0;
}

static int tolua_get_Item_effect_st_reference_numDice(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'numDice'", NULL);
	tolua_pushusertype(L, (void*)&self->numDice, "Primitive<uint>");
	return 1;
}

static int tolua_get_Item_effect_st_diceSize(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'diceSize'", NULL);
	lua_pushinteger(L, (lua_Integer)self->diceSize);
	return 1;
}

static int tolua_set_Item_effect_st_diceSize(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'diceSize'", NULL);
	self->diceSize = tolua_setter_tointeger<uint>(L, "diceSize");
	return 0;
}

static int tolua_get_Item_effect_st_reference_diceSize(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'diceSize'", NULL);
	tolua_pushusertype(L, (void*)&self->diceSize, "Primitive<uint>");
	return 1;
}

static int tolua_get_Item_effect_st_savingThrow(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'savingThrow'", NULL);
	lua_pushinteger(L, (lua_Integer)self->savingThrow);
	return 1;
}

static int tolua_set_Item_effect_st_savingThrow(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'savingThrow'", NULL);
	self->savingThrow = tolua_setter_tointeger<uint>(L, "savingThrow");
	return 0;
}

static int tolua_get_Item_effect_st_reference_savingThrow(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'savingThrow'", NULL);
	tolua_pushusertype(L, (void*)&self->savingThrow, "Primitive<uint>");
	return 1;
}

static int tolua_get_Item_effect_st_saveMod(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'saveMod'", NULL);
	lua_pushinteger(L, (lua_Integer)self->saveMod);
	return 1;
}

static int tolua_set_Item_effect_st_saveMod(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'saveMod'", NULL);
	self->saveMod = tolua_setter_tointeger<int>(L, "saveMod");
	return 0;
}

static int tolua_get_Item_effect_st_reference_saveMod(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'saveMod'", NULL);
	tolua_pushusertype(L, (void*)&self->saveMod, "Primitive<int>");
	return 1;
}

static int tolua_get_Item_effect_st_special(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'special'", NULL);
	lua_pushinteger(L, (lua_Integer)self->special);
	return 1;
}

static int tolua_set_Item_effect_st_special(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'special'", NULL);
	self->special = tolua_setter_tointeger<uint>(L, "special");
	return 0;
}

static int tolua_get_Item_effect_st_reference_special(lua_State* L)
{
	Item_effect_st* self = (Item_effect_st*)tolua_tousertype_dynamic(L, 1, 0, "Item_effect_st");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'special'", NULL);
	tolua_pushusertype(L, (void*)&self->special, "Primitive<uint>");
	return 1;
}

static int tolua_get_CUIManager_m_bResLoaded(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bResLoaded'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bResLoaded);
	return 1;
}

static int tolua_set_CUIManager_m_bResLoaded(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bResLoaded'", NULL);
	self->m_bResLoaded = tolua_setter_tointeger<int>(L, "m_bResLoaded");
	return 0;
}

static int tolua_get_CUIManager_reference_m_bResLoaded(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bResLoaded'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bResLoaded, "Primitive<int>");
	return 1;
}

static int tolua_get_CUIManager_m_id(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_id'", NULL);
	tolua_pushusertype(L, (void*)&self->m_id, "CResRef");
	return 1;
}

static int tolua_get_CUIManager_m_pEngine(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngine'", NULL);
	tolua_pushusertype(L, (void*)self->m_pEngine, "CBaldurEngine");
	return 1;
}

static int tolua_set_CUIManager_m_pEngine(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngine'", NULL);
	self->m_pEngine = (CBaldurEngine*)tolua_tousertype_dynamic(L, 2, 0, "CBaldurEngine");
	return 0;
}

static int tolua_get_CUIManager_reference_m_pEngine(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngine'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pEngine, "Pointer<CBaldurEngine>");
	return 1;
}

static int tolua_get_CUIManager_m_pCapturedControl(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pCapturedControl'", NULL);
	tolua_pushusertype(L, (void*)self->m_pCapturedControl, "CUIControlBase");
	return 1;
}

static int tolua_set_CUIManager_m_pCapturedControl(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pCapturedControl'", NULL);
	self->m_pCapturedControl = (CUIControlBase*)tolua_tousertype_dynamic(L, 2, 0, "CUIControlBase");
	return 0;
}

static int tolua_get_CUIManager_reference_m_pCapturedControl(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pCapturedControl'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pCapturedControl, "Pointer<CUIControlBase>");
	return 1;
}

static int tolua_get_CUIManager_m_bActive(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bActive'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bActive);
	return 1;
}

static int tolua_set_CUIManager_m_bActive(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bActive'", NULL);
	self->m_bActive = tolua_setter_tointeger<int>(L, "m_bActive");
	return 0;
}

static int tolua_get_CUIManager_reference_m_bActive(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bActive'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bActive, "Primitive<int>");
	return 1;
}

static int tolua_get_CUIManager_m_nControlCaptureType(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nControlCaptureType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nControlCaptureType);
	return 1;
}

static int tolua_set_CUIManager_m_nControlCaptureType(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nControlCaptureType'", NULL);
	self->m_nControlCaptureType = tolua_setter_tointeger<byte>(L, "m_nControlCaptureType");
	return 0;
}

static int tolua_get_CUIManager_reference_m_nControlCaptureType(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nControlCaptureType'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nControlCaptureType, "Primitive<byte>");
	return 1;
}

static int tolua_get_CUIManager_lock(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'lock'", NULL);
	tolua_pushusertype(L, (void*)&self->lock, "CCriticalSection");
	return 1;
}

static int tolua_get_CUIManager_m_panelList(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_panelList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_panelList, "CTypedPtrList<CPtrList,CUIPanel*>");
	return 1;
}

static int tolua_function_CUIManager_Construct(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Construct'", NULL);
	self->Construct();
	return 0;
}

static int tolua_function_CUIManager_Destruct(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Destruct'", NULL);
	self->Destruct();
	return 0;
}

static int tolua_function_CUIManager_GetPanel(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'GetPanel'", NULL);
	CUIPanel* returnVal = self->GetPanel(tolua_function_tointeger<int>(L, 2, "GetPanel"));
	tolua_pushusertype(L, (void*)returnVal, "CUIPanel");
	return 1;
}

static int tolua_function_CUIManager_Invalidate(lua_State* L)
{
	CUIManager* self = (CUIManager*)tolua_tousertype_dynamic(L, 1, 0, "CUIManager");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Invalidate'", NULL);
	self->Invalidate();
	return 0;
}

static int tolua_get_CBaldurEngine_m_uiManager(lua_State* L)
{
	CBaldurEngine* self = (CBaldurEngine*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurEngine");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_uiManager'", NULL);
	tolua_pushusertype(L, (void*)&self->m_uiManager, "CUIManager");
	return 1;
}

static int tolua_function_CBaldurEngine_virtual_GetUIManager(lua_State* L)
{
	CBaldurEngine* self = (CBaldurEngine*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurEngine");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetUIManager'", NULL);
	self->virtual_GetUIManager();
	return 0;
}

static int tolua_function_CBaldurEngine_virtual_SetPanelControlActiveAndInactiveRender(lua_State* L)
{
	CBaldurEngine* self = (CBaldurEngine*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurEngine");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_SetPanelControlActiveAndInactiveRender'", NULL);
	self->virtual_SetPanelControlActiveAndInactiveRender(tolua_function_tointeger<int>(L, 2, "virtual_SetPanelControlActiveAndInactiveRender"), tolua_function_tointeger<int>(L, 3, "virtual_SetPanelControlActiveAndInactiveRender"), tolua_function_tointeger<int>(L, 4, "virtual_SetPanelControlActiveAndInactiveRender"));
	return 0;
}

static int tolua_get_CBaldurEngine__vtbl_GetUIManager(lua_State* L)
{
	return 1;
}

static int tolua_set_CBaldurEngine__vtbl_GetUIManager(lua_State* L)
{
	return 0;
}

static int tolua_get_CBaldurEngine__vtbl_reference_GetUIManager(lua_State* L)
{
	return 1;
}

static int tolua_get_CBaldurEngine__vtbl_SetPanelControlActiveAndInactiveRender(lua_State* L)
{
	return 1;
}

static int tolua_set_CBaldurEngine__vtbl_SetPanelControlActiveAndInactiveRender(lua_State* L)
{
	return 0;
}

static int tolua_get_CBaldurEngine__vtbl_reference_SetPanelControlActiveAndInactiveRender(lua_State* L)
{
	return 1;
}

static int tolua_get_CScreenMap_m_unknownList(lua_State* L)
{
	CScreenMap* self = (CScreenMap*)tolua_tousertype_dynamic(L, 1, 0, "CScreenMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_unknownList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_unknownList, "CPtrList");
	return 1;
}

static int tolua_get_CScreenMap_m_nButtonControls(lua_State* L)
{
	CScreenMap* self = (CScreenMap*)tolua_tousertype_dynamic(L, 1, 0, "CScreenMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nButtonControls'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nButtonControls);
	return 1;
}

static int tolua_set_CScreenMap_m_nButtonControls(lua_State* L)
{
	CScreenMap* self = (CScreenMap*)tolua_tousertype_dynamic(L, 1, 0, "CScreenMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nButtonControls'", NULL);
	self->m_nButtonControls = tolua_setter_tointeger<int>(L, "m_nButtonControls");
	return 0;
}

static int tolua_get_CScreenMap_reference_m_nButtonControls(lua_State* L)
{
	CScreenMap* self = (CScreenMap*)tolua_tousertype_dynamic(L, 1, 0, "CScreenMap");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nButtonControls'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nButtonControls, "Primitive<int>");
	return 1;
}

static int tolua_get_CScreenWorld_m_bCtrlDown(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bCtrlDown'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bCtrlDown);
	return 1;
}

static int tolua_set_CScreenWorld_m_bCtrlDown(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bCtrlDown'", NULL);
	self->m_bCtrlDown = tolua_setter_tointeger<int>(L, "m_bCtrlDown");
	return 0;
}

static int tolua_get_CScreenWorld_reference_m_bCtrlDown(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bCtrlDown'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bCtrlDown, "Primitive<int>");
	return 1;
}

static int tolua_get_CScreenWorld_m_bCheatKeysEnabled(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bCheatKeysEnabled'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bCheatKeysEnabled);
	return 1;
}

static int tolua_set_CScreenWorld_m_bCheatKeysEnabled(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bCheatKeysEnabled'", NULL);
	self->m_bCheatKeysEnabled = tolua_setter_tointeger<int>(L, "m_bCheatKeysEnabled");
	return 0;
}

static int tolua_get_CScreenWorld_reference_m_bCheatKeysEnabled(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bCheatKeysEnabled'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bCheatKeysEnabled, "Primitive<int>");
	return 1;
}

static int tolua_get_CScreenWorld_m_aPressedVirtualKeys(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_aPressedVirtualKeys'", NULL);
	tolua_pushusertype(L, (void*)&self->m_aPressedVirtualKeys, "Array<byte,10>");
	return 1;
}

static int tolua_get_CScreenWorld_m_nPopupPanelId(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nPopupPanelId'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nPopupPanelId);
	return 1;
}

static int tolua_set_CScreenWorld_m_nPopupPanelId(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nPopupPanelId'", NULL);
	self->m_nPopupPanelId = tolua_setter_tointeger<int>(L, "m_nPopupPanelId");
	return 0;
}

static int tolua_get_CScreenWorld_reference_m_nPopupPanelId(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nPopupPanelId'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nPopupPanelId, "Primitive<int>");
	return 1;
}

static int tolua_get_CScreenWorld_m_pCurrentDialog(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pCurrentDialog'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pCurrentDialog, "CGameDialogSprite");
	return 1;
}

static int tolua_get_CScreenWorld_m_dialogScrollOrigin(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_dialogScrollOrigin'", NULL);
	tolua_pushusertype(L, (void*)&self->m_dialogScrollOrigin, "CPoint");
	return 1;
}

static int tolua_get_CScreenWorld_m_rPendingViewPort(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rPendingViewPort'", NULL);
	tolua_pushusertype(L, (void*)&self->m_rPendingViewPort, "CRect");
	return 1;
}

static int tolua_get_CScreenWorld_m_bViewPortResizePending(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bViewPortResizePending'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bViewPortResizePending);
	return 1;
}

static int tolua_set_CScreenWorld_m_bViewPortResizePending(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bViewPortResizePending'", NULL);
	self->m_bViewPortResizePending = tolua_setter_tointeger<byte>(L, "m_bViewPortResizePending");
	return 0;
}

static int tolua_get_CScreenWorld_reference_m_bViewPortResizePending(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bViewPortResizePending'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bViewPortResizePending, "Primitive<byte>");
	return 1;
}

static int tolua_get_CScreenWorld_m_weatherController(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_weatherController'", NULL);
	tolua_pushusertype(L, (void*)&self->m_weatherController, "CWeather");
	return 1;
}

static int tolua_get_CScreenWorld_m_nAutoScrollToActorID(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nAutoScrollToActorID'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nAutoScrollToActorID);
	return 1;
}

static int tolua_set_CScreenWorld_m_nAutoScrollToActorID(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nAutoScrollToActorID'", NULL);
	self->m_nAutoScrollToActorID = tolua_setter_tointeger<int>(L, "m_nAutoScrollToActorID");
	return 0;
}

static int tolua_get_CScreenWorld_reference_m_nAutoScrollToActorID(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nAutoScrollToActorID'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nAutoScrollToActorID, "Primitive<int>");
	return 1;
}

static int tolua_get_CScreenWorld_m_bSetNightOnActivate(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bSetNightOnActivate'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bSetNightOnActivate);
	return 1;
}

static int tolua_set_CScreenWorld_m_bSetNightOnActivate(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bSetNightOnActivate'", NULL);
	self->m_bSetNightOnActivate = tolua_setter_tointeger<byte>(L, "m_bSetNightOnActivate");
	return 0;
}

static int tolua_get_CScreenWorld_reference_m_bSetNightOnActivate(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bSetNightOnActivate'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bSetNightOnActivate, "Primitive<byte>");
	return 1;
}

static int tolua_get_CScreenWorld_m_bSetDayOnActivate(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bSetDayOnActivate'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bSetDayOnActivate);
	return 1;
}

static int tolua_set_CScreenWorld_m_bSetDayOnActivate(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bSetDayOnActivate'", NULL);
	self->m_bSetDayOnActivate = tolua_setter_tointeger<byte>(L, "m_bSetDayOnActivate");
	return 0;
}

static int tolua_get_CScreenWorld_reference_m_bSetDayOnActivate(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bSetDayOnActivate'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bSetDayOnActivate, "Primitive<byte>");
	return 1;
}

static int tolua_get_CScreenWorld_m_movie(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_movie'", NULL);
	tolua_pushusertype(L, (void*)&self->m_movie, "CResRef");
	return 1;
}

static int tolua_get_CScreenWorld_m_bGameOverPanel(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bGameOverPanel'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bGameOverPanel);
	return 1;
}

static int tolua_set_CScreenWorld_m_bGameOverPanel(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bGameOverPanel'", NULL);
	self->m_bGameOverPanel = tolua_setter_tointeger<int>(L, "m_bGameOverPanel");
	return 0;
}

static int tolua_get_CScreenWorld_reference_m_bGameOverPanel(lua_State* L)
{
	CScreenWorld* self = (CScreenWorld*)tolua_tousertype_dynamic(L, 1, 0, "CScreenWorld");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bGameOverPanel'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bGameOverPanel, "Primitive<int>");
	return 1;
}

static int tolua_get_CResourceManagerHashEntry_m_resref(lua_State* L)
{
	CResourceManagerHashEntry* self = (CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_resref'", NULL);
	tolua_pushusertype(L, (void*)&self->m_resref, "CResRef");
	return 1;
}

static int tolua_get_CResourceManagerHashEntry_m_pRes(lua_State* L)
{
	CResourceManagerHashEntry* self = (CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	tolua_pushusertype(L, (void*)self->m_pRes, "CRes");
	return 1;
}

static int tolua_set_CResourceManagerHashEntry_m_pRes(lua_State* L)
{
	CResourceManagerHashEntry* self = (CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	self->m_pRes = (CRes*)tolua_tousertype_dynamic(L, 2, 0, "CRes");
	return 0;
}

static int tolua_get_CResourceManagerHashEntry_reference_m_pRes(lua_State* L)
{
	CResourceManagerHashEntry* self = (CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pRes'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pRes, "Pointer<CRes>");
	return 1;
}

static int tolua_get_CResourceManagerHashEntry_m_nResourceLocator(lua_State* L)
{
	CResourceManagerHashEntry* self = (CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nResourceLocator'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nResourceLocator);
	return 1;
}

static int tolua_set_CResourceManagerHashEntry_m_nResourceLocator(lua_State* L)
{
	CResourceManagerHashEntry* self = (CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nResourceLocator'", NULL);
	self->m_nResourceLocator = tolua_setter_tointeger<int>(L, "m_nResourceLocator");
	return 0;
}

static int tolua_get_CResourceManagerHashEntry_reference_m_nResourceLocator(lua_State* L)
{
	CResourceManagerHashEntry* self = (CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nResourceLocator'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nResourceLocator, "Primitive<int>");
	return 1;
}

static int tolua_get_CResourceManagerHashEntry_m_nReferenceCount(lua_State* L)
{
	CResourceManagerHashEntry* self = (CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nReferenceCount'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nReferenceCount);
	return 1;
}

static int tolua_set_CResourceManagerHashEntry_m_nReferenceCount(lua_State* L)
{
	CResourceManagerHashEntry* self = (CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nReferenceCount'", NULL);
	self->m_nReferenceCount = tolua_setter_tointeger<short>(L, "m_nReferenceCount");
	return 0;
}

static int tolua_get_CResourceManagerHashEntry_reference_m_nReferenceCount(lua_State* L)
{
	CResourceManagerHashEntry* self = (CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nReferenceCount'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nReferenceCount, "Primitive<short>");
	return 1;
}

static int tolua_get_CResourceManagerHashEntry_m_nFileType(lua_State* L)
{
	CResourceManagerHashEntry* self = (CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nFileType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nFileType);
	return 1;
}

static int tolua_set_CResourceManagerHashEntry_m_nFileType(lua_State* L)
{
	CResourceManagerHashEntry* self = (CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nFileType'", NULL);
	self->m_nFileType = tolua_setter_tointeger<short>(L, "m_nFileType");
	return 0;
}

static int tolua_get_CResourceManagerHashEntry_reference_m_nFileType(lua_State* L)
{
	CResourceManagerHashEntry* self = (CResourceManagerHashEntry*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nFileType'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nFileType, "Primitive<short>");
	return 1;
}

static int tolua_get_CResourceManagerHashTable_m_bInitialized(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInitialized'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bInitialized);
	return 1;
}

static int tolua_set_CResourceManagerHashTable_m_bInitialized(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInitialized'", NULL);
	self->m_bInitialized = tolua_setter_tointeger<int>(L, "m_bInitialized");
	return 0;
}

static int tolua_get_CResourceManagerHashTable_reference_m_bInitialized(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInitialized'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bInitialized, "Primitive<int>");
	return 1;
}

static int tolua_get_CResourceManagerHashTable_m_pBifEntriesRaw(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBifEntriesRaw'", NULL);
	tolua_pushusertype(L, (void*)self->m_pBifEntriesRaw, "UnmappedUserType");
	return 1;
}

static int tolua_set_CResourceManagerHashTable_m_pBifEntriesRaw(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBifEntriesRaw'", NULL);
	self->m_pBifEntriesRaw = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CResourceManagerHashTable_reference_m_pBifEntriesRaw(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pBifEntriesRaw'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pBifEntriesRaw, "VoidPointer");
	return 1;
}

static int tolua_get_CResourceManagerHashTable_m_nBifEntries(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBifEntries'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nBifEntries);
	return 1;
}

static int tolua_set_CResourceManagerHashTable_m_nBifEntries(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBifEntries'", NULL);
	self->m_nBifEntries = tolua_setter_tointeger<int>(L, "m_nBifEntries");
	return 0;
}

static int tolua_get_CResourceManagerHashTable_reference_m_nBifEntries(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nBifEntries'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nBifEntries, "Primitive<int>");
	return 1;
}

static int tolua_get_CResourceManagerHashTable_m_nHashTableSize(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nHashTableSize'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nHashTableSize);
	return 1;
}

static int tolua_set_CResourceManagerHashTable_m_nHashTableSize(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nHashTableSize'", NULL);
	self->m_nHashTableSize = tolua_setter_tointeger<int>(L, "m_nHashTableSize");
	return 0;
}

static int tolua_get_CResourceManagerHashTable_reference_m_nHashTableSize(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nHashTableSize'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nHashTableSize, "Primitive<int>");
	return 1;
}

static int tolua_get_CResourceManagerHashTable_m_pHashEntries(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pHashEntries'", NULL);
	tolua_pushusertype(L, (void*)self->m_pHashEntries, "VariableArray<CResourceManagerHashEntry>");
	return 1;
}

static int tolua_set_CResourceManagerHashTable_m_pHashEntries(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pHashEntries'", NULL);
	self->m_pHashEntries = (VariableArray<CResourceManagerHashEntry>*)tolua_tousertype_dynamic(L, 2, 0, "VariableArray<CResourceManagerHashEntry>");
	return 0;
}

static int tolua_get_CResourceManagerHashTable_reference_m_pHashEntries(lua_State* L)
{
	CResourceManagerHashTable* self = (CResourceManagerHashTable*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManagerHashTable");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pHashEntries'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pHashEntries, "Pointer<VariableArray<CResourceManagerHashEntry>>");
	return 1;
}

static int tolua_get_CResourceManager_m_lowestPriorityList(lua_State* L)
{
	CResourceManager* self = (CResourceManager*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_lowestPriorityList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_lowestPriorityList, "CPtrList");
	return 1;
}

static int tolua_get_CResourceManager_m_highestPriorityList(lua_State* L)
{
	CResourceManager* self = (CResourceManager*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_highestPriorityList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_highestPriorityList, "CPtrList");
	return 1;
}

static int tolua_get_CResourceManager_m_persistentPriorityList(lua_State* L)
{
	CResourceManager* self = (CResourceManager*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_persistentPriorityList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_persistentPriorityList, "CPtrList");
	return 1;
}

static int tolua_get_CResourceManager_m_freedLowestPriorityList(lua_State* L)
{
	CResourceManager* self = (CResourceManager*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_freedLowestPriorityList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_freedLowestPriorityList, "CPtrList");
	return 1;
}

static int tolua_get_CResourceManager_m_freedHighestPriorityList(lua_State* L)
{
	CResourceManager* self = (CResourceManager*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_freedHighestPriorityList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_freedHighestPriorityList, "CPtrList");
	return 1;
}

static int tolua_get_CResourceManager_m_freedPersistentPriorityList(lua_State* L)
{
	CResourceManager* self = (CResourceManager*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_freedPersistentPriorityList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_freedPersistentPriorityList, "CPtrList");
	return 1;
}

static int tolua_get_CResourceManager_m_hashTable(lua_State* L)
{
	CResourceManager* self = (CResourceManager*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hashTable'", NULL);
	tolua_pushusertype(L, (void*)&self->m_hashTable, "CResourceManagerHashTable");
	return 1;
}

static int tolua_get_CResourceManager_m_bTemporaryKeyAdd(lua_State* L)
{
	CResourceManager* self = (CResourceManager*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bTemporaryKeyAdd'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bTemporaryKeyAdd);
	return 1;
}

static int tolua_set_CResourceManager_m_bTemporaryKeyAdd(lua_State* L)
{
	CResourceManager* self = (CResourceManager*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bTemporaryKeyAdd'", NULL);
	self->m_bTemporaryKeyAdd = tolua_setter_tointeger<byte>(L, "m_bTemporaryKeyAdd");
	return 0;
}

static int tolua_get_CResourceManager_reference_m_bTemporaryKeyAdd(lua_State* L)
{
	CResourceManager* self = (CResourceManager*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManager");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bTemporaryKeyAdd'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bTemporaryKeyAdd, "Primitive<byte>");
	return 1;
}

static int tolua_function_CResourceManager_GetResObject(lua_State* L)
{
	CResourceManager* self = (CResourceManager*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManager");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'GetResObject'", NULL);
	CRes* returnVal = self->GetResObject((CResRef*)tolua_tousertype_dynamic(L, 2, 0, "CResRef"), tolua_function_tointeger<int>(L, 3, "GetResObject"));
	tolua_pushusertype(L, (void*)returnVal, "CRes");
	return 1;
}

static int tolua_function_CResourceManager_DumpResObject(lua_State* L)
{
	CResourceManager* self = (CResourceManager*)tolua_tousertype_dynamic(L, 1, 0, "CResourceManager");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'DumpResObject'", NULL);
	self->DumpResObject((CRes*)tolua_tousertype_dynamic(L, 2, 0, "CRes"));
	return 0;
}

static int tolua_get_CInfinity_m_aTileSets(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_aTileSets'", NULL);
	tolua_pushusertype(L, (void*)&self->m_aTileSets, "Array<CInfTileSet*,5>");
	return 1;
}

static int tolua_get_CInfinity_m_pResWED(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pResWED'", NULL);
	tolua_pushusertype(L, (void*)self->m_pResWED, "CResWED");
	return 1;
}

static int tolua_set_CInfinity_m_pResWED(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pResWED'", NULL);
	self->m_pResWED = (CResWED*)tolua_tousertype_dynamic(L, 2, 0, "CResWED");
	return 0;
}

static int tolua_get_CInfinity_reference_m_pResWED(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pResWED'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pResWED, "Pointer<CResWED>");
	return 1;
}

static int tolua_get_CInfinity_m_pVRPool(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pVRPool'", NULL);
	tolua_pushusertype(L, (void*)self->m_pVRPool, "CVRamPool");
	return 1;
}

static int tolua_set_CInfinity_m_pVRPool(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pVRPool'", NULL);
	self->m_pVRPool = (CVRamPool*)tolua_tousertype_dynamic(L, 2, 0, "CVRamPool");
	return 0;
}

static int tolua_get_CInfinity_reference_m_pVRPool(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pVRPool'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pVRPool, "Pointer<CVRamPool>");
	return 1;
}

static int tolua_get_CInfinity_m_pVidMode(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pVidMode'", NULL);
	tolua_pushusertype(L, (void*)self->m_pVidMode, "CVidMode");
	return 1;
}

static int tolua_set_CInfinity_m_pVidMode(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pVidMode'", NULL);
	self->m_pVidMode = (CVidMode*)tolua_tousertype_dynamic(L, 2, 0, "CVidMode");
	return 0;
}

static int tolua_get_CInfinity_reference_m_pVidMode(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pVidMode'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pVidMode, "Pointer<CVidMode>");
	return 1;
}

static int tolua_get_CInfinity_m_bRefreshVRamRect(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bRefreshVRamRect'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bRefreshVRamRect);
	return 1;
}

static int tolua_set_CInfinity_m_bRefreshVRamRect(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bRefreshVRamRect'", NULL);
	self->m_bRefreshVRamRect = tolua_setter_tointeger<int>(L, "m_bRefreshVRamRect");
	return 0;
}

static int tolua_get_CInfinity_reference_m_bRefreshVRamRect(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bRefreshVRamRect'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bRefreshVRamRect, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_bInitialized(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInitialized'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bInitialized);
	return 1;
}

static int tolua_set_CInfinity_m_bInitialized(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInitialized'", NULL);
	self->m_bInitialized = tolua_setter_tointeger<int>(L, "m_bInitialized");
	return 0;
}

static int tolua_get_CInfinity_reference_m_bInitialized(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInitialized'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bInitialized, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_bWEDDemanded(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bWEDDemanded'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bWEDDemanded);
	return 1;
}

static int tolua_set_CInfinity_m_bWEDDemanded(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bWEDDemanded'", NULL);
	self->m_bWEDDemanded = tolua_setter_tointeger<int>(L, "m_bWEDDemanded");
	return 0;
}

static int tolua_get_CInfinity_reference_m_bWEDDemanded(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bWEDDemanded'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bWEDDemanded, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nOffsetX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOffsetX'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nOffsetX);
	return 1;
}

static int tolua_set_CInfinity_m_nOffsetX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOffsetX'", NULL);
	self->m_nOffsetX = tolua_setter_tointeger<int>(L, "m_nOffsetX");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nOffsetX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOffsetX'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nOffsetX, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nOffsetY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOffsetY'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nOffsetY);
	return 1;
}

static int tolua_set_CInfinity_m_nOffsetY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOffsetY'", NULL);
	self->m_nOffsetY = tolua_setter_tointeger<int>(L, "m_nOffsetY");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nOffsetY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOffsetY'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nOffsetY, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nTilesAcross(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nTilesAcross'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nTilesAcross);
	return 1;
}

static int tolua_set_CInfinity_m_nTilesAcross(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nTilesAcross'", NULL);
	self->m_nTilesAcross = tolua_setter_tointeger<int>(L, "m_nTilesAcross");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nTilesAcross(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nTilesAcross'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nTilesAcross, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nNewX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nNewX'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nNewX);
	return 1;
}

static int tolua_set_CInfinity_m_nNewX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nNewX'", NULL);
	self->m_nNewX = tolua_setter_tointeger<int>(L, "m_nNewX");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nNewX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nNewX'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nNewX, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nNewY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nNewY'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nNewY);
	return 1;
}

static int tolua_set_CInfinity_m_nNewY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nNewY'", NULL);
	self->m_nNewY = tolua_setter_tointeger<int>(L, "m_nNewY");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nNewY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nNewY'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nNewY, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_rViewPort(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rViewPort'", NULL);
	tolua_pushusertype(L, (void*)&self->m_rViewPort, "CRect");
	return 1;
}

static int tolua_get_CInfinity_m_nVisibleTilesX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nVisibleTilesX'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nVisibleTilesX);
	return 1;
}

static int tolua_set_CInfinity_m_nVisibleTilesX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nVisibleTilesX'", NULL);
	self->m_nVisibleTilesX = tolua_setter_tointeger<int>(L, "m_nVisibleTilesX");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nVisibleTilesX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nVisibleTilesX'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nVisibleTilesX, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nVisibleTilesY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nVisibleTilesY'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nVisibleTilesY);
	return 1;
}

static int tolua_set_CInfinity_m_nVisibleTilesY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nVisibleTilesY'", NULL);
	self->m_nVisibleTilesY = tolua_setter_tointeger<int>(L, "m_nVisibleTilesY");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nVisibleTilesY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nVisibleTilesY'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nVisibleTilesY, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nAreaWidth(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nAreaWidth'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nAreaWidth);
	return 1;
}

static int tolua_set_CInfinity_m_nAreaWidth(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nAreaWidth'", NULL);
	self->m_nAreaWidth = tolua_setter_tointeger<int>(L, "m_nAreaWidth");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nAreaWidth(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nAreaWidth'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nAreaWidth, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nAreaHeight(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nAreaHeight'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nAreaHeight);
	return 1;
}

static int tolua_set_CInfinity_m_nAreaHeight(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nAreaHeight'", NULL);
	self->m_nAreaHeight = tolua_setter_tointeger<int>(L, "m_nAreaHeight");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nAreaHeight(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nAreaHeight'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nAreaHeight, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nCurrentTileX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentTileX'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCurrentTileX);
	return 1;
}

static int tolua_set_CInfinity_m_nCurrentTileX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentTileX'", NULL);
	self->m_nCurrentTileX = tolua_setter_tointeger<int>(L, "m_nCurrentTileX");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nCurrentTileX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentTileX'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCurrentTileX, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nCurrentTileY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentTileY'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCurrentTileY);
	return 1;
}

static int tolua_set_CInfinity_m_nCurrentTileY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentTileY'", NULL);
	self->m_nCurrentTileY = tolua_setter_tointeger<int>(L, "m_nCurrentTileY");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nCurrentTileY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentTileY'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCurrentTileY, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nCurrentX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentX'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCurrentX);
	return 1;
}

static int tolua_set_CInfinity_m_nCurrentX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentX'", NULL);
	self->m_nCurrentX = tolua_setter_tointeger<int>(L, "m_nCurrentX");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nCurrentX(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentX'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCurrentX, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nCurrentY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentY'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCurrentY);
	return 1;
}

static int tolua_set_CInfinity_m_nCurrentY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentY'", NULL);
	self->m_nCurrentY = tolua_setter_tointeger<int>(L, "m_nCurrentY");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nCurrentY(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentY'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCurrentY, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nCurrentRainLevel(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentRainLevel'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCurrentRainLevel);
	return 1;
}

static int tolua_set_CInfinity_m_nCurrentRainLevel(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentRainLevel'", NULL);
	self->m_nCurrentRainLevel = tolua_setter_tointeger<int>(L, "m_nCurrentRainLevel");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nCurrentRainLevel(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCurrentRainLevel'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCurrentRainLevel, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nNextRainLevel(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nNextRainLevel'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nNextRainLevel);
	return 1;
}

static int tolua_set_CInfinity_m_nNextRainLevel(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nNextRainLevel'", NULL);
	self->m_nNextRainLevel = tolua_setter_tointeger<int>(L, "m_nNextRainLevel");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nNextRainLevel(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nNextRainLevel'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nNextRainLevel, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nAreaType(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nAreaType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nAreaType);
	return 1;
}

static int tolua_set_CInfinity_m_nAreaType(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nAreaType'", NULL);
	self->m_nAreaType = tolua_setter_tointeger<ushort>(L, "m_nAreaType");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nAreaType(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nAreaType'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nAreaType, "Primitive<ushort>");
	return 1;
}

static int tolua_get_CInfinity_m_nRenderDayNightCode(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nRenderDayNightCode'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nRenderDayNightCode);
	return 1;
}

static int tolua_set_CInfinity_m_nRenderDayNightCode(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nRenderDayNightCode'", NULL);
	self->m_nRenderDayNightCode = tolua_setter_tointeger<byte>(L, "m_nRenderDayNightCode");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nRenderDayNightCode(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nRenderDayNightCode'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nRenderDayNightCode, "Primitive<byte>");
	return 1;
}

static int tolua_get_CInfinity_m_nOldRenderDayNightCode(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOldRenderDayNightCode'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nOldRenderDayNightCode);
	return 1;
}

static int tolua_set_CInfinity_m_nOldRenderDayNightCode(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOldRenderDayNightCode'", NULL);
	self->m_nOldRenderDayNightCode = tolua_setter_tointeger<byte>(L, "m_nOldRenderDayNightCode");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nOldRenderDayNightCode(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOldRenderDayNightCode'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nOldRenderDayNightCode, "Primitive<byte>");
	return 1;
}

static int tolua_get_CInfinity_m_nOldRequestDualTileCode(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOldRequestDualTileCode'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nOldRequestDualTileCode);
	return 1;
}

static int tolua_set_CInfinity_m_nOldRequestDualTileCode(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOldRequestDualTileCode'", NULL);
	self->m_nOldRequestDualTileCode = tolua_setter_tointeger<byte>(L, "m_nOldRequestDualTileCode");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nOldRequestDualTileCode(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOldRequestDualTileCode'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nOldRequestDualTileCode, "Primitive<byte>");
	return 1;
}

static int tolua_get_CInfinity_m_bResizedViewPort(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bResizedViewPort'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bResizedViewPort);
	return 1;
}

static int tolua_set_CInfinity_m_bResizedViewPort(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bResizedViewPort'", NULL);
	self->m_bResizedViewPort = tolua_setter_tointeger<byte>(L, "m_bResizedViewPort");
	return 0;
}

static int tolua_get_CInfinity_reference_m_bResizedViewPort(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bResizedViewPort'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bResizedViewPort, "Primitive<byte>");
	return 1;
}

static int tolua_get_CInfinity_m_nLastTickCount(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nLastTickCount'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nLastTickCount);
	return 1;
}

static int tolua_set_CInfinity_m_nLastTickCount(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nLastTickCount'", NULL);
	self->m_nLastTickCount = tolua_setter_tointeger<DWORD>(L, "m_nLastTickCount");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nLastTickCount(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nLastTickCount'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nLastTickCount, "Primitive<DWORD>");
	return 1;
}

static int tolua_get_CInfinity_m_ptCurrentPosExact(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_ptCurrentPosExact'", NULL);
	tolua_pushusertype(L, (void*)&self->m_ptCurrentPosExact, "CPoint");
	return 1;
}

static int tolua_get_CInfinity_m_viewPositionLock(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_viewPositionLock'", NULL);
	tolua_pushusertype(L, (void*)&self->m_viewPositionLock, "CSyncObject");
	return 1;
}

static int tolua_get_CInfinity_m_autoScrollSpeed(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_autoScrollSpeed'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_autoScrollSpeed);
	return 1;
}

static int tolua_set_CInfinity_m_autoScrollSpeed(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_autoScrollSpeed'", NULL);
	self->m_autoScrollSpeed = tolua_setter_tointeger<ushort>(L, "m_autoScrollSpeed");
	return 0;
}

static int tolua_get_CInfinity_reference_m_autoScrollSpeed(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_autoScrollSpeed'", NULL);
	tolua_pushusertype(L, (void*)&self->m_autoScrollSpeed, "Primitive<ushort>");
	return 1;
}

static int tolua_get_CInfinity_m_ptScrollDest(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_ptScrollDest'", NULL);
	tolua_pushusertype(L, (void*)&self->m_ptScrollDest, "CPoint");
	return 1;
}

static int tolua_get_CInfinity_m_nOldScrollState(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOldScrollState'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nOldScrollState);
	return 1;
}

static int tolua_set_CInfinity_m_nOldScrollState(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOldScrollState'", NULL);
	self->m_nOldScrollState = tolua_setter_tointeger<int>(L, "m_nOldScrollState");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nOldScrollState(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nOldScrollState'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nOldScrollState, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_nScrollDelay(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nScrollDelay'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nScrollDelay);
	return 1;
}

static int tolua_set_CInfinity_m_nScrollDelay(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nScrollDelay'", NULL);
	self->m_nScrollDelay = tolua_setter_tointeger<byte>(L, "m_nScrollDelay");
	return 0;
}

static int tolua_get_CInfinity_reference_m_nScrollDelay(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nScrollDelay'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nScrollDelay, "Primitive<byte>");
	return 1;
}

static int tolua_get_CInfinity_m_rgbGlobalLighting(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rgbGlobalLighting'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_rgbGlobalLighting);
	return 1;
}

static int tolua_set_CInfinity_m_rgbGlobalLighting(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rgbGlobalLighting'", NULL);
	self->m_rgbGlobalLighting = tolua_setter_tointeger<uint>(L, "m_rgbGlobalLighting");
	return 0;
}

static int tolua_get_CInfinity_reference_m_rgbGlobalLighting(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_rgbGlobalLighting'", NULL);
	tolua_pushusertype(L, (void*)&self->m_rgbGlobalLighting, "Primitive<uint>");
	return 1;
}

static int tolua_get_CInfinity_m_updateListenPosition(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_updateListenPosition'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_updateListenPosition);
	return 1;
}

static int tolua_set_CInfinity_m_updateListenPosition(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_updateListenPosition'", NULL);
	self->m_updateListenPosition = tolua_setter_tointeger<int>(L, "m_updateListenPosition");
	return 0;
}

static int tolua_get_CInfinity_reference_m_updateListenPosition(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_updateListenPosition'", NULL);
	tolua_pushusertype(L, (void*)&self->m_updateListenPosition, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfinity_m_pArea(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pArea'", NULL);
	tolua_pushusertype(L, (void*)self->m_pArea, "CGameArea");
	return 1;
}

static int tolua_set_CInfinity_m_pArea(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pArea'", NULL);
	self->m_pArea = (CGameArea*)tolua_tousertype_dynamic(L, 2, 0, "CGameArea");
	return 0;
}

static int tolua_get_CInfinity_reference_m_pArea(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pArea'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pArea, "Pointer<CGameArea>");
	return 1;
}

static int tolua_get_CInfinity_m_bRenderMessage(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bRenderMessage'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bRenderMessage);
	return 1;
}

static int tolua_set_CInfinity_m_bRenderMessage(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bRenderMessage'", NULL);
	self->m_bRenderMessage = tolua_setter_tointeger<byte>(L, "m_bRenderMessage");
	return 0;
}

static int tolua_get_CInfinity_reference_m_bRenderMessage(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bRenderMessage'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bRenderMessage, "Primitive<byte>");
	return 1;
}

static int tolua_function_CInfinity_Export_Override_GetWorldCoordinates(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Export_Override_GetWorldCoordinates'", NULL);
	CPoint* returnVal = self->Export_Override_GetWorldCoordinates((CPoint*)tolua_tousertype_dynamic(L, 2, 0, "CPoint"), (CPoint*)tolua_tousertype_dynamic(L, 3, 0, "CPoint"));
	tolua_pushusertype(L, (void*)returnVal, "CPoint");
	return 1;
}

static int tolua_function_CInfinity_Export_Override_SetViewPosition(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Export_Override_SetViewPosition'", NULL);
	int returnVal = self->Export_Override_SetViewPosition(tolua_function_tointeger<int>(L, 2, "Export_Override_SetViewPosition"), tolua_function_tointeger<int>(L, 3, "Export_Override_SetViewPosition"), tolua_function_tointeger<byte>(L, 4, "Export_Override_SetViewPosition"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CInfinity_Export_SetViewPositionAdjustToCenter(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Export_SetViewPositionAdjustToCenter'", NULL);
	int returnVal = self->Export_SetViewPositionAdjustToCenter(tolua_function_tointeger<int>(L, 2, "Export_SetViewPositionAdjustToCenter"), tolua_function_tointeger<int>(L, 3, "Export_SetViewPositionAdjustToCenter"), tolua_function_tointeger<byte>(L, 4, "Export_SetViewPositionAdjustToCenter"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CInfinity_Export_SetViewPositionIgnoreBounds(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Export_SetViewPositionIgnoreBounds'", NULL);
	int returnVal = self->Export_SetViewPositionIgnoreBounds(tolua_function_tointeger<int>(L, 2, "Export_SetViewPositionIgnoreBounds"), tolua_function_tointeger<int>(L, 3, "Export_SetViewPositionIgnoreBounds"), tolua_function_tointeger<byte>(L, 4, "Export_SetViewPositionIgnoreBounds"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CInfinity_SetViewPosition(lua_State* L)
{
	CInfinity* self = (CInfinity*)tolua_tousertype_dynamic(L, 1, 0, "CInfinity");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'SetViewPosition'", NULL);
	int returnVal = self->SetViewPosition(tolua_function_tointeger<int>(L, 2, "SetViewPosition"), tolua_function_tointeger<int>(L, 3, "SetViewPosition"), tolua_function_toboolean(L, 4, "SetViewPosition"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_CGameArea_m_bAreaLoaded(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAreaLoaded'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bAreaLoaded);
	return 1;
}

static int tolua_set_CGameArea_m_bAreaLoaded(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAreaLoaded'", NULL);
	self->m_bAreaLoaded = tolua_setter_tointeger<byte>(L, "m_bAreaLoaded");
	return 0;
}

static int tolua_get_CGameArea_reference_m_bAreaLoaded(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAreaLoaded'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bAreaLoaded, "Primitive<byte>");
	return 1;
}

static int tolua_get_CGameArea_m_pResWED(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pResWED'", NULL);
	tolua_pushusertype(L, (void*)self->m_pResWED, "CResWED");
	return 1;
}

static int tolua_set_CGameArea_m_pResWED(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pResWED'", NULL);
	self->m_pResWED = (CResWED*)tolua_tousertype_dynamic(L, 2, 0, "CResWED");
	return 0;
}

static int tolua_get_CGameArea_reference_m_pResWED(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pResWED'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pResWED, "Pointer<CResWED>");
	return 1;
}

static int tolua_get_CGameArea_m_listsCriticalSection(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_listsCriticalSection'", NULL);
	tolua_pushusertype(L, (void*)&self->m_listsCriticalSection, "CRITICAL_SECTION");
	return 1;
}

static int tolua_get_CGameArea_m_pGame(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pGame'", NULL);
	tolua_pushusertype(L, (void*)self->m_pGame, "CInfGame");
	return 1;
}

static int tolua_set_CGameArea_m_pGame(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pGame'", NULL);
	self->m_pGame = (CInfGame*)tolua_tousertype_dynamic(L, 2, 0, "CInfGame");
	return 0;
}

static int tolua_get_CGameArea_reference_m_pGame(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pGame'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pGame, "Pointer<CInfGame>");
	return 1;
}

static int tolua_get_CGameArea_m_nScrollState(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nScrollState'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nScrollState);
	return 1;
}

static int tolua_set_CGameArea_m_nScrollState(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nScrollState'", NULL);
	self->m_nScrollState = tolua_setter_tointeger<int>(L, "m_nScrollState");
	return 0;
}

static int tolua_get_CGameArea_reference_m_nScrollState(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nScrollState'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nScrollState, "Primitive<int>");
	return 1;
}

static int tolua_get_CGameArea_m_nToolTip(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nToolTip'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nToolTip);
	return 1;
}

static int tolua_set_CGameArea_m_nToolTip(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nToolTip'", NULL);
	self->m_nToolTip = tolua_setter_tointeger<int>(L, "m_nToolTip");
	return 0;
}

static int tolua_get_CGameArea_reference_m_nToolTip(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nToolTip'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nToolTip, "Primitive<int>");
	return 1;
}

static int tolua_get_CGameArea_m_cursorPos(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cursorPos'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cursorPos, "CPoint");
	return 1;
}

static int tolua_get_CGameArea_m_firstRender(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_firstRender'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_firstRender);
	return 1;
}

static int tolua_set_CGameArea_m_firstRender(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_firstRender'", NULL);
	self->m_firstRender = tolua_setter_tointeger<byte>(L, "m_firstRender");
	return 0;
}

static int tolua_get_CGameArea_reference_m_firstRender(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_firstRender'", NULL);
	tolua_pushusertype(L, (void*)&self->m_firstRender, "Primitive<byte>");
	return 1;
}

static int tolua_get_CGameArea_m_selectSquare(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_selectSquare'", NULL);
	tolua_pushusertype(L, (void*)&self->m_selectSquare, "CRect");
	return 1;
}

static int tolua_get_CGameArea_m_moveDest(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_moveDest'", NULL);
	tolua_pushusertype(L, (void*)&self->m_moveDest, "CPoint");
	return 1;
}

static int tolua_get_CGameArea_m_groupMove(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_groupMove'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_groupMove);
	return 1;
}

static int tolua_set_CGameArea_m_groupMove(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_groupMove'", NULL);
	self->m_groupMove = tolua_setter_tointeger<int>(L, "m_groupMove");
	return 0;
}

static int tolua_get_CGameArea_reference_m_groupMove(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_groupMove'", NULL);
	tolua_pushusertype(L, (void*)&self->m_groupMove, "Primitive<int>");
	return 1;
}

static int tolua_get_CGameArea_m_cInfinity(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cInfinity'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cInfinity, "CInfinity");
	return 1;
}

static int tolua_get_CGameArea_m_search(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_search'", NULL);
	tolua_pushusertype(L, (void*)&self->m_search, "CSearchBitmap");
	return 1;
}

static int tolua_get_CGameArea_m_visibility(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_visibility'", NULL);
	tolua_pushusertype(L, (void*)&self->m_visibility, "CVisibilityMap");
	return 1;
}

static int tolua_function_CGameArea_Export_Override_OnMouseMove(lua_State* L)
{
	CGameArea* self = (CGameArea*)tolua_tousertype_dynamic(L, 1, 0, "CGameArea");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Export_Override_OnMouseMove'", NULL);
	self->Export_Override_OnMouseMove((CPoint*)tolua_tousertype_dynamic(L, 2, 0, "CPoint"));
	return 0;
}

static int tolua_get_CInfButtonArray_m_buttonTypes(lua_State* L)
{
	CInfButtonArray* self = (CInfButtonArray*)tolua_tousertype_dynamic(L, 1, 0, "CInfButtonArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_buttonTypes'", NULL);
	tolua_pushusertype(L, (void*)&self->m_buttonTypes, "Array<int,12>");
	return 1;
}

static int tolua_get_CInfButtonArray_m_buttonToConfigure(lua_State* L)
{
	CInfButtonArray* self = (CInfButtonArray*)tolua_tousertype_dynamic(L, 1, 0, "CInfButtonArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_buttonToConfigure'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_buttonToConfigure);
	return 1;
}

static int tolua_set_CInfButtonArray_m_buttonToConfigure(lua_State* L)
{
	CInfButtonArray* self = (CInfButtonArray*)tolua_tousertype_dynamic(L, 1, 0, "CInfButtonArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_buttonToConfigure'", NULL);
	self->m_buttonToConfigure = tolua_setter_tointeger<int>(L, "m_buttonToConfigure");
	return 0;
}

static int tolua_get_CInfButtonArray_reference_m_buttonToConfigure(lua_State* L)
{
	CInfButtonArray* self = (CInfButtonArray*)tolua_tousertype_dynamic(L, 1, 0, "CInfButtonArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_buttonToConfigure'", NULL);
	tolua_pushusertype(L, (void*)&self->m_buttonToConfigure, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfButtonArray_m_nState(lua_State* L)
{
	CInfButtonArray* self = (CInfButtonArray*)tolua_tousertype_dynamic(L, 1, 0, "CInfButtonArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nState'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nState);
	return 1;
}

static int tolua_set_CInfButtonArray_m_nState(lua_State* L)
{
	CInfButtonArray* self = (CInfButtonArray*)tolua_tousertype_dynamic(L, 1, 0, "CInfButtonArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nState'", NULL);
	self->m_nState = tolua_setter_tointeger<int>(L, "m_nState");
	return 0;
}

static int tolua_get_CInfButtonArray_reference_m_nState(lua_State* L)
{
	CInfButtonArray* self = (CInfButtonArray*)tolua_tousertype_dynamic(L, 1, 0, "CInfButtonArray");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nState'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nState, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfGame_m_ruleTables(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_ruleTables'", NULL);
	tolua_pushusertype(L, (void*)&self->m_ruleTables, "CRuleTables");
	return 1;
}

static int tolua_get_CInfGame_m_worldTime__m_gameTime(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_worldTime__m_gameTime'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_worldTime__m_gameTime);
	return 1;
}

static int tolua_set_CInfGame_m_worldTime__m_gameTime(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_worldTime__m_gameTime'", NULL);
	self->m_worldTime__m_gameTime = tolua_setter_tointeger<uint>(L, "m_worldTime__m_gameTime");
	return 0;
}

static int tolua_get_CInfGame_reference_m_worldTime__m_gameTime(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_worldTime__m_gameTime'", NULL);
	tolua_pushusertype(L, (void*)&self->m_worldTime__m_gameTime, "Primitive<uint>");
	return 1;
}

static int tolua_get_CInfGame_m_bGameLoaded(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bGameLoaded'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bGameLoaded);
	return 1;
}

static int tolua_set_CInfGame_m_bGameLoaded(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bGameLoaded'", NULL);
	self->m_bGameLoaded = tolua_setter_tointeger<int>(L, "m_bGameLoaded");
	return 0;
}

static int tolua_get_CInfGame_reference_m_bGameLoaded(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bGameLoaded'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bGameLoaded, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfGame_m_bInLoadGame(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInLoadGame'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bInLoadGame);
	return 1;
}

static int tolua_set_CInfGame_m_bInLoadGame(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInLoadGame'", NULL);
	self->m_bInLoadGame = tolua_setter_tointeger<byte>(L, "m_bInLoadGame");
	return 0;
}

static int tolua_get_CInfGame_reference_m_bInLoadGame(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInLoadGame'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bInLoadGame, "Primitive<byte>");
	return 1;
}

static int tolua_get_CInfGame_m_nState(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nState'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nState);
	return 1;
}

static int tolua_set_CInfGame_m_nState(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nState'", NULL);
	self->m_nState = tolua_setter_tointeger<short>(L, "m_nState");
	return 0;
}

static int tolua_get_CInfGame_reference_m_nState(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nState'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nState, "Primitive<short>");
	return 1;
}

static int tolua_get_CInfGame_m_tempCursor(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_tempCursor'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_tempCursor);
	return 1;
}

static int tolua_set_CInfGame_m_tempCursor(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_tempCursor'", NULL);
	self->m_tempCursor = tolua_setter_tointeger<byte>(L, "m_tempCursor");
	return 0;
}

static int tolua_get_CInfGame_reference_m_tempCursor(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_tempCursor'", NULL);
	tolua_pushusertype(L, (void*)&self->m_tempCursor, "Primitive<byte>");
	return 1;
}

static int tolua_get_CInfGame_m_cButtonArray(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cButtonArray'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cButtonArray, "CInfButtonArray");
	return 1;
}

static int tolua_get_CInfGame_objectArray(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'objectArray'", NULL);
	tolua_pushusertype(L, (void*)&self->objectArray, "CGameObjectArray");
	return 1;
}

static int tolua_get_CInfGame_m_visibleArea(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_visibleArea'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_visibleArea);
	return 1;
}

static int tolua_set_CInfGame_m_visibleArea(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_visibleArea'", NULL);
	self->m_visibleArea = tolua_setter_tointeger<byte>(L, "m_visibleArea");
	return 0;
}

static int tolua_get_CInfGame_reference_m_visibleArea(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_visibleArea'", NULL);
	tolua_pushusertype(L, (void*)&self->m_visibleArea, "Primitive<byte>");
	return 1;
}

static int tolua_get_CInfGame_m_gameAreas(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_gameAreas'", NULL);
	tolua_pushusertype(L, (void*)&self->m_gameAreas, "Array<CGameArea*,12>");
	return 1;
}

static int tolua_get_CInfGame_m_pGameAreaMaster(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pGameAreaMaster'", NULL);
	tolua_pushusertype(L, (void*)self->m_pGameAreaMaster, "CGameArea");
	return 1;
}

static int tolua_set_CInfGame_m_pGameAreaMaster(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pGameAreaMaster'", NULL);
	self->m_pGameAreaMaster = (CGameArea*)tolua_tousertype_dynamic(L, 2, 0, "CGameArea");
	return 0;
}

static int tolua_get_CInfGame_reference_m_pGameAreaMaster(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pGameAreaMaster'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pGameAreaMaster, "Pointer<CGameArea>");
	return 1;
}

static int tolua_get_CInfGame_m_characters(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_characters'", NULL);
	tolua_pushusertype(L, (void*)&self->m_characters, "Array<int,6>");
	return 1;
}

static int tolua_get_CInfGame_m_charactersPortrait(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_charactersPortrait'", NULL);
	tolua_pushusertype(L, (void*)&self->m_charactersPortrait, "Array<int,6>");
	return 1;
}

static int tolua_get_CInfGame_m_nCharacters(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCharacters'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nCharacters);
	return 1;
}

static int tolua_set_CInfGame_m_nCharacters(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCharacters'", NULL);
	self->m_nCharacters = tolua_setter_tointeger<short>(L, "m_nCharacters");
	return 0;
}

static int tolua_get_CInfGame_reference_m_nCharacters(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nCharacters'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nCharacters, "Primitive<short>");
	return 1;
}

static int tolua_get_CInfGame_m_group(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_group'", NULL);
	tolua_pushusertype(L, (void*)&self->m_group, "CAIGroup");
	return 1;
}

static int tolua_get_CInfGame_m_sTempFolder(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sTempFolder'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sTempFolder, "CString");
	return 1;
}

static int tolua_get_CInfGame_m_sTempSaveFolder(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sTempSaveFolder'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sTempSaveFolder, "CString");
	return 1;
}

static int tolua_get_CInfGame_m_sScriptsFolder(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sScriptsFolder'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sScriptsFolder, "CString");
	return 1;
}

static int tolua_get_CInfGame_m_sSoundsFolder(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sSoundsFolder'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sSoundsFolder, "CString");
	return 1;
}

static int tolua_get_CInfGame_m_sPortraitsFolder(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sPortraitsFolder'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sPortraitsFolder, "CString");
	return 1;
}

static int tolua_get_CInfGame_m_sCharactersFolder(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sCharactersFolder'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sCharactersFolder, "CString");
	return 1;
}

static int tolua_get_CInfGame_m_sSaveFolder(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sSaveFolder'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sSaveFolder, "CString");
	return 1;
}

static int tolua_get_CInfGame_m_sMpSaveFolder(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sMpSaveFolder'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sMpSaveFolder, "CString");
	return 1;
}

static int tolua_get_CInfGame_m_curFormation(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_curFormation'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_curFormation);
	return 1;
}

static int tolua_set_CInfGame_m_curFormation(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_curFormation'", NULL);
	self->m_curFormation = tolua_setter_tointeger<short>(L, "m_curFormation");
	return 0;
}

static int tolua_get_CInfGame_reference_m_curFormation(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_curFormation'", NULL);
	tolua_pushusertype(L, (void*)&self->m_curFormation, "Primitive<short>");
	return 1;
}

static int tolua_get_CInfGame_m_inputMode(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_inputMode'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_inputMode);
	return 1;
}

static int tolua_set_CInfGame_m_inputMode(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_inputMode'", NULL);
	self->m_inputMode = tolua_setter_tointeger<uint>(L, "m_inputMode");
	return 0;
}

static int tolua_get_CInfGame_reference_m_inputMode(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_inputMode'", NULL);
	tolua_pushusertype(L, (void*)&self->m_inputMode, "Primitive<uint>");
	return 1;
}

static int tolua_get_CInfGame_m_cutScene(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cutScene'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_cutScene);
	return 1;
}

static int tolua_set_CInfGame_m_cutScene(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cutScene'", NULL);
	self->m_cutScene = tolua_setter_tointeger<int>(L, "m_cutScene");
	return 0;
}

static int tolua_get_CInfGame_reference_m_cutScene(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cutScene'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cutScene, "Primitive<int>");
	return 1;
}

static int tolua_get_CInfGame_m_nScrollSpeed(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nScrollSpeed'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nScrollSpeed);
	return 1;
}

static int tolua_set_CInfGame_m_nScrollSpeed(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nScrollSpeed'", NULL);
	self->m_nScrollSpeed = tolua_setter_tointeger<uint>(L, "m_nScrollSpeed");
	return 0;
}

static int tolua_get_CInfGame_reference_m_nScrollSpeed(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nScrollSpeed'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nScrollSpeed, "Primitive<uint>");
	return 1;
}

static int tolua_get_CInfGame_m_nKeyScrollSpeed(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nKeyScrollSpeed'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nKeyScrollSpeed);
	return 1;
}

static int tolua_set_CInfGame_m_nKeyScrollSpeed(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nKeyScrollSpeed'", NULL);
	self->m_nKeyScrollSpeed = tolua_setter_tointeger<uint>(L, "m_nKeyScrollSpeed");
	return 0;
}

static int tolua_get_CInfGame_reference_m_nKeyScrollSpeed(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nKeyScrollSpeed'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nKeyScrollSpeed, "Primitive<uint>");
	return 1;
}

static int tolua_get_CInfGame_m_aHotkeyToVirtualKey(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_aHotkeyToVirtualKey'", NULL);
	tolua_pushusertype(L, (void*)&self->m_aHotkeyToVirtualKey, "Array<byte,168>");
	return 1;
}

static int tolua_get_CInfGame_m_aHotkeyDefinedWithCtrlPrefix(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_aHotkeyDefinedWithCtrlPrefix'", NULL);
	tolua_pushusertype(L, (void*)&self->m_aHotkeyDefinedWithCtrlPrefix, "Array<byte,168>");
	return 1;
}

static int tolua_get_CInfGame_m_hSearchThread(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hSearchThread'", NULL);
	tolua_pushusertype(L, (void*)self->m_hSearchThread, "HANDLE");
	return 1;
}

static int tolua_set_CInfGame_m_hSearchThread(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hSearchThread'", NULL);
	self->m_hSearchThread = (HANDLE)tolua_tousertype_dynamic(L, 2, 0, "HANDLE");
	return 0;
}

static int tolua_get_CInfGame_reference_m_hSearchThread(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hSearchThread'", NULL);
	tolua_pushusertype(L, (void*)&self->m_hSearchThread, "HANDLE<HANDLE>");
	return 1;
}

static int tolua_get_CInfGame_m_bPartyAI(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bPartyAI'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bPartyAI);
	return 1;
}

static int tolua_set_CInfGame_m_bPartyAI(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bPartyAI'", NULL);
	self->m_bPartyAI = tolua_setter_tointeger<byte>(L, "m_bPartyAI");
	return 0;
}

static int tolua_get_CInfGame_reference_m_bPartyAI(lua_State* L)
{
	CInfGame* self = (CInfGame*)tolua_tousertype_dynamic(L, 1, 0, "CInfGame");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bPartyAI'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bPartyAI, "Primitive<byte>");
	return 1;
}

static int tolua_get_CGameObjectArrayEntry_m_shareCounts(lua_State* L)
{
	CGameObjectArrayEntry* self = (CGameObjectArrayEntry*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArrayEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_shareCounts'", NULL);
	tolua_pushusertype(L, (void*)&self->m_shareCounts, "Array<byte,3>");
	return 1;
}

static int tolua_get_CGameObjectArrayEntry_m_denyCounts(lua_State* L)
{
	CGameObjectArrayEntry* self = (CGameObjectArrayEntry*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArrayEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_denyCounts'", NULL);
	tolua_pushusertype(L, (void*)&self->m_denyCounts, "Array<byte,3>");
	return 1;
}

static int tolua_get_CGameObjectArrayEntry_m_objectId(lua_State* L)
{
	CGameObjectArrayEntry* self = (CGameObjectArrayEntry*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArrayEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_objectId'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_objectId);
	return 1;
}

static int tolua_set_CGameObjectArrayEntry_m_objectId(lua_State* L)
{
	CGameObjectArrayEntry* self = (CGameObjectArrayEntry*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArrayEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_objectId'", NULL);
	self->m_objectId = tolua_setter_tointeger<short>(L, "m_objectId");
	return 0;
}

static int tolua_get_CGameObjectArrayEntry_reference_m_objectId(lua_State* L)
{
	CGameObjectArrayEntry* self = (CGameObjectArrayEntry*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArrayEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_objectId'", NULL);
	tolua_pushusertype(L, (void*)&self->m_objectId, "Primitive<short>");
	return 1;
}

static int tolua_get_CGameObjectArrayEntry_m_objectPtr(lua_State* L)
{
	CGameObjectArrayEntry* self = (CGameObjectArrayEntry*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArrayEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_objectPtr'", NULL);
	tolua_pushusertype(L, (void*)self->m_objectPtr, "CGameObject");
	return 1;
}

static int tolua_set_CGameObjectArrayEntry_m_objectPtr(lua_State* L)
{
	CGameObjectArrayEntry* self = (CGameObjectArrayEntry*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArrayEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_objectPtr'", NULL);
	self->m_objectPtr = (CGameObject*)tolua_tousertype_dynamic(L, 2, 0, "CGameObject");
	return 0;
}

static int tolua_get_CGameObjectArrayEntry_reference_m_objectPtr(lua_State* L)
{
	CGameObjectArrayEntry* self = (CGameObjectArrayEntry*)tolua_tousertype_dynamic(L, 1, 0, "CGameObjectArrayEntry");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_objectPtr'", NULL);
	tolua_pushusertype(L, (void*)&self->m_objectPtr, "Pointer<CGameObject>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_version(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_version'", NULL);
	tolua_pushusertype(L, (void*)&self->m_version, "CResRef");
	return 1;
}

static int tolua_get_CGameEffectBase_m_effectId(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectId'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_effectId);
	return 1;
}

static int tolua_set_CGameEffectBase_m_effectId(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectId'", NULL);
	self->m_effectId = tolua_setter_tointeger<uint>(L, "m_effectId");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_effectId(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectId'", NULL);
	tolua_pushusertype(L, (void*)&self->m_effectId, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_targetType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_targetType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_targetType);
	return 1;
}

static int tolua_set_CGameEffectBase_m_targetType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_targetType'", NULL);
	self->m_targetType = tolua_setter_tointeger<uint>(L, "m_targetType");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_targetType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_targetType'", NULL);
	tolua_pushusertype(L, (void*)&self->m_targetType, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_spellLevel(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_spellLevel'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_spellLevel);
	return 1;
}

static int tolua_set_CGameEffectBase_m_spellLevel(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_spellLevel'", NULL);
	self->m_spellLevel = tolua_setter_tointeger<uint>(L, "m_spellLevel");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_spellLevel(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_spellLevel'", NULL);
	tolua_pushusertype(L, (void*)&self->m_spellLevel, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_effectAmount(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_effectAmount);
	return 1;
}

static int tolua_set_CGameEffectBase_m_effectAmount(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount'", NULL);
	self->m_effectAmount = tolua_setter_tointeger<int>(L, "m_effectAmount");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_effectAmount(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount'", NULL);
	tolua_pushusertype(L, (void*)&self->m_effectAmount, "Primitive<int>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_dWFlags(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_dWFlags'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_dWFlags);
	return 1;
}

static int tolua_set_CGameEffectBase_m_dWFlags(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_dWFlags'", NULL);
	self->m_dWFlags = tolua_setter_tointeger<uint>(L, "m_dWFlags");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_dWFlags(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_dWFlags'", NULL);
	tolua_pushusertype(L, (void*)&self->m_dWFlags, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_durationType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_durationType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_durationType);
	return 1;
}

static int tolua_set_CGameEffectBase_m_durationType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_durationType'", NULL);
	self->m_durationType = tolua_setter_tointeger<uint>(L, "m_durationType");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_durationType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_durationType'", NULL);
	tolua_pushusertype(L, (void*)&self->m_durationType, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_duration(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_duration'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_duration);
	return 1;
}

static int tolua_set_CGameEffectBase_m_duration(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_duration'", NULL);
	self->m_duration = tolua_setter_tointeger<uint>(L, "m_duration");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_duration(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_duration'", NULL);
	tolua_pushusertype(L, (void*)&self->m_duration, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_probabilityUpper(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_probabilityUpper'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_probabilityUpper);
	return 1;
}

static int tolua_set_CGameEffectBase_m_probabilityUpper(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_probabilityUpper'", NULL);
	self->m_probabilityUpper = tolua_setter_tointeger<ushort>(L, "m_probabilityUpper");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_probabilityUpper(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_probabilityUpper'", NULL);
	tolua_pushusertype(L, (void*)&self->m_probabilityUpper, "Primitive<ushort>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_probabilityLower(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_probabilityLower'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_probabilityLower);
	return 1;
}

static int tolua_set_CGameEffectBase_m_probabilityLower(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_probabilityLower'", NULL);
	self->m_probabilityLower = tolua_setter_tointeger<ushort>(L, "m_probabilityLower");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_probabilityLower(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_probabilityLower'", NULL);
	tolua_pushusertype(L, (void*)&self->m_probabilityLower, "Primitive<ushort>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_res(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_res'", NULL);
	tolua_pushusertype(L, (void*)&self->m_res, "CResRef");
	return 1;
}

static int tolua_get_CGameEffectBase_m_numDice(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_numDice'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_numDice);
	return 1;
}

static int tolua_set_CGameEffectBase_m_numDice(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_numDice'", NULL);
	self->m_numDice = tolua_setter_tointeger<uint>(L, "m_numDice");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_numDice(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_numDice'", NULL);
	tolua_pushusertype(L, (void*)&self->m_numDice, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_diceSize(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_diceSize'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_diceSize);
	return 1;
}

static int tolua_set_CGameEffectBase_m_diceSize(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_diceSize'", NULL);
	self->m_diceSize = tolua_setter_tointeger<uint>(L, "m_diceSize");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_diceSize(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_diceSize'", NULL);
	tolua_pushusertype(L, (void*)&self->m_diceSize, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_savingThrow(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_savingThrow'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_savingThrow);
	return 1;
}

static int tolua_set_CGameEffectBase_m_savingThrow(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_savingThrow'", NULL);
	self->m_savingThrow = tolua_setter_tointeger<uint>(L, "m_savingThrow");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_savingThrow(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_savingThrow'", NULL);
	tolua_pushusertype(L, (void*)&self->m_savingThrow, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_saveMod(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_saveMod'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_saveMod);
	return 1;
}

static int tolua_set_CGameEffectBase_m_saveMod(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_saveMod'", NULL);
	self->m_saveMod = tolua_setter_tointeger<int>(L, "m_saveMod");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_saveMod(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_saveMod'", NULL);
	tolua_pushusertype(L, (void*)&self->m_saveMod, "Primitive<int>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_special(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_special'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_special);
	return 1;
}

static int tolua_set_CGameEffectBase_m_special(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_special'", NULL);
	self->m_special = tolua_setter_tointeger<uint>(L, "m_special");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_special(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_special'", NULL);
	tolua_pushusertype(L, (void*)&self->m_special, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_school(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_school'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_school);
	return 1;
}

static int tolua_set_CGameEffectBase_m_school(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_school'", NULL);
	self->m_school = tolua_setter_tointeger<uint>(L, "m_school");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_school(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_school'", NULL);
	tolua_pushusertype(L, (void*)&self->m_school, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_JeremyIsAnIdiot(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_JeremyIsAnIdiot'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_JeremyIsAnIdiot);
	return 1;
}

static int tolua_set_CGameEffectBase_m_JeremyIsAnIdiot(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_JeremyIsAnIdiot'", NULL);
	self->m_JeremyIsAnIdiot = tolua_setter_tointeger<uint>(L, "m_JeremyIsAnIdiot");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_JeremyIsAnIdiot(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_JeremyIsAnIdiot'", NULL);
	tolua_pushusertype(L, (void*)&self->m_JeremyIsAnIdiot, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_minLevel(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_minLevel'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_minLevel);
	return 1;
}

static int tolua_set_CGameEffectBase_m_minLevel(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_minLevel'", NULL);
	self->m_minLevel = tolua_setter_tointeger<uint>(L, "m_minLevel");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_minLevel(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_minLevel'", NULL);
	tolua_pushusertype(L, (void*)&self->m_minLevel, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_maxLevel(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_maxLevel'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_maxLevel);
	return 1;
}

static int tolua_set_CGameEffectBase_m_maxLevel(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_maxLevel'", NULL);
	self->m_maxLevel = tolua_setter_tointeger<uint>(L, "m_maxLevel");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_maxLevel(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_maxLevel'", NULL);
	tolua_pushusertype(L, (void*)&self->m_maxLevel, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_flags(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_flags'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_flags);
	return 1;
}

static int tolua_set_CGameEffectBase_m_flags(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_flags'", NULL);
	self->m_flags = tolua_setter_tointeger<uint>(L, "m_flags");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_flags(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_flags'", NULL);
	tolua_pushusertype(L, (void*)&self->m_flags, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_effectAmount2(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount2'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_effectAmount2);
	return 1;
}

static int tolua_set_CGameEffectBase_m_effectAmount2(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount2'", NULL);
	self->m_effectAmount2 = tolua_setter_tointeger<int>(L, "m_effectAmount2");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_effectAmount2(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount2'", NULL);
	tolua_pushusertype(L, (void*)&self->m_effectAmount2, "Primitive<int>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_effectAmount3(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount3'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_effectAmount3);
	return 1;
}

static int tolua_set_CGameEffectBase_m_effectAmount3(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount3'", NULL);
	self->m_effectAmount3 = tolua_setter_tointeger<int>(L, "m_effectAmount3");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_effectAmount3(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount3'", NULL);
	tolua_pushusertype(L, (void*)&self->m_effectAmount3, "Primitive<int>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_effectAmount4(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount4'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_effectAmount4);
	return 1;
}

static int tolua_set_CGameEffectBase_m_effectAmount4(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount4'", NULL);
	self->m_effectAmount4 = tolua_setter_tointeger<int>(L, "m_effectAmount4");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_effectAmount4(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount4'", NULL);
	tolua_pushusertype(L, (void*)&self->m_effectAmount4, "Primitive<int>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_effectAmount5(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount5'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_effectAmount5);
	return 1;
}

static int tolua_set_CGameEffectBase_m_effectAmount5(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount5'", NULL);
	self->m_effectAmount5 = tolua_setter_tointeger<int>(L, "m_effectAmount5");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_effectAmount5(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectAmount5'", NULL);
	tolua_pushusertype(L, (void*)&self->m_effectAmount5, "Primitive<int>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_res2(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_res2'", NULL);
	tolua_pushusertype(L, (void*)&self->m_res2, "CResRef");
	return 1;
}

static int tolua_get_CGameEffectBase_m_res3(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_res3'", NULL);
	tolua_pushusertype(L, (void*)&self->m_res3, "CResRef");
	return 1;
}

static int tolua_get_CGameEffectBase_m_source(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_source'", NULL);
	tolua_pushusertype(L, (void*)&self->m_source, "CPoint");
	return 1;
}

static int tolua_get_CGameEffectBase_m_target(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_target'", NULL);
	tolua_pushusertype(L, (void*)&self->m_target, "CPoint");
	return 1;
}

static int tolua_get_CGameEffectBase_m_sourceType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sourceType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_sourceType);
	return 1;
}

static int tolua_set_CGameEffectBase_m_sourceType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sourceType'", NULL);
	self->m_sourceType = tolua_setter_tointeger<uint>(L, "m_sourceType");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_sourceType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sourceType'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sourceType, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_sourceRes(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sourceRes'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sourceRes, "CResRef");
	return 1;
}

static int tolua_get_CGameEffectBase_m_sourceFlags(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sourceFlags'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_sourceFlags);
	return 1;
}

static int tolua_set_CGameEffectBase_m_sourceFlags(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sourceFlags'", NULL);
	self->m_sourceFlags = tolua_setter_tointeger<uint>(L, "m_sourceFlags");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_sourceFlags(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sourceFlags'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sourceFlags, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_projectileType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_projectileType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_projectileType);
	return 1;
}

static int tolua_set_CGameEffectBase_m_projectileType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_projectileType'", NULL);
	self->m_projectileType = tolua_setter_tointeger<uint>(L, "m_projectileType");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_projectileType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_projectileType'", NULL);
	tolua_pushusertype(L, (void*)&self->m_projectileType, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_slotNum(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_slotNum'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_slotNum);
	return 1;
}

static int tolua_set_CGameEffectBase_m_slotNum(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_slotNum'", NULL);
	self->m_slotNum = tolua_setter_tointeger<int>(L, "m_slotNum");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_slotNum(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_slotNum'", NULL);
	tolua_pushusertype(L, (void*)&self->m_slotNum, "Primitive<int>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_scriptName(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_scriptName'", NULL);
	tolua_pushusertype(L, (void*)&self->m_scriptName, "Array<char,32>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_casterLevel(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_casterLevel'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_casterLevel);
	return 1;
}

static int tolua_set_CGameEffectBase_m_casterLevel(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_casterLevel'", NULL);
	self->m_casterLevel = tolua_setter_tointeger<uint>(L, "m_casterLevel");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_casterLevel(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_casterLevel'", NULL);
	tolua_pushusertype(L, (void*)&self->m_casterLevel, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_firstCall(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_firstCall'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_firstCall);
	return 1;
}

static int tolua_set_CGameEffectBase_m_firstCall(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_firstCall'", NULL);
	self->m_firstCall = tolua_setter_tointeger<uint>(L, "m_firstCall");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_firstCall(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_firstCall'", NULL);
	tolua_pushusertype(L, (void*)&self->m_firstCall, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_secondaryType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_secondaryType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_secondaryType);
	return 1;
}

static int tolua_set_CGameEffectBase_m_secondaryType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_secondaryType'", NULL);
	self->m_secondaryType = tolua_setter_tointeger<uint>(L, "m_secondaryType");
	return 0;
}

static int tolua_get_CGameEffectBase_reference_m_secondaryType(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_secondaryType'", NULL);
	tolua_pushusertype(L, (void*)&self->m_secondaryType, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameEffectBase_m_pad(lua_State* L)
{
	CGameEffectBase* self = (CGameEffectBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffectBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pad'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pad, "Array<uint,15>");
	return 1;
}

static int tolua_get_CGameEffect_m_done(lua_State* L)
{
	CGameEffect* self = (CGameEffect*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffect");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_done'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_done);
	return 1;
}

static int tolua_set_CGameEffect_m_done(lua_State* L)
{
	CGameEffect* self = (CGameEffect*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffect");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_done'", NULL);
	self->m_done = tolua_setter_tointeger<int>(L, "m_done");
	return 0;
}

static int tolua_get_CGameEffect_reference_m_done(lua_State* L)
{
	CGameEffect* self = (CGameEffect*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffect");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_done'", NULL);
	tolua_pushusertype(L, (void*)&self->m_done, "Primitive<int>");
	return 1;
}

static int tolua_function_CGameEffect_virtual_Destruct(lua_State* L)
{
	CGameEffect* self = (CGameEffect*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffect");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Destruct'", NULL);
	self->virtual_Destruct();
	return 0;
}

static int tolua_function_CGameEffect_virtual_Copy(lua_State* L)
{
	CGameEffect* self = (CGameEffect*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffect");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Copy'", NULL);
	CGameEffect* returnVal = self->virtual_Copy();
	tolua_pushusertype(L, (void*)returnVal, "CGameEffect");
	return 1;
}

static int tolua_function_CGameEffect_virtual_ApplyEffect(lua_State* L)
{
	CGameEffect* self = (CGameEffect*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffect");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_ApplyEffect'", NULL);
	self->virtual_ApplyEffect();
	return 0;
}

static int tolua_function_CGameEffect_virtual_ResolveEffect(lua_State* L)
{
	CGameEffect* self = (CGameEffect*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffect");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_ResolveEffect'", NULL);
	self->virtual_ResolveEffect();
	return 0;
}

static int tolua_function_CGameEffect_virtual_OnAddSpecific(lua_State* L)
{
	CGameEffect* self = (CGameEffect*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffect");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnAddSpecific'", NULL);
	self->virtual_OnAddSpecific();
	return 0;
}

static int tolua_function_CGameEffect_virtual_CheckSave(lua_State* L)
{
	CGameEffect* self = (CGameEffect*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffect");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_CheckSave'", NULL);
	int returnVal = self->virtual_CheckSave((CGameSprite*)tolua_tousertype_dynamic(L, 2, 0, "CGameSprite"), (byte*)tolua_tousertype_dynamic(L, 3, 0, "Primitive<byte>"), (byte*)tolua_tousertype_dynamic(L, 4, 0, "Primitive<byte>"), (byte*)tolua_tousertype_dynamic(L, 5, 0, "Primitive<byte>"), (byte*)tolua_tousertype_dynamic(L, 6, 0, "Primitive<byte>"), (byte*)tolua_tousertype_dynamic(L, 7, 0, "Primitive<byte>"), (byte*)tolua_tousertype_dynamic(L, 8, 0, "Primitive<byte>"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CGameEffect_virtual_UsesDice(lua_State* L)
{
	CGameEffect* self = (CGameEffect*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffect");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_UsesDice'", NULL);
	self->virtual_UsesDice();
	return 0;
}

static int tolua_function_CGameEffect_virtual_DisplayString(lua_State* L)
{
	CGameEffect* self = (CGameEffect*)tolua_tousertype_dynamic(L, 1, 0, "CGameEffect");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_DisplayString'", NULL);
	self->virtual_DisplayString();
	return 0;
}

static int tolua_get_CGameEffect__vtbl_Destruct(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameEffect__vtbl_Destruct(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameEffect__vtbl_reference_Destruct(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameEffect__vtbl_Copy(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameEffect__vtbl_Copy(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameEffect__vtbl_reference_Copy(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameEffect__vtbl_ApplyEffect(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameEffect__vtbl_ApplyEffect(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameEffect__vtbl_reference_ApplyEffect(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameEffect__vtbl_ResolveEffect(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameEffect__vtbl_ResolveEffect(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameEffect__vtbl_reference_ResolveEffect(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameEffect__vtbl_OnAddSpecific(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameEffect__vtbl_OnAddSpecific(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameEffect__vtbl_reference_OnAddSpecific(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameEffect__vtbl_CheckSave(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameEffect__vtbl_CheckSave(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameEffect__vtbl_reference_CheckSave(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameEffect__vtbl_UsesDice(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameEffect__vtbl_UsesDice(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameEffect__vtbl_reference_UsesDice(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameEffect__vtbl_DisplayString(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameEffect__vtbl_DisplayString(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameEffect__vtbl_reference_DisplayString(lua_State* L)
{
	return 1;
}

static int tolua_get_CChitin_m_bEngineActive(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bEngineActive'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bEngineActive);
	return 1;
}

static int tolua_set_CChitin_m_bEngineActive(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bEngineActive'", NULL);
	self->m_bEngineActive = tolua_setter_tointeger<int>(L, "m_bEngineActive");
	return 0;
}

static int tolua_get_CChitin_reference_m_bEngineActive(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bEngineActive'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bEngineActive, "Primitive<int>");
	return 1;
}

static int tolua_get_CChitin_m_bResourceManagerThreadCreated(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bResourceManagerThreadCreated'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bResourceManagerThreadCreated);
	return 1;
}

static int tolua_set_CChitin_m_bResourceManagerThreadCreated(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bResourceManagerThreadCreated'", NULL);
	self->m_bResourceManagerThreadCreated = tolua_setter_tointeger<int>(L, "m_bResourceManagerThreadCreated");
	return 0;
}

static int tolua_get_CChitin_reference_m_bResourceManagerThreadCreated(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bResourceManagerThreadCreated'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bResourceManagerThreadCreated, "Primitive<int>");
	return 1;
}

static int tolua_get_CChitin_m_lEngines(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_lEngines'", NULL);
	tolua_pushusertype(L, (void*)&self->m_lEngines, "CTypedPtrList<CPtrList,CWarp*>");
	return 1;
}

static int tolua_get_CChitin_m_pEngineStart(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineStart'", NULL);
	tolua_pushusertype(L, (void*)self->m_pEngineStart, "UnmappedUserType");
	return 1;
}

static int tolua_set_CChitin_m_pEngineStart(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineStart'", NULL);
	self->m_pEngineStart = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CChitin_reference_m_pEngineStart(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineStart'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pEngineStart, "VoidPointer");
	return 1;
}

static int tolua_get_CChitin_m_hWindow(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hWindow'", NULL);
	tolua_pushusertype(L, (void*)self->m_hWindow, "HWND");
	return 1;
}

static int tolua_set_CChitin_m_hWindow(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hWindow'", NULL);
	self->m_hWindow = (HWND)tolua_tousertype_dynamic(L, 2, 0, "HWND");
	return 0;
}

static int tolua_get_CChitin_reference_m_hWindow(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hWindow'", NULL);
	tolua_pushusertype(L, (void*)&self->m_hWindow, "HWND<HWND>");
	return 1;
}

static int tolua_get_CChitin_m_hSyncThread(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hSyncThread'", NULL);
	tolua_pushusertype(L, (void*)self->m_hSyncThread, "HANDLE");
	return 1;
}

static int tolua_set_CChitin_m_hSyncThread(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hSyncThread'", NULL);
	self->m_hSyncThread = (HANDLE)tolua_tousertype_dynamic(L, 2, 0, "HANDLE");
	return 0;
}

static int tolua_get_CChitin_reference_m_hSyncThread(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hSyncThread'", NULL);
	tolua_pushusertype(L, (void*)&self->m_hSyncThread, "HANDLE<HANDLE>");
	return 1;
}

static int tolua_get_CChitin_m_nEventTimerID(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nEventTimerID'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nEventTimerID, "MMRESULT");
	return 1;
}

static int tolua_get_CChitin_m_nPeriodMax(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nPeriodMax'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nPeriodMax);
	return 1;
}

static int tolua_set_CChitin_m_nPeriodMax(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nPeriodMax'", NULL);
	self->m_nPeriodMax = tolua_setter_tointeger<uint>(L, "m_nPeriodMax");
	return 0;
}

static int tolua_get_CChitin_reference_m_nPeriodMax(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nPeriodMax'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nPeriodMax, "Primitive<uint>");
	return 1;
}

static int tolua_get_CChitin_m_lpCmdLine(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_lpCmdLine'", NULL);
	tolua_pushusertype(L, (void*)&self->m_lpCmdLine, "CString");
	return 1;
}

static int tolua_get_CChitin_m_bBlockMessages(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bBlockMessages'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bBlockMessages);
	return 1;
}

static int tolua_set_CChitin_m_bBlockMessages(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bBlockMessages'", NULL);
	self->m_bBlockMessages = tolua_setter_tointeger<byte>(L, "m_bBlockMessages");
	return 0;
}

static int tolua_get_CChitin_reference_m_bBlockMessages(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bBlockMessages'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bBlockMessages, "Primitive<byte>");
	return 1;
}

static int tolua_get_CChitin_m_bFullScreen(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bFullScreen'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bFullScreen);
	return 1;
}

static int tolua_set_CChitin_m_bFullScreen(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bFullScreen'", NULL);
	self->m_bFullScreen = tolua_setter_tointeger<byte>(L, "m_bFullScreen");
	return 0;
}

static int tolua_get_CChitin_reference_m_bFullScreen(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bFullScreen'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bFullScreen, "Primitive<byte>");
	return 1;
}

static int tolua_get_CChitin_m_nPlatformId(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nPlatformId'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nPlatformId);
	return 1;
}

static int tolua_set_CChitin_m_nPlatformId(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nPlatformId'", NULL);
	self->m_nPlatformId = tolua_setter_tointeger<DWORD>(L, "m_nPlatformId");
	return 0;
}

static int tolua_get_CChitin_reference_m_nPlatformId(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nPlatformId'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nPlatformId, "Primitive<DWORD>");
	return 1;
}

static int tolua_get_CChitin_m_sProductName(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sProductName'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sProductName, "ConstCharString");
	return 1;
}

static int tolua_get_CChitin_m_bSoundInitialized(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bSoundInitialized'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bSoundInitialized);
	return 1;
}

static int tolua_set_CChitin_m_bSoundInitialized(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bSoundInitialized'", NULL);
	self->m_bSoundInitialized = tolua_setter_tointeger<int>(L, "m_bSoundInitialized");
	return 0;
}

static int tolua_get_CChitin_reference_m_bSoundInitialized(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bSoundInitialized'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bSoundInitialized, "Primitive<int>");
	return 1;
}

static int tolua_get_CChitin_m_nQueryCancelAutoPlayMsg(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nQueryCancelAutoPlayMsg'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nQueryCancelAutoPlayMsg);
	return 1;
}

static int tolua_set_CChitin_m_nQueryCancelAutoPlayMsg(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nQueryCancelAutoPlayMsg'", NULL);
	self->m_nQueryCancelAutoPlayMsg = tolua_setter_tointeger<UINT>(L, "m_nQueryCancelAutoPlayMsg");
	return 0;
}

static int tolua_get_CChitin_reference_m_nQueryCancelAutoPlayMsg(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nQueryCancelAutoPlayMsg'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nQueryCancelAutoPlayMsg, "Primitive<UINT>");
	return 1;
}

static int tolua_get_CChitin_m_hEventTimer(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hEventTimer'", NULL);
	tolua_pushusertype(L, (void*)self->m_hEventTimer, "HANDLE");
	return 1;
}

static int tolua_set_CChitin_m_hEventTimer(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hEventTimer'", NULL);
	self->m_hEventTimer = (HANDLE)tolua_tousertype_dynamic(L, 2, 0, "HANDLE");
	return 0;
}

static int tolua_get_CChitin_reference_m_hEventTimer(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hEventTimer'", NULL);
	tolua_pushusertype(L, (void*)&self->m_hEventTimer, "HANDLE<HANDLE>");
	return 1;
}

static int tolua_get_CChitin_m_hResourceManagerThread(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hResourceManagerThread'", NULL);
	tolua_pushusertype(L, (void*)self->m_hResourceManagerThread, "HANDLE");
	return 1;
}

static int tolua_set_CChitin_m_hResourceManagerThread(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hResourceManagerThread'", NULL);
	self->m_hResourceManagerThread = (HANDLE)tolua_tousertype_dynamic(L, 2, 0, "HANDLE");
	return 0;
}

static int tolua_get_CChitin_reference_m_hResourceManagerThread(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hResourceManagerThread'", NULL);
	tolua_pushusertype(L, (void*)&self->m_hResourceManagerThread, "HANDLE<HANDLE>");
	return 1;
}

static int tolua_get_CChitin_m_hNetworkThread(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hNetworkThread'", NULL);
	tolua_pushusertype(L, (void*)self->m_hNetworkThread, "HANDLE");
	return 1;
}

static int tolua_set_CChitin_m_hNetworkThread(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hNetworkThread'", NULL);
	self->m_hNetworkThread = (HANDLE)tolua_tousertype_dynamic(L, 2, 0, "HANDLE");
	return 0;
}

static int tolua_get_CChitin_reference_m_hNetworkThread(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hNetworkThread'", NULL);
	tolua_pushusertype(L, (void*)&self->m_hNetworkThread, "HANDLE<HANDLE>");
	return 1;
}

static int tolua_get_CChitin_m_hAsyncThread(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hAsyncThread'", NULL);
	tolua_pushusertype(L, (void*)self->m_hAsyncThread, "HANDLE");
	return 1;
}

static int tolua_set_CChitin_m_hAsyncThread(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hAsyncThread'", NULL);
	self->m_hAsyncThread = (HANDLE)tolua_tousertype_dynamic(L, 2, 0, "HANDLE");
	return 0;
}

static int tolua_get_CChitin_reference_m_hAsyncThread(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_hAsyncThread'", NULL);
	tolua_pushusertype(L, (void*)&self->m_hAsyncThread, "HANDLE<HANDLE>");
	return 1;
}

static int tolua_get_CChitin_m_bAsyncThreadDone(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAsyncThreadDone'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bAsyncThreadDone);
	return 1;
}

static int tolua_set_CChitin_m_bAsyncThreadDone(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAsyncThreadDone'", NULL);
	self->m_bAsyncThreadDone = tolua_setter_tointeger<int>(L, "m_bAsyncThreadDone");
	return 0;
}

static int tolua_get_CChitin_reference_m_bAsyncThreadDone(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bAsyncThreadDone'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bAsyncThreadDone, "Primitive<int>");
	return 1;
}

static int tolua_get_CChitin_m_pActiveEngine(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pActiveEngine'", NULL);
	tolua_pushusertype(L, (void*)self->m_pActiveEngine, "CWarp");
	return 1;
}

static int tolua_set_CChitin_m_pActiveEngine(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pActiveEngine'", NULL);
	self->m_pActiveEngine = (CWarp*)tolua_tousertype_dynamic(L, 2, 0, "CWarp");
	return 0;
}

static int tolua_get_CChitin_reference_m_pActiveEngine(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pActiveEngine'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pActiveEngine, "Pointer<CWarp>");
	return 1;
}

static int tolua_get_CChitin_m_cSoundMixer(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cSoundMixer'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cSoundMixer, "CSoundMixer");
	return 1;
}

static int tolua_get_CChitin_m_resourceManager(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_resourceManager'", NULL);
	tolua_pushusertype(L, (void*)&self->m_resourceManager, "CResourceManager");
	return 1;
}

static int tolua_get_CChitin_m_cVideo(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cVideo'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cVideo, "CVideo");
	return 1;
}

static int tolua_get_CChitin_m_cNetwork(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cNetwork'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cNetwork, "CNetwork");
	return 1;
}

static int tolua_get_CChitin_m_cursorPos(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cursorPos'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cursorPos, "CPoint");
	return 1;
}

static int tolua_get_CChitin_m_bInAsyncUpdate(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInAsyncUpdate'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bInAsyncUpdate);
	return 1;
}

static int tolua_set_CChitin_m_bInAsyncUpdate(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInAsyncUpdate'", NULL);
	self->m_bInAsyncUpdate = tolua_setter_tointeger<int>(L, "m_bInAsyncUpdate");
	return 0;
}

static int tolua_get_CChitin_reference_m_bInAsyncUpdate(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInAsyncUpdate'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bInAsyncUpdate, "Primitive<int>");
	return 1;
}

static int tolua_get_CChitin_m_bShuttingDown(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bShuttingDown'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bShuttingDown);
	return 1;
}

static int tolua_set_CChitin_m_bShuttingDown(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bShuttingDown'", NULL);
	self->m_bShuttingDown = tolua_setter_tointeger<int>(L, "m_bShuttingDown");
	return 0;
}

static int tolua_get_CChitin_reference_m_bShuttingDown(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bShuttingDown'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bShuttingDown, "Primitive<int>");
	return 1;
}

static int tolua_get_CChitin_m_bDisplayStale(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bDisplayStale'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bDisplayStale);
	return 1;
}

static int tolua_set_CChitin_m_bDisplayStale(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bDisplayStale'", NULL);
	self->m_bDisplayStale = tolua_setter_tointeger<int>(L, "m_bDisplayStale");
	return 0;
}

static int tolua_get_CChitin_reference_m_bDisplayStale(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bDisplayStale'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bDisplayStale, "Primitive<int>");
	return 1;
}

static int tolua_get_CChitin_m_bInSyncUpdate(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInSyncUpdate'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bInSyncUpdate);
	return 1;
}

static int tolua_set_CChitin_m_bInSyncUpdate(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInSyncUpdate'", NULL);
	self->m_bInSyncUpdate = tolua_setter_tointeger<int>(L, "m_bInSyncUpdate");
	return 0;
}

static int tolua_get_CChitin_reference_m_bInSyncUpdate(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bInSyncUpdate'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bInSyncUpdate, "Primitive<int>");
	return 1;
}

static int tolua_get_CChitin_m_cProgressBar(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cProgressBar'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cProgressBar, "CProgressBar");
	return 1;
}

static int tolua_get_CChitin_m_bTravelActive(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bTravelActive'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bTravelActive);
	return 1;
}

static int tolua_set_CChitin_m_bTravelActive(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bTravelActive'", NULL);
	self->m_bTravelActive = tolua_setter_tointeger<byte>(L, "m_bTravelActive");
	return 0;
}

static int tolua_get_CChitin_reference_m_bTravelActive(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bTravelActive'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bTravelActive, "Primitive<byte>");
	return 1;
}

static int tolua_get_CChitin_m_bProgressBarActivated(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bProgressBarActivated'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bProgressBarActivated);
	return 1;
}

static int tolua_set_CChitin_m_bProgressBarActivated(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bProgressBarActivated'", NULL);
	self->m_bProgressBarActivated = tolua_setter_tointeger<byte>(L, "m_bProgressBarActivated");
	return 0;
}

static int tolua_get_CChitin_reference_m_bProgressBarActivated(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bProgressBarActivated'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bProgressBarActivated, "Primitive<byte>");
	return 1;
}

static int tolua_get_CChitin_m_aThreadIds(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_aThreadIds'", NULL);
	tolua_pushusertype(L, (void*)&self->m_aThreadIds, "Array<DWORD,10>");
	return 1;
}

static int tolua_get_CChitin_m_nThreads(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nThreads'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nThreads);
	return 1;
}

static int tolua_set_CChitin_m_nThreads(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nThreads'", NULL);
	self->m_nThreads = tolua_setter_tointeger<ushort>(L, "m_nThreads");
	return 0;
}

static int tolua_get_CChitin_reference_m_nThreads(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nThreads'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nThreads, "Primitive<ushort>");
	return 1;
}

static int tolua_get_CChitin_m_bNTSmoothSoundInitialized(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bNTSmoothSoundInitialized'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bNTSmoothSoundInitialized);
	return 1;
}

static int tolua_set_CChitin_m_bNTSmoothSoundInitialized(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bNTSmoothSoundInitialized'", NULL);
	self->m_bNTSmoothSoundInitialized = tolua_setter_tointeger<short>(L, "m_bNTSmoothSoundInitialized");
	return 0;
}

static int tolua_get_CChitin_reference_m_bNTSmoothSoundInitialized(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bNTSmoothSoundInitialized'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bNTSmoothSoundInitialized, "Primitive<short>");
	return 1;
}

static int tolua_function_CChitin_AddThread(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'AddThread'", NULL);
	self->AddThread();
	return 0;
}

static int tolua_function_CChitin_ParseCommandLine(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'ParseCommandLine'", NULL);
	self->ParseCommandLine();
	return 0;
}

static int tolua_function_CChitin_SetSyncThreadHandle(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'SetSyncThreadHandle'", NULL);
	self->SetSyncThreadHandle();
	return 0;
}

static int tolua_function_CChitin_SetupThreads(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'SetupThreads'", NULL);
	int returnVal = self->SetupThreads();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CChitin_virtual_SynchronousUpdate(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_SynchronousUpdate'", NULL);
	self->virtual_SynchronousUpdate();
	return 0;
}

static int tolua_function_CChitin_virtual_RegisterCreateWindow(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_RegisterCreateWindow'", NULL);
	int returnVal = self->virtual_RegisterCreateWindow(*(HINSTANCE*)tolua_tousertype_dynamic(L, 2, 0, "HINSTANCE"), tolua_function_tointeger<int>(L, 3, "virtual_RegisterCreateWindow"));
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_function_CChitin_virtual_AllocResObject(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_AllocResObject'", NULL);
	CRes* returnVal = self->virtual_AllocResObject(tolua_function_tointeger<int>(L, 2, "virtual_AllocResObject"));
	tolua_pushusertype(L, (void*)returnVal, "CRes");
	return 1;
}

static int tolua_function_CChitin_virtual_GetFileTypeExtension(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetFileTypeExtension'", NULL);
	CString* returnVal = self->virtual_GetFileTypeExtension(tolua_function_tointeger<int>(L, 2, "virtual_GetFileTypeExtension"), (CString*)tolua_tousertype_dynamic(L, 3, 0, "CString"));
	tolua_pushusertype(L, (void*)returnVal, "CString");
	return 1;
}

static int tolua_function_CChitin_virtual_CreateWindow(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_CreateWindow'", NULL);
	self->virtual_CreateWindow();
	return 0;
}

static int tolua_function_CChitin_virtual_SetProgressBar(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_SetProgressBar'", NULL);
	self->virtual_SetProgressBar();
	return 0;
}

static int tolua_function_CChitin_virtual_AsynchronousUpdate(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_AsynchronousUpdate'", NULL);
	self->virtual_AsynchronousUpdate(tolua_function_tointeger<int>(L, 2, "virtual_AsynchronousUpdate"), tolua_function_tointeger<int>(L, 3, "virtual_AsynchronousUpdate"), tolua_function_tointeger<int>(L, 4, "virtual_AsynchronousUpdate"), tolua_function_tointeger<int>(L, 5, "virtual_AsynchronousUpdate"), tolua_function_tointeger<int>(L, 6, "virtual_AsynchronousUpdate"));
	return 0;
}

static int tolua_function_CChitin_virtual_SelectEngine(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_SelectEngine'", NULL);
	self->virtual_SelectEngine((CWarp*)tolua_tousertype_dynamic(L, 2, 0, "CWarp"));
	return 0;
}

static int tolua_function_CChitin_virtual_ShutDown(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_ShutDown'", NULL);
	self->virtual_ShutDown();
	return 0;
}

static int tolua_function_CChitin_virtual_GetVideoModeErrorResourceStringID(lua_State* L)
{
	CChitin* self = (CChitin*)tolua_tousertype_dynamic(L, 1, 0, "CChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetVideoModeErrorResourceStringID'", NULL);
	UINT returnVal = self->virtual_GetVideoModeErrorResourceStringID();
	lua_pushinteger(L, (lua_Integer)returnVal);
	return 1;
}

static int tolua_get_CChitin__vtbl_SynchronousUpdate(lua_State* L)
{
	return 1;
}

static int tolua_set_CChitin__vtbl_SynchronousUpdate(lua_State* L)
{
	return 0;
}

static int tolua_get_CChitin__vtbl_reference_SynchronousUpdate(lua_State* L)
{
	return 1;
}

static int tolua_get_CChitin__vtbl_RegisterCreateWindow(lua_State* L)
{
	return 1;
}

static int tolua_set_CChitin__vtbl_RegisterCreateWindow(lua_State* L)
{
	return 0;
}

static int tolua_get_CChitin__vtbl_reference_RegisterCreateWindow(lua_State* L)
{
	return 1;
}

static int tolua_get_CChitin__vtbl_AllocResObject(lua_State* L)
{
	return 1;
}

static int tolua_set_CChitin__vtbl_AllocResObject(lua_State* L)
{
	return 0;
}

static int tolua_get_CChitin__vtbl_reference_AllocResObject(lua_State* L)
{
	return 1;
}

static int tolua_get_CChitin__vtbl_GetFileTypeExtension(lua_State* L)
{
	return 1;
}

static int tolua_set_CChitin__vtbl_GetFileTypeExtension(lua_State* L)
{
	return 0;
}

static int tolua_get_CChitin__vtbl_reference_GetFileTypeExtension(lua_State* L)
{
	return 1;
}

static int tolua_get_CChitin__vtbl_CreateWindow(lua_State* L)
{
	return 1;
}

static int tolua_set_CChitin__vtbl_CreateWindow(lua_State* L)
{
	return 0;
}

static int tolua_get_CChitin__vtbl_reference_CreateWindow(lua_State* L)
{
	return 1;
}

static int tolua_get_CChitin__vtbl_SetProgressBar(lua_State* L)
{
	return 1;
}

static int tolua_set_CChitin__vtbl_SetProgressBar(lua_State* L)
{
	return 0;
}

static int tolua_get_CChitin__vtbl_reference_SetProgressBar(lua_State* L)
{
	return 1;
}

static int tolua_get_CChitin__vtbl_AsynchronousUpdate(lua_State* L)
{
	return 1;
}

static int tolua_set_CChitin__vtbl_AsynchronousUpdate(lua_State* L)
{
	return 0;
}

static int tolua_get_CChitin__vtbl_reference_AsynchronousUpdate(lua_State* L)
{
	return 1;
}

static int tolua_get_CChitin__vtbl_SelectEngine(lua_State* L)
{
	return 1;
}

static int tolua_set_CChitin__vtbl_SelectEngine(lua_State* L)
{
	return 0;
}

static int tolua_get_CChitin__vtbl_reference_SelectEngine(lua_State* L)
{
	return 1;
}

static int tolua_get_CChitin__vtbl_ShutDown(lua_State* L)
{
	return 1;
}

static int tolua_set_CChitin__vtbl_ShutDown(lua_State* L)
{
	return 0;
}

static int tolua_get_CChitin__vtbl_reference_ShutDown(lua_State* L)
{
	return 1;
}

static int tolua_get_CChitin__vtbl_GetIniName(lua_State* L)
{
	return 1;
}

static int tolua_set_CChitin__vtbl_GetIniName(lua_State* L)
{
	return 0;
}

static int tolua_get_CChitin__vtbl_reference_GetIniName(lua_State* L)
{
	return 1;
}

static int tolua_get_CChitin__vtbl_GetVideoModeErrorResourceStringID(lua_State* L)
{
	return 1;
}

static int tolua_set_CChitin__vtbl_GetVideoModeErrorResourceStringID(lua_State* L)
{
	return 0;
}

static int tolua_get_CChitin__vtbl_reference_GetVideoModeErrorResourceStringID(lua_State* L)
{
	return 1;
}

static int tolua_get_CBaldurChitin_m_pObjectCursor(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pObjectCursor'", NULL);
	tolua_pushusertype(L, (void*)self->m_pObjectCursor, "CInfCursor");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pObjectCursor(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pObjectCursor'", NULL);
	self->m_pObjectCursor = (CInfCursor*)tolua_tousertype_dynamic(L, 2, 0, "CInfCursor");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pObjectCursor(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pObjectCursor'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pObjectCursor, "Pointer<CInfCursor>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pObjectGame(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pObjectGame'", NULL);
	tolua_pushusertype(L, (void*)self->m_pObjectGame, "CInfGame");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pObjectGame(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pObjectGame'", NULL);
	self->m_pObjectGame = (CInfGame*)tolua_tousertype_dynamic(L, 2, 0, "CInfGame");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pObjectGame(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pObjectGame'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pObjectGame, "Pointer<CInfGame>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine4(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine4'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine4, "CUnknownEngine4");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine4(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine4'", NULL);
	self->m_pUnknownEngine4 = (CUnknownEngine4*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine4");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine4(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine4'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine4, "Pointer<CUnknownEngine4>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pEngineProjector(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineProjector'", NULL);
	tolua_pushusertype(L, (void*)self->m_pEngineProjector, "CBaldurProjector");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pEngineProjector(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineProjector'", NULL);
	self->m_pEngineProjector = (CBaldurProjector*)tolua_tousertype_dynamic(L, 2, 0, "CBaldurProjector");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pEngineProjector(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineProjector'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pEngineProjector, "Pointer<CBaldurProjector>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine2(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine2'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine2, "CUnknownEngine2");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine2(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine2'", NULL);
	self->m_pUnknownEngine2 = (CUnknownEngine2*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine2");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine2(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine2'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine2, "Pointer<CUnknownEngine2>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine5(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine5'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine5, "CUnknownEngine5");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine5(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine5'", NULL);
	self->m_pUnknownEngine5 = (CUnknownEngine5*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine5");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine5(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine5'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine5, "Pointer<CUnknownEngine5>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine6(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine6'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine6, "CUnknownEngine6");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine6(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine6'", NULL);
	self->m_pUnknownEngine6 = (CUnknownEngine6*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine6");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine6(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine6'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine6, "Pointer<CUnknownEngine6>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine7(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine7'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine7, "CUnknownEngine7");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine7(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine7'", NULL);
	self->m_pUnknownEngine7 = (CUnknownEngine7*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine7");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine7(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine7'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine7, "Pointer<CUnknownEngine7>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine8(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine8'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine8, "CUnknownEngine8");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine8(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine8'", NULL);
	self->m_pUnknownEngine8 = (CUnknownEngine8*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine8");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine8(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine8'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine8, "Pointer<CUnknownEngine8>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine9(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine9'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine9, "CUnknownEngine9");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine9(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine9'", NULL);
	self->m_pUnknownEngine9 = (CUnknownEngine9*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine9");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine9(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine9'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine9, "Pointer<CUnknownEngine9>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pEngineMap(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineMap'", NULL);
	tolua_pushusertype(L, (void*)self->m_pEngineMap, "CScreenMap");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pEngineMap(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineMap'", NULL);
	self->m_pEngineMap = (CScreenMap*)tolua_tousertype_dynamic(L, 2, 0, "CScreenMap");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pEngineMap(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineMap'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pEngineMap, "Pointer<CScreenMap>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine11(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine11'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine11, "CUnknownEngine11");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine11(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine11'", NULL);
	self->m_pUnknownEngine11 = (CUnknownEngine11*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine11");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine11(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine11'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine11, "Pointer<CUnknownEngine11>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine12(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine12'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine12, "CUnknownEngine12");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine12(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine12'", NULL);
	self->m_pUnknownEngine12 = (CUnknownEngine12*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine12");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine12(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine12'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine12, "Pointer<CUnknownEngine12>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine13(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine13'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine13, "CUnknownEngine13");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine13(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine13'", NULL);
	self->m_pUnknownEngine13 = (CUnknownEngine13*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine13");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine13(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine13'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine13, "Pointer<CUnknownEngine13>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine14(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine14'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine14, "CUnknownEngine14");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine14(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine14'", NULL);
	self->m_pUnknownEngine14 = (CUnknownEngine14*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine14");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine14(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine14'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine14, "Pointer<CUnknownEngine14>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine15(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine15'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine15, "CUnknownEngine15");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine15(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine15'", NULL);
	self->m_pUnknownEngine15 = (CUnknownEngine15*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine15");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine15(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine15'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine15, "Pointer<CUnknownEngine15>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pEngineWorld(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineWorld'", NULL);
	tolua_pushusertype(L, (void*)self->m_pEngineWorld, "CScreenWorld");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pEngineWorld(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineWorld'", NULL);
	self->m_pEngineWorld = (CScreenWorld*)tolua_tousertype_dynamic(L, 2, 0, "CScreenWorld");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pEngineWorld(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineWorld'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pEngineWorld, "Pointer<CScreenWorld>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine16(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine16'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine16, "CUnknownEngine16");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine16(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine16'", NULL);
	self->m_pUnknownEngine16 = (CUnknownEngine16*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine16");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine16(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine16'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine16, "Pointer<CUnknownEngine16>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine17(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine17'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine17, "CUnknownEngine17");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine17(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine17'", NULL);
	self->m_pUnknownEngine17 = (CUnknownEngine17*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine17");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine17(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine17'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine17, "Pointer<CUnknownEngine17>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pEngineConnection(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineConnection'", NULL);
	tolua_pushusertype(L, (void*)self->m_pEngineConnection, "CScreenConnection");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pEngineConnection(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineConnection'", NULL);
	self->m_pEngineConnection = (CScreenConnection*)tolua_tousertype_dynamic(L, 2, 0, "CScreenConnection");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pEngineConnection(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineConnection'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pEngineConnection, "Pointer<CScreenConnection>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pEngineWorldMap(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineWorldMap'", NULL);
	tolua_pushusertype(L, (void*)self->m_pEngineWorldMap, "CScreenWorldMap");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pEngineWorldMap(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineWorldMap'", NULL);
	self->m_pEngineWorldMap = (CScreenWorldMap*)tolua_tousertype_dynamic(L, 2, 0, "CScreenWorldMap");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pEngineWorldMap(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pEngineWorldMap'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pEngineWorldMap, "Pointer<CScreenWorldMap>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine18(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine18'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine18, "CUnknownEngine18");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine18(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine18'", NULL);
	self->m_pUnknownEngine18 = (CUnknownEngine18*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine18");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine18(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine18'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine18, "Pointer<CUnknownEngine18>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_pUnknownEngine19(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine19'", NULL);
	tolua_pushusertype(L, (void*)self->m_pUnknownEngine19, "CUnknownEngine19");
	return 1;
}

static int tolua_set_CBaldurChitin_m_pUnknownEngine19(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine19'", NULL);
	self->m_pUnknownEngine19 = (CUnknownEngine19*)tolua_tousertype_dynamic(L, 2, 0, "CUnknownEngine19");
	return 0;
}

static int tolua_get_CBaldurChitin_reference_m_pUnknownEngine19(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pUnknownEngine19'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pUnknownEngine19, "Pointer<CUnknownEngine19>");
	return 1;
}

static int tolua_get_CBaldurChitin_m_cTlkTable(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cTlkTable'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cTlkTable, "CTlkTable");
	return 1;
}

static int tolua_get_CBaldurChitin_m_cCachingStatus(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cCachingStatus'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cCachingStatus, "CCacheStatus");
	return 1;
}

static int tolua_get_CBaldurChitin_m_cMessageHandler(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_cMessageHandler'", NULL);
	tolua_pushusertype(L, (void*)&self->m_cMessageHandler, "CMessageHandler");
	return 1;
}

static int tolua_function_CBaldurChitin_Export_AsyncThread(lua_State* L)
{
	CBaldurChitin* self = (CBaldurChitin*)tolua_tousertype_dynamic(L, 1, 0, "CBaldurChitin");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'Export_AsyncThread'", NULL);
	self->Export_AsyncThread();
	return 0;
}

static int tolua_get_CAIObjectType_m_name(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_name'", NULL);
	tolua_pushusertype(L, (void*)&self->m_name, "CString");
	return 1;
}

static int tolua_get_CAIObjectType_m_EnemyAlly(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_EnemyAlly'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_EnemyAlly);
	return 1;
}

static int tolua_set_CAIObjectType_m_EnemyAlly(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_EnemyAlly'", NULL);
	self->m_EnemyAlly = tolua_setter_tointeger<byte>(L, "m_EnemyAlly");
	return 0;
}

static int tolua_get_CAIObjectType_reference_m_EnemyAlly(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_EnemyAlly'", NULL);
	tolua_pushusertype(L, (void*)&self->m_EnemyAlly, "Primitive<byte>");
	return 1;
}

static int tolua_get_CAIObjectType_m_General(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_General'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_General);
	return 1;
}

static int tolua_set_CAIObjectType_m_General(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_General'", NULL);
	self->m_General = tolua_setter_tointeger<byte>(L, "m_General");
	return 0;
}

static int tolua_get_CAIObjectType_reference_m_General(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_General'", NULL);
	tolua_pushusertype(L, (void*)&self->m_General, "Primitive<byte>");
	return 1;
}

static int tolua_get_CAIObjectType_m_Race(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Race'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_Race);
	return 1;
}

static int tolua_set_CAIObjectType_m_Race(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Race'", NULL);
	self->m_Race = tolua_setter_tointeger<byte>(L, "m_Race");
	return 0;
}

static int tolua_get_CAIObjectType_reference_m_Race(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Race'", NULL);
	tolua_pushusertype(L, (void*)&self->m_Race, "Primitive<byte>");
	return 1;
}

static int tolua_get_CAIObjectType_m_Class(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Class'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_Class);
	return 1;
}

static int tolua_set_CAIObjectType_m_Class(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Class'", NULL);
	self->m_Class = tolua_setter_tointeger<byte>(L, "m_Class");
	return 0;
}

static int tolua_get_CAIObjectType_reference_m_Class(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Class'", NULL);
	tolua_pushusertype(L, (void*)&self->m_Class, "Primitive<byte>");
	return 1;
}

static int tolua_get_CAIObjectType_m_Instance(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Instance'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_Instance);
	return 1;
}

static int tolua_set_CAIObjectType_m_Instance(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Instance'", NULL);
	self->m_Instance = tolua_setter_tointeger<int>(L, "m_Instance");
	return 0;
}

static int tolua_get_CAIObjectType_reference_m_Instance(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Instance'", NULL);
	tolua_pushusertype(L, (void*)&self->m_Instance, "Primitive<int>");
	return 1;
}

static int tolua_get_CAIObjectType_m_SpecialCase(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_SpecialCase'", NULL);
	tolua_pushusertype(L, (void*)&self->m_SpecialCase, "Array<byte,5>");
	return 1;
}

static int tolua_get_CAIObjectType_m_Specifics(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Specifics'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_Specifics);
	return 1;
}

static int tolua_set_CAIObjectType_m_Specifics(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Specifics'", NULL);
	self->m_Specifics = tolua_setter_tointeger<byte>(L, "m_Specifics");
	return 0;
}

static int tolua_get_CAIObjectType_reference_m_Specifics(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Specifics'", NULL);
	tolua_pushusertype(L, (void*)&self->m_Specifics, "Primitive<byte>");
	return 1;
}

static int tolua_get_CAIObjectType_m_Gender(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Gender'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_Gender);
	return 1;
}

static int tolua_set_CAIObjectType_m_Gender(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Gender'", NULL);
	self->m_Gender = tolua_setter_tointeger<byte>(L, "m_Gender");
	return 0;
}

static int tolua_get_CAIObjectType_reference_m_Gender(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Gender'", NULL);
	tolua_pushusertype(L, (void*)&self->m_Gender, "Primitive<byte>");
	return 1;
}

static int tolua_get_CAIObjectType_m_Alignment(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Alignment'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_Alignment);
	return 1;
}

static int tolua_set_CAIObjectType_m_Alignment(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Alignment'", NULL);
	self->m_Alignment = tolua_setter_tointeger<byte>(L, "m_Alignment");
	return 0;
}

static int tolua_get_CAIObjectType_reference_m_Alignment(lua_State* L)
{
	CAIObjectType* self = (CAIObjectType*)tolua_tousertype_dynamic(L, 1, 0, "CAIObjectType");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_Alignment'", NULL);
	tolua_pushusertype(L, (void*)&self->m_Alignment, "Primitive<byte>");
	return 1;
}

static int tolua_get_CAIAction_m_actionID(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_actionID'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_actionID);
	return 1;
}

static int tolua_set_CAIAction_m_actionID(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_actionID'", NULL);
	self->m_actionID = tolua_setter_tointeger<short>(L, "m_actionID");
	return 0;
}

static int tolua_get_CAIAction_reference_m_actionID(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_actionID'", NULL);
	tolua_pushusertype(L, (void*)&self->m_actionID, "Primitive<short>");
	return 1;
}

static int tolua_get_CAIAction_m_actorID(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_actorID'", NULL);
	tolua_pushusertype(L, (void*)&self->m_actorID, "CAIObjectType");
	return 1;
}

static int tolua_get_CAIAction_m_acteeID(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_acteeID'", NULL);
	tolua_pushusertype(L, (void*)&self->m_acteeID, "CAIObjectType");
	return 1;
}

static int tolua_get_CAIAction_m_acteeID2(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_acteeID2'", NULL);
	tolua_pushusertype(L, (void*)&self->m_acteeID2, "CAIObjectType");
	return 1;
}

static int tolua_get_CAIAction_m_specificID(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specificID'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_specificID);
	return 1;
}

static int tolua_set_CAIAction_m_specificID(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specificID'", NULL);
	self->m_specificID = tolua_setter_tointeger<int>(L, "m_specificID");
	return 0;
}

static int tolua_get_CAIAction_reference_m_specificID(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specificID'", NULL);
	tolua_pushusertype(L, (void*)&self->m_specificID, "Primitive<int>");
	return 1;
}

static int tolua_get_CAIAction_m_specificID2(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specificID2'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_specificID2);
	return 1;
}

static int tolua_set_CAIAction_m_specificID2(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specificID2'", NULL);
	self->m_specificID2 = tolua_setter_tointeger<int>(L, "m_specificID2");
	return 0;
}

static int tolua_get_CAIAction_reference_m_specificID2(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specificID2'", NULL);
	tolua_pushusertype(L, (void*)&self->m_specificID2, "Primitive<int>");
	return 1;
}

static int tolua_get_CAIAction_m_specificID3(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specificID3'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_specificID3);
	return 1;
}

static int tolua_set_CAIAction_m_specificID3(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specificID3'", NULL);
	self->m_specificID3 = tolua_setter_tointeger<int>(L, "m_specificID3");
	return 0;
}

static int tolua_get_CAIAction_reference_m_specificID3(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specificID3'", NULL);
	tolua_pushusertype(L, (void*)&self->m_specificID3, "Primitive<int>");
	return 1;
}

static int tolua_get_CAIAction_m_string1(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_string1'", NULL);
	tolua_pushusertype(L, (void*)&self->m_string1, "CString");
	return 1;
}

static int tolua_get_CAIAction_m_string2(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_string2'", NULL);
	tolua_pushusertype(L, (void*)&self->m_string2, "CString");
	return 1;
}

static int tolua_get_CAIAction_m_dest(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_dest'", NULL);
	tolua_pushusertype(L, (void*)&self->m_dest, "CPoint");
	return 1;
}

static int tolua_get_CAIAction_m_internalFlags(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_internalFlags'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_internalFlags);
	return 1;
}

static int tolua_set_CAIAction_m_internalFlags(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_internalFlags'", NULL);
	self->m_internalFlags = tolua_setter_tointeger<uint>(L, "m_internalFlags");
	return 0;
}

static int tolua_get_CAIAction_reference_m_internalFlags(lua_State* L)
{
	CAIAction* self = (CAIAction*)tolua_tousertype_dynamic(L, 1, 0, "CAIAction");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_internalFlags'", NULL);
	tolua_pushusertype(L, (void*)&self->m_internalFlags, "Primitive<uint>");
	return 1;
}

static int tolua_get_CGameObject_m_pos(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_pos'", NULL);
	tolua_pushusertype(L, (void*)&self->m_pos, "CPoint");
	return 1;
}

static int tolua_get_CGameObject_m_posZ(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_posZ'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_posZ);
	return 1;
}

static int tolua_set_CGameObject_m_posZ(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_posZ'", NULL);
	self->m_posZ = tolua_setter_tointeger<int>(L, "m_posZ");
	return 0;
}

static int tolua_get_CGameObject_reference_m_posZ(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_posZ'", NULL);
	tolua_pushusertype(L, (void*)&self->m_posZ, "Primitive<int>");
	return 1;
}

static int tolua_get_CGameObject_pArea(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'pArea'", NULL);
	tolua_pushusertype(L, (void*)self->pArea, "CGameArea");
	return 1;
}

static int tolua_set_CGameObject_pArea(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'pArea'", NULL);
	self->pArea = (CGameArea*)tolua_tousertype_dynamic(L, 2, 0, "CGameArea");
	return 0;
}

static int tolua_get_CGameObject_reference_pArea(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'pArea'", NULL);
	tolua_pushusertype(L, (void*)&self->pArea, "Pointer<CGameArea>");
	return 1;
}

static int tolua_get_CGameObject_m_posVertList(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_posVertList'", NULL);
	tolua_pushusertype(L, (void*)self->m_posVertList, "UnmappedUserType");
	return 1;
}

static int tolua_set_CGameObject_m_posVertList(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_posVertList'", NULL);
	self->m_posVertList = (void*)tolua_tousertype_dynamic(L, 2, 0, "UnmappedUserType");
	return 0;
}

static int tolua_get_CGameObject_reference_m_posVertList(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_posVertList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_posVertList, "VoidPointer");
	return 1;
}

static int tolua_get_CGameObject_m_listType(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_listType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_listType);
	return 1;
}

static int tolua_set_CGameObject_m_listType(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_listType'", NULL);
	self->m_listType = tolua_setter_tointeger<byte>(L, "m_listType");
	return 0;
}

static int tolua_get_CGameObject_reference_m_listType(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_listType'", NULL);
	tolua_pushusertype(L, (void*)&self->m_listType, "Primitive<byte>");
	return 1;
}

static int tolua_get_CGameObject_m_typeAI(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_typeAI'", NULL);
	tolua_pushusertype(L, (void*)&self->m_typeAI, "CAIObjectType");
	return 1;
}

static int tolua_get_CGameObject_m_id(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_id'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_id);
	return 1;
}

static int tolua_set_CGameObject_m_id(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_id'", NULL);
	self->m_id = tolua_setter_tointeger<int>(L, "m_id");
	return 0;
}

static int tolua_get_CGameObject_reference_m_id(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_id'", NULL);
	tolua_pushusertype(L, (void*)&self->m_id, "Primitive<int>");
	return 1;
}

static int tolua_get_CGameObject_m_canBeSeen(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_canBeSeen'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_canBeSeen);
	return 1;
}

static int tolua_set_CGameObject_m_canBeSeen(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_canBeSeen'", NULL);
	self->m_canBeSeen = tolua_setter_tointeger<short>(L, "m_canBeSeen");
	return 0;
}

static int tolua_get_CGameObject_reference_m_canBeSeen(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_canBeSeen'", NULL);
	tolua_pushusertype(L, (void*)&self->m_canBeSeen, "Primitive<short>");
	return 1;
}

static int tolua_get_CGameObject_m_AISpeed(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_AISpeed'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_AISpeed);
	return 1;
}

static int tolua_set_CGameObject_m_AISpeed(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_AISpeed'", NULL);
	self->m_AISpeed = tolua_setter_tointeger<byte>(L, "m_AISpeed");
	return 0;
}

static int tolua_get_CGameObject_reference_m_AISpeed(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_AISpeed'", NULL);
	tolua_pushusertype(L, (void*)&self->m_AISpeed, "Primitive<byte>");
	return 1;
}

static int tolua_function_CGameObject_virtual_VirtualDestruct(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_VirtualDestruct'", NULL);
	CGameObject* returnVal = self->virtual_VirtualDestruct(tolua_function_tointeger<uint>(L, 2, "virtual_VirtualDestruct"));
	tolua_pushusertype(L, (void*)returnVal, "CGameObject");
	return 1;
}

static int tolua_function_CGameObject_virtual_GetObjectType(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetObjectType'", NULL);
	self->virtual_GetObjectType();
	return 0;
}

static int tolua_function_CGameObject_virtual_GetAIType(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_GetAIType'", NULL);
	CAIObjectType* returnVal = self->virtual_GetAIType();
	tolua_pushusertype(L, (void*)returnVal, "CAIObjectType");
	return 1;
}

static int tolua_function_CGameObject_virtual_RemoveFromArea(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_RemoveFromArea'", NULL);
	self->virtual_RemoveFromArea();
	return 0;
}

static int tolua_function_CGameObject_virtual_Render(lua_State* L)
{
	CGameObject* self = (CGameObject*)tolua_tousertype_dynamic(L, 1, 0, "CGameObject");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Render'", NULL);
	self->virtual_Render();
	return 0;
}

static int tolua_get_CGameObject__vtbl_VirtualDestruct(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameObject__vtbl_VirtualDestruct(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameObject__vtbl_reference_VirtualDestruct(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameObject__vtbl_GetObjectType(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameObject__vtbl_GetObjectType(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameObject__vtbl_reference_GetObjectType(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameObject__vtbl_GetAIType(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameObject__vtbl_GetAIType(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameObject__vtbl_reference_GetAIType(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameObject__vtbl_RemoveFromArea(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameObject__vtbl_RemoveFromArea(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameObject__vtbl_reference_RemoveFromArea(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameObject__vtbl_Render(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameObject__vtbl_Render(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameObject__vtbl_reference_Render(lua_State* L)
{
	return 1;
}

static int tolua_get_CProjectile_m_projectileType(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_projectileType'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_projectileType);
	return 1;
}

static int tolua_set_CProjectile_m_projectileType(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_projectileType'", NULL);
	self->m_projectileType = tolua_setter_tointeger<ushort>(L, "m_projectileType");
	return 0;
}

static int tolua_get_CProjectile_reference_m_projectileType(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_projectileType'", NULL);
	tolua_pushusertype(L, (void*)&self->m_projectileType, "Primitive<ushort>");
	return 1;
}

static int tolua_get_CProjectile_m_sourceId(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sourceId'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_sourceId);
	return 1;
}

static int tolua_set_CProjectile_m_sourceId(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sourceId'", NULL);
	self->m_sourceId = tolua_setter_tointeger<int>(L, "m_sourceId");
	return 0;
}

static int tolua_get_CProjectile_reference_m_sourceId(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_sourceId'", NULL);
	tolua_pushusertype(L, (void*)&self->m_sourceId, "Primitive<int>");
	return 1;
}

static int tolua_get_CProjectile_m_targetId(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_targetId'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_targetId);
	return 1;
}

static int tolua_set_CProjectile_m_targetId(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_targetId'", NULL);
	self->m_targetId = tolua_setter_tointeger<int>(L, "m_targetId");
	return 0;
}

static int tolua_get_CProjectile_reference_m_targetId(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_targetId'", NULL);
	tolua_pushusertype(L, (void*)&self->m_targetId, "Primitive<int>");
	return 1;
}

static int tolua_get_CProjectile_m_callBackProjectile(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_callBackProjectile'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_callBackProjectile);
	return 1;
}

static int tolua_set_CProjectile_m_callBackProjectile(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_callBackProjectile'", NULL);
	self->m_callBackProjectile = tolua_setter_tointeger<int>(L, "m_callBackProjectile");
	return 0;
}

static int tolua_get_CProjectile_reference_m_callBackProjectile(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_callBackProjectile'", NULL);
	tolua_pushusertype(L, (void*)&self->m_callBackProjectile, "Primitive<int>");
	return 1;
}

static int tolua_get_CProjectile_m_effectList(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_effectList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_effectList, "CTypedPtrList<CPtrList,CGameEffect*>");
	return 1;
}

static int tolua_function_CProjectile_virtual_Fire(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_Fire'", NULL);
	self->virtual_Fire();
	return 0;
}

static int tolua_function_CProjectile_virtual_OnArrival(lua_State* L)
{
	CProjectile* self = (CProjectile*)tolua_tousertype_dynamic(L, 1, 0, "CProjectile");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_OnArrival'", NULL);
	self->virtual_OnArrival();
	return 0;
}

static int tolua_get_CProjectile__vtbl_Fire(lua_State* L)
{
	return 1;
}

static int tolua_set_CProjectile__vtbl_Fire(lua_State* L)
{
	return 0;
}

static int tolua_get_CProjectile__vtbl_reference_Fire(lua_State* L)
{
	return 1;
}

static int tolua_get_CProjectile__vtbl_OnArrival(lua_State* L)
{
	return 1;
}

static int tolua_set_CProjectile__vtbl_OnArrival(lua_State* L)
{
	return 0;
}

static int tolua_get_CProjectile__vtbl_reference_OnArrival(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameAIBase_m_lAttacker(lua_State* L)
{
	CGameAIBase* self = (CGameAIBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameAIBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_lAttacker'", NULL);
	tolua_pushusertype(L, (void*)&self->m_lAttacker, "CAIObjectType");
	return 1;
}

static int tolua_get_CGameAIBase_m_curAction(lua_State* L)
{
	CGameAIBase* self = (CGameAIBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameAIBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_curAction'", NULL);
	tolua_pushusertype(L, (void*)&self->m_curAction, "CAIAction");
	return 1;
}

static int tolua_get_CGameAIBase_m_scriptName(lua_State* L)
{
	CGameAIBase* self = (CGameAIBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameAIBase");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_scriptName'", NULL);
	tolua_pushusertype(L, (void*)&self->m_scriptName, "Array<char,32>");
	return 1;
}

static int tolua_function_CGameAIBase_virtual_AddEffect(lua_State* L)
{
	CGameAIBase* self = (CGameAIBase*)tolua_tousertype_dynamic(L, 1, 0, "CGameAIBase");
	if (!self) tolua_error(L, "invalid 'self' in calling function 'virtual_AddEffect'", NULL);
	self->virtual_AddEffect();
	return 0;
}

static int tolua_get_CGameAIBase__vtbl_AddEffect(lua_State* L)
{
	return 1;
}

static int tolua_set_CGameAIBase__vtbl_AddEffect(lua_State* L)
{
	return 0;
}

static int tolua_get_CGameAIBase__vtbl_reference_AddEffect(lua_State* L)
{
	return 1;
}

static int tolua_get_CGameSprite_m_baseStats__m_name(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_baseStats__m_name'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_baseStats__m_name);
	return 1;
}

static int tolua_set_CGameSprite_m_baseStats__m_name(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_baseStats__m_name'", NULL);
	self->m_baseStats__m_name = tolua_setter_tointeger<int>(L, "m_baseStats__m_name");
	return 0;
}

static int tolua_get_CGameSprite_reference_m_baseStats__m_name(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_baseStats__m_name'", NULL);
	tolua_pushusertype(L, (void*)&self->m_baseStats__m_name, "Primitive<int>");
	return 1;
}

static int tolua_get_CGameSprite_m_baseStats__m_hitPoints(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_baseStats__m_hitPoints'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_baseStats__m_hitPoints);
	return 1;
}

static int tolua_set_CGameSprite_m_baseStats__m_hitPoints(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_baseStats__m_hitPoints'", NULL);
	self->m_baseStats__m_hitPoints = tolua_setter_tointeger<short>(L, "m_baseStats__m_hitPoints");
	return 0;
}

static int tolua_get_CGameSprite_reference_m_baseStats__m_hitPoints(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_baseStats__m_hitPoints'", NULL);
	tolua_pushusertype(L, (void*)&self->m_baseStats__m_hitPoints, "Primitive<short>");
	return 1;
}

static int tolua_get_CGameSprite_m_derivedStats(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_derivedStats'", NULL);
	tolua_pushusertype(L, (void*)&self->m_derivedStats, "CDerivedStats");
	return 1;
}

static int tolua_get_CGameSprite_m_tempStats(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_tempStats'", NULL);
	tolua_pushusertype(L, (void*)&self->m_tempStats, "CDerivedStats");
	return 1;
}

static int tolua_get_CGameSprite_m_bonusStats(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bonusStats'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bonusStats, "CDerivedStats");
	return 1;
}

static int tolua_get_CGameSprite_m_terrainTable(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_terrainTable'", NULL);
	tolua_pushusertype(L, (void*)&self->m_terrainTable, "Array<byte,16>");
	return 1;
}

static int tolua_get_CGameSprite_m_animation(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_animation'", NULL);
	tolua_pushusertype(L, (void*)&self->m_animation, "CGameAnimation");
	return 1;
}

static int tolua_get_CGameSprite_m_spriteEffectDuration(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_spriteEffectDuration'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_spriteEffectDuration);
	return 1;
}

static int tolua_set_CGameSprite_m_spriteEffectDuration(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_spriteEffectDuration'", NULL);
	self->m_spriteEffectDuration = tolua_setter_tointeger<byte>(L, "m_spriteEffectDuration");
	return 0;
}

static int tolua_get_CGameSprite_reference_m_spriteEffectDuration(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_spriteEffectDuration'", NULL);
	tolua_pushusertype(L, (void*)&self->m_spriteEffectDuration, "Primitive<byte>");
	return 1;
}

static int tolua_get_CGameSprite_m_nMirrorImages(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nMirrorImages'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_nMirrorImages);
	return 1;
}

static int tolua_set_CGameSprite_m_nMirrorImages(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nMirrorImages'", NULL);
	self->m_nMirrorImages = tolua_setter_tointeger<byte>(L, "m_nMirrorImages");
	return 0;
}

static int tolua_get_CGameSprite_reference_m_nMirrorImages(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_nMirrorImages'", NULL);
	tolua_pushusertype(L, (void*)&self->m_nMirrorImages, "Primitive<byte>");
	return 1;
}

static int tolua_get_CGameSprite_m_bBlur(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bBlur'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bBlur);
	return 1;
}

static int tolua_set_CGameSprite_m_bBlur(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bBlur'", NULL);
	self->m_bBlur = tolua_setter_tointeger<byte>(L, "m_bBlur");
	return 0;
}

static int tolua_get_CGameSprite_reference_m_bBlur(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bBlur'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bBlur, "Primitive<byte>");
	return 1;
}

static int tolua_get_CGameSprite_m_bGreasePool(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bGreasePool'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_bGreasePool);
	return 1;
}

static int tolua_set_CGameSprite_m_bGreasePool(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bGreasePool'", NULL);
	self->m_bGreasePool = tolua_setter_tointeger<byte>(L, "m_bGreasePool");
	return 0;
}

static int tolua_get_CGameSprite_reference_m_bGreasePool(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_bGreasePool'", NULL);
	tolua_pushusertype(L, (void*)&self->m_bGreasePool, "Primitive<byte>");
	return 1;
}

static int tolua_get_CGameSprite_m_greasePoolVidCell(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_greasePoolVidCell'", NULL);
	tolua_pushusertype(L, (void*)&self->m_greasePoolVidCell, "CVidCell");
	return 1;
}

static int tolua_get_CGameSprite_m_lstBlood(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_lstBlood'", NULL);
	tolua_pushusertype(L, (void*)&self->m_lstBlood, "CPtrList");
	return 1;
}

static int tolua_get_CGameSprite_m_equipedEffectList(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_equipedEffectList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_equipedEffectList, "CGameEffectList");
	return 1;
}

static int tolua_get_CGameSprite_m_timedEffectList(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_timedEffectList'", NULL);
	tolua_pushusertype(L, (void*)&self->m_timedEffectList, "CGameEffectList");
	return 1;
}

static int tolua_get_CGameSprite_m_curProjectile(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_curProjectile'", NULL);
	tolua_pushusertype(L, (void*)self->m_curProjectile, "CProjectile");
	return 1;
}

static int tolua_set_CGameSprite_m_curProjectile(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_curProjectile'", NULL);
	self->m_curProjectile = (CProjectile*)tolua_tousertype_dynamic(L, 2, 0, "CProjectile");
	return 0;
}

static int tolua_get_CGameSprite_reference_m_curProjectile(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_curProjectile'", NULL);
	tolua_pushusertype(L, (void*)&self->m_curProjectile, "Pointer<CProjectile>");
	return 1;
}

static int tolua_get_CGameSprite_m_newEffect(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_newEffect'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_newEffect);
	return 1;
}

static int tolua_set_CGameSprite_m_newEffect(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_newEffect'", NULL);
	self->m_newEffect = tolua_setter_tointeger<int>(L, "m_newEffect");
	return 0;
}

static int tolua_get_CGameSprite_reference_m_newEffect(lua_State* L)
{
	CGameSprite* self = (CGameSprite*)tolua_tousertype_dynamic(L, 1, 0, "CGameSprite");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_newEffect'", NULL);
	tolua_pushusertype(L, (void*)&self->m_newEffect, "Primitive<int>");
	return 1;
}

static int tolua_get_CAITrigger_m_triggerID(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_triggerID'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_triggerID);
	return 1;
}

static int tolua_set_CAITrigger_m_triggerID(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_triggerID'", NULL);
	self->m_triggerID = tolua_setter_tointeger<short>(L, "m_triggerID");
	return 0;
}

static int tolua_get_CAITrigger_reference_m_triggerID(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_triggerID'", NULL);
	tolua_pushusertype(L, (void*)&self->m_triggerID, "Primitive<short>");
	return 1;
}

static int tolua_get_CAITrigger_m_specificID(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specificID'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_specificID);
	return 1;
}

static int tolua_set_CAITrigger_m_specificID(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specificID'", NULL);
	self->m_specificID = tolua_setter_tointeger<int>(L, "m_specificID");
	return 0;
}

static int tolua_get_CAITrigger_reference_m_specificID(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specificID'", NULL);
	tolua_pushusertype(L, (void*)&self->m_specificID, "Primitive<int>");
	return 1;
}

static int tolua_get_CAITrigger_m_triggerCause(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_triggerCause'", NULL);
	tolua_pushusertype(L, (void*)&self->m_triggerCause, "CAIObjectType");
	return 1;
}

static int tolua_get_CAITrigger_m_flags(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_flags'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_flags);
	return 1;
}

static int tolua_set_CAITrigger_m_flags(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_flags'", NULL);
	self->m_flags = tolua_setter_tointeger<int>(L, "m_flags");
	return 0;
}

static int tolua_get_CAITrigger_reference_m_flags(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_flags'", NULL);
	tolua_pushusertype(L, (void*)&self->m_flags, "Primitive<int>");
	return 1;
}

static int tolua_get_CAITrigger_m_specific2(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specific2'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_specific2);
	return 1;
}

static int tolua_set_CAITrigger_m_specific2(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specific2'", NULL);
	self->m_specific2 = tolua_setter_tointeger<int>(L, "m_specific2");
	return 0;
}

static int tolua_get_CAITrigger_reference_m_specific2(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specific2'", NULL);
	tolua_pushusertype(L, (void*)&self->m_specific2, "Primitive<int>");
	return 1;
}

static int tolua_get_CAITrigger_m_specific3(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specific3'", NULL);
	lua_pushinteger(L, (lua_Integer)self->m_specific3);
	return 1;
}

static int tolua_set_CAITrigger_m_specific3(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specific3'", NULL);
	self->m_specific3 = tolua_setter_tointeger<int>(L, "m_specific3");
	return 0;
}

static int tolua_get_CAITrigger_reference_m_specific3(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_specific3'", NULL);
	tolua_pushusertype(L, (void*)&self->m_specific3, "Primitive<int>");
	return 1;
}

static int tolua_get_CAITrigger_m_string1(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_string1'", NULL);
	tolua_pushusertype(L, (void*)&self->m_string1, "CString");
	return 1;
}

static int tolua_get_CAITrigger_m_string2(lua_State* L)
{
	CAITrigger* self = (CAITrigger*)tolua_tousertype_dynamic(L, 1, 0, "CAITrigger");
	if (!self) tolua_error(L, "invalid 'self' in accessing variable 'm_string2'", NULL);
	tolua_pushusertype(L, (void*)&self->m_string2, "CString");
	return 1;
}

static void tolua_reg_types(lua_State* L)
{
	tolua_usertype(L, "CGameAnimation");
	tolua_usertype(L, "CGameDialogSprite");
	tolua_usertype(L, "CObList_CNode");
	tolua_usertype(L, "CPtrList_CNode");
	tolua_usertype(L, "CSize");
	tolua_usertype(L, "CWeather");
	tolua_usertype(L, "Primitive<__int8>");
	tolua_usertype(L, "Primitive<int32_t>");
	tolua_usertype(L, "Primitive<uint32_t>");
	tolua_usertype(L, "Primitive<HRESULT>");
	tolua_usertype(L, "Primitive<byte>");
	tolua_usertype(L, "Primitive<float>");
	tolua_usertype(L, "Primitive<BOOL>");
	tolua_usertype(L, "Primitive<ushort>");
	tolua_usertype(L, "Primitive<uint16_t>");
	tolua_usertype(L, "Primitive<int>");
	tolua_usertype(L, "Primitive<LONG>");
	tolua_usertype(L, "Primitive<uintptr_t>");
	tolua_usertype(L, "Primitive<__int64>");
	tolua_usertype(L, "Primitive<short>");
	tolua_usertype(L, "Primitive<__int16>");
	tolua_usertype(L, "Primitive<size_t>");
	tolua_usertype(L, "Primitive<bool>");
	tolua_usertype(L, "Primitive<UINT>");
	tolua_usertype(L, "Primitive<int64_t>");
	tolua_usertype(L, "Primitive<char>");
	tolua_usertype(L, "Primitive<char*>");
	tolua_usertype(L, "Primitive<double>");
	tolua_usertype(L, "Primitive<uint8_t>");
	tolua_usertype(L, "Primitive<ptrdiff_t>");
	tolua_usertype(L, "Primitive<__int32>");
	tolua_usertype(L, "Primitive<long double>");
	tolua_usertype(L, "Primitive<int8_t>");
	tolua_usertype(L, "Primitive<int16_t>");
	tolua_usertype(L, "Primitive<intptr_t>");
	tolua_usertype(L, "Primitive<DWORD>");
	tolua_usertype(L, "Primitive<uint64_t>");
	tolua_usertype(L, "Primitive<INT>");
	tolua_usertype(L, "Primitive<uint>");
	tolua_usertype(L, "Primitive<long>");
	tolua_usertype(L, "Primitive<LRESULT>");
	tolua_usertype(L, "RECT");
	tolua_usertype(L, "CRect");
	tolua_usertype(L, "UnmappedUserType");
	tolua_usertype(L, "VoidPointer");
	tolua_usertype(L, "CNetwork");
	tolua_usertype(L, "CUIControlButtonMapEntry");
	tolua_usertype(L, "CSearchBitmap");
	tolua_usertype(L, "CPtrList");
	tolua_usertype(L, "CPoint");
	tolua_usertype(L, "CObList");
	tolua_usertype(L, "UI_Control_st");
	tolua_usertype(L, "CVisibilityMap");
	tolua_usertype(L, "CVideoFunctions");
	tolua_usertype(L, "CParticle");
	tolua_usertype(L, "CDerivedStats");
	tolua_usertype(L, "mosHeader_st");
	tolua_usertype(L, "WED_TileData_st");
	tolua_usertype(L, "VariableArray<CResourceManagerHashEntry>");
	tolua_usertype(L, "VariableArray<CArchive>");
	tolua_usertype(L, "VariableArray<CGameDialogEntry*>");
	tolua_usertype(L, "VariableArray<CObList_CNode>");
	tolua_usertype(L, "VariableArray<CPtrList_CNode>");
	tolua_usertype(L, "VariableArray<CVRamPool>");
	tolua_usertype(L, "VariableArray<CRect>");
	tolua_usertype(L, "VariableArray<byte*>");
	tolua_usertype(L, "VariableArray<char>");
	tolua_usertype(L, "VariableArray<CPtrList>");
	tolua_usertype(L, "VariableArray<CPoint>");
	tolua_usertype(L, "VariableArray<UI_Control_st>");
	tolua_usertype(L, "VariableArray<CVideoFunctions>");
	tolua_usertype(L, "VariableArray<mosHeader_st>");
	tolua_usertype(L, "VariableArray<void*>");
	tolua_usertype(L, "VariableArray<CRuntimeClass>");
	tolua_usertype(L, "VariableArray<CUIControlBase>");
	tolua_usertype(L, "VariableArray<CString>");
	tolua_usertype(L, "VariableArray<CObject>");
	tolua_usertype(L, "VariableArray<CWarp>");
	tolua_usertype(L, "VariableArray<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	tolua_usertype(L, "VariableArray<CSyncObject>");
	tolua_usertype(L, "VariableArray<CRes>");
	tolua_usertype(L, "VariableArray<CResWED>");
	tolua_usertype(L, "VariableArray<CMessage>");
	tolua_usertype(L, "VariableArray<CInfCursor>");
	tolua_usertype(L, "VariableArray<CGameAnimationType>");
	tolua_usertype(L, "VariableArray<CResRef>");
	tolua_usertype(L, "VariableArray<CVidFont>");
	tolua_usertype(L, "VariableArray<CUIControlButton>");
	tolua_usertype(L, "VariableArray<CUIPanel>");
	tolua_usertype(L, "VariableArray<CItem>");
	tolua_usertype(L, "VariableArray<UI_PanelHeader_st>");
	tolua_usertype(L, "VariableArray<CUIManager>");
	tolua_usertype(L, "VariableArray<CBaldurEngine>");
	tolua_usertype(L, "VariableArray<CBaldurProjector>");
	tolua_usertype(L, "VariableArray<CScreenConnection>");
	tolua_usertype(L, "VariableArray<CScreenMap>");
	tolua_usertype(L, "VariableArray<CScreenWorldMap>");
	tolua_usertype(L, "VariableArray<CUnknownEngine11>");
	tolua_usertype(L, "VariableArray<CUnknownEngine12>");
	tolua_usertype(L, "VariableArray<CUnknownEngine13>");
	tolua_usertype(L, "VariableArray<CUnknownEngine14>");
	tolua_usertype(L, "VariableArray<CUnknownEngine15>");
	tolua_usertype(L, "VariableArray<CUnknownEngine16>");
	tolua_usertype(L, "VariableArray<CUnknownEngine17>");
	tolua_usertype(L, "VariableArray<CUnknownEngine18>");
	tolua_usertype(L, "VariableArray<CUnknownEngine19>");
	tolua_usertype(L, "VariableArray<CUnknownEngine2>");
	tolua_usertype(L, "VariableArray<CUnknownEngine4>");
	tolua_usertype(L, "VariableArray<CUnknownEngine5>");
	tolua_usertype(L, "VariableArray<CUnknownEngine6>");
	tolua_usertype(L, "VariableArray<CUnknownEngine7>");
	tolua_usertype(L, "VariableArray<CUnknownEngine8>");
	tolua_usertype(L, "VariableArray<CUnknownEngine9>");
	tolua_usertype(L, "VariableArray<CScreenWorld>");
	tolua_usertype(L, "VariableArray<CInfinity>");
	tolua_usertype(L, "VariableArray<CInfGame>");
	tolua_usertype(L, "VariableArray<CGameObjectArrayEntry>");
	tolua_usertype(L, "VariableArray<CGameEffect>");
	tolua_usertype(L, "VariableArray<CChitin>");
	tolua_usertype(L, "VariableArray<CBaldurChitin>");
	tolua_usertype(L, "VariableArray<CAIObjectType>");
	tolua_usertype(L, "VariableArray<CGameObject>");
	tolua_usertype(L, "VariableArray<CProjectile>");
	tolua_usertype(L, "VariableArray<CGameAIBase>");
	tolua_usertype(L, "VariableArray<CGameSprite>");
	tolua_usertype(L, "Pointer<CBaldurChitin>");
	tolua_usertype(L, "Pointer<const MSG>");
	tolua_usertype(L, "Pointer<CInfCursor>");
	tolua_usertype(L, "Pointer<CInfGame>");
	tolua_usertype(L, "Pointer<CUnknownEngine4>");
	tolua_usertype(L, "Pointer<CBaldurProjector>");
	tolua_usertype(L, "Pointer<CUnknownEngine2>");
	tolua_usertype(L, "Pointer<CUnknownEngine5>");
	tolua_usertype(L, "Pointer<CUnknownEngine6>");
	tolua_usertype(L, "Pointer<CUnknownEngine7>");
	tolua_usertype(L, "Pointer<CUnknownEngine8>");
	tolua_usertype(L, "Pointer<CUnknownEngine9>");
	tolua_usertype(L, "Pointer<CScreenMap>");
	tolua_usertype(L, "Pointer<CUnknownEngine11>");
	tolua_usertype(L, "Pointer<CUnknownEngine12>");
	tolua_usertype(L, "Pointer<CUnknownEngine13>");
	tolua_usertype(L, "Pointer<CUnknownEngine14>");
	tolua_usertype(L, "Pointer<CUnknownEngine15>");
	tolua_usertype(L, "Pointer<CScreenWorld>");
	tolua_usertype(L, "Pointer<CUnknownEngine16>");
	tolua_usertype(L, "Pointer<CUnknownEngine17>");
	tolua_usertype(L, "Pointer<CScreenConnection>");
	tolua_usertype(L, "Pointer<CScreenWorldMap>");
	tolua_usertype(L, "Pointer<CUnknownEngine18>");
	tolua_usertype(L, "Pointer<CUnknownEngine19>");
	tolua_usertype(L, "Pointer<CWarp>");
	tolua_usertype(L, "Pointer<CPoint>");
	tolua_usertype(L, "Pointer<CResWED>");
	tolua_usertype(L, "Pointer<CInfTileSet>");
	tolua_usertype(L, "Pointer<CVRamPool>");
	tolua_usertype(L, "Pointer<CVidMode>");
	tolua_usertype(L, "Pointer<CGameArea>");
	tolua_usertype(L, "Pointer<CPtrList>");
	tolua_usertype(L, "Pointer<CPtrList_CNode>");
	tolua_usertype(L, "Pointer<mosHeader_st>");
	tolua_usertype(L, "Pointer<CRes>");
	tolua_usertype(L, "Pointer<CResRef>");
	tolua_usertype(L, "Pointer<UI_Control_st>");
	tolua_usertype(L, "Pointer<UI_PanelHeader_st>");
	tolua_usertype(L, "Pointer<CSyncObject>");
	tolua_usertype(L, "Pointer<CUIControlBase>");
	tolua_usertype(L, "Pointer<CUIPanel>");
	tolua_usertype(L, "Pointer<CBaldurEngine>");
	tolua_usertype(L, "Pointer<CUIManager>");
	tolua_usertype(L, "Pointer<CRect>");
	tolua_usertype(L, "Pointer<CString>");
	tolua_usertype(L, "Pointer<DDSURFACEDESC>");
	tolua_usertype(L, "Pointer<CVidFont>");
	tolua_usertype(L, "Pointer<IDirectDrawSurface*>");
	tolua_usertype(L, "Pointer<void*>");
	tolua_usertype(L, "Pointer<uint>");
	tolua_usertype(L, "Pointer<CGameEffect>");
	tolua_usertype(L, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
	tolua_usertype(L, "Pointer<tagRGBQUAD>");
	tolua_usertype(L, "Pointer<CGameObject>");
	tolua_usertype(L, "Pointer<CAIObjectType>");
	tolua_usertype(L, "Pointer<CItem>");
	tolua_usertype(L, "Pointer<CUIControlButton>");
	tolua_usertype(L, "Pointer<CGameAnimationType>");
	tolua_usertype(L, "Pointer<CProjectile>");
	tolua_usertype(L, "Pointer<CChitin>");
	tolua_usertype(L, "Pointer<IDirectDraw>");
	tolua_usertype(L, "Pointer<byte>");
	tolua_usertype(L, "Pointer<CObList_CNode>");
	tolua_usertype(L, "Pointer<CVideoFunctions>");
	tolua_usertype(L, "Pointer<IDirectDrawSurface>");
	tolua_usertype(L, "Pointer<DDBLTFX>");
	tolua_usertype(L, "Pointer<CGameSprite>");
	tolua_usertype(L, "Pointer<CRuntimeClass>");
	tolua_usertype(L, "Pointer<CObject>");
	tolua_usertype(L, "Pointer<CArchive>");
	tolua_usertype(L, "Pointer<CGameAIBase>");
	tolua_usertype(L, "Pointer<CResourceManagerHashEntry>");
	tolua_usertype(L, "Pointer<CGameObjectArrayEntry>");
	tolua_usertype(L, "Pointer<CInfinity>");
	tolua_usertype(L, "Pointer<CGameDialogEntry*>");
	tolua_usertype(L, "Pointer<CMessage>");
	tolua_usertype(L, "Pointer<byte*>");
	tolua_usertype(L, "Pointer<VariableArray<CResourceManagerHashEntry>>");
	tolua_usertype(L, "Pointer<CBaldurChitin*>");
	tolua_usertype(L, "Pointer<const MSG*>");
	tolua_usertype(L, "Pointer<CInfCursor*>");
	tolua_usertype(L, "Pointer<CInfGame*>");
	tolua_usertype(L, "Pointer<CUnknownEngine4*>");
	tolua_usertype(L, "Pointer<CBaldurProjector*>");
	tolua_usertype(L, "Pointer<CUnknownEngine2*>");
	tolua_usertype(L, "Pointer<CUnknownEngine5*>");
	tolua_usertype(L, "Pointer<CUnknownEngine6*>");
	tolua_usertype(L, "Pointer<CUnknownEngine7*>");
	tolua_usertype(L, "Pointer<CUnknownEngine8*>");
	tolua_usertype(L, "Pointer<CUnknownEngine9*>");
	tolua_usertype(L, "Pointer<CScreenMap*>");
	tolua_usertype(L, "Pointer<CUnknownEngine11*>");
	tolua_usertype(L, "Pointer<CUnknownEngine12*>");
	tolua_usertype(L, "Pointer<CUnknownEngine13*>");
	tolua_usertype(L, "Pointer<CUnknownEngine14*>");
	tolua_usertype(L, "Pointer<CUnknownEngine15*>");
	tolua_usertype(L, "Pointer<CScreenWorld*>");
	tolua_usertype(L, "Pointer<CUnknownEngine16*>");
	tolua_usertype(L, "Pointer<CUnknownEngine17*>");
	tolua_usertype(L, "Pointer<CScreenConnection*>");
	tolua_usertype(L, "Pointer<CScreenWorldMap*>");
	tolua_usertype(L, "Pointer<CUnknownEngine18*>");
	tolua_usertype(L, "Pointer<CUnknownEngine19*>");
	tolua_usertype(L, "Pointer<CWarp*>");
	tolua_usertype(L, "Pointer<CPoint*>");
	tolua_usertype(L, "Pointer<CResWED*>");
	tolua_usertype(L, "Pointer<CInfTileSet*>");
	tolua_usertype(L, "Pointer<CVRamPool*>");
	tolua_usertype(L, "Pointer<CVidMode*>");
	tolua_usertype(L, "Pointer<CGameArea*>");
	tolua_usertype(L, "Pointer<CPtrList*>");
	tolua_usertype(L, "Pointer<CPtrList_CNode*>");
	tolua_usertype(L, "Pointer<mosHeader_st*>");
	tolua_usertype(L, "Pointer<CRes*>");
	tolua_usertype(L, "Pointer<CResRef*>");
	tolua_usertype(L, "Pointer<UI_Control_st*>");
	tolua_usertype(L, "Pointer<UI_PanelHeader_st*>");
	tolua_usertype(L, "Pointer<CSyncObject*>");
	tolua_usertype(L, "Pointer<CUIControlBase*>");
	tolua_usertype(L, "Pointer<CUIPanel*>");
	tolua_usertype(L, "Pointer<CBaldurEngine*>");
	tolua_usertype(L, "Pointer<CUIManager*>");
	tolua_usertype(L, "Pointer<CRect*>");
	tolua_usertype(L, "Pointer<CString*>");
	tolua_usertype(L, "Pointer<DDSURFACEDESC*>");
	tolua_usertype(L, "Pointer<CVidFont*>");
	tolua_usertype(L, "Pointer<IDirectDrawSurface**>");
	tolua_usertype(L, "Pointer<void**>");
	tolua_usertype(L, "Pointer<uint*>");
	tolua_usertype(L, "Pointer<CGameEffect*>");
	tolua_usertype(L, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>");
	tolua_usertype(L, "Pointer<tagRGBQUAD*>");
	tolua_usertype(L, "Pointer<CGameObject*>");
	tolua_usertype(L, "Pointer<CAIObjectType*>");
	tolua_usertype(L, "Pointer<CItem*>");
	tolua_usertype(L, "Pointer<CUIControlButton*>");
	tolua_usertype(L, "Pointer<CGameAnimationType*>");
	tolua_usertype(L, "Pointer<CProjectile*>");
	tolua_usertype(L, "Pointer<CChitin*>");
	tolua_usertype(L, "Pointer<IDirectDraw*>");
	tolua_usertype(L, "Pointer<CObList_CNode*>");
	tolua_usertype(L, "Pointer<CVideoFunctions*>");
	tolua_usertype(L, "Pointer<DDBLTFX*>");
	tolua_usertype(L, "Pointer<CGameSprite*>");
	tolua_usertype(L, "Pointer<CRuntimeClass*>");
	tolua_usertype(L, "Pointer<CObject*>");
	tolua_usertype(L, "Pointer<CArchive*>");
	tolua_usertype(L, "Pointer<CGameAIBase*>");
	tolua_usertype(L, "Pointer<CResourceManagerHashEntry*>");
	tolua_usertype(L, "Pointer<CGameObjectArrayEntry*>");
	tolua_usertype(L, "Pointer<CInfinity*>");
	tolua_usertype(L, "Pointer<CGameDialogEntry**>");
	tolua_usertype(L, "Pointer<CMessage*>");
	tolua_usertype(L, "Pointer<byte**>");
	tolua_usertype(L, "Pointer<VariableArray<CResourceManagerHashEntry>*>");
	tolua_usertype(L, "Pointer<BOOL>");
	tolua_usertype(L, "Pointer<CBlood>");
	tolua_usertype(L, "Pointer<CChitinUnknown>");
	tolua_usertype(L, "Pointer<CFile>");
	tolua_usertype(L, "Pointer<CGameAnimation>");
	tolua_usertype(L, "Pointer<CGameDialogEntry>");
	tolua_usertype(L, "Pointer<CGameDialogSprite>");
	tolua_usertype(L, "Pointer<CMessageHandler>");
	tolua_usertype(L, "Pointer<CProgressBar>");
	tolua_usertype(L, "Pointer<CRainStorm>");
	tolua_usertype(L, "Pointer<CSize>");
	tolua_usertype(L, "Pointer<CSnowStorm>");
	tolua_usertype(L, "Pointer<CSoundImp>");
	tolua_usertype(L, "Pointer<CTlkTable>");
	tolua_usertype(L, "Pointer<CVidBitmap>");
	tolua_usertype(L, "Pointer<CWeather>");
	tolua_usertype(L, "Pointer<DWORD>");
	tolua_usertype(L, "Pointer<DWORD*>");
	tolua_usertype(L, "Pointer<HRESULT>");
	tolua_usertype(L, "Pointer<INT>");
	tolua_usertype(L, "Pointer<LONG>");
	tolua_usertype(L, "Pointer<const LPCSTR>");
	tolua_usertype(L, "Pointer<LRESULT>");
	tolua_usertype(L, "Pointer<int>");
	tolua_usertype(L, "Pointer<UINT>");
	tolua_usertype(L, "Pointer<short>");
	tolua_usertype(L, "Pointer<size_t>");
	tolua_usertype(L, "Pointer<uintptr_t>");
	tolua_usertype(L, "Pointer<long>");
	tolua_usertype(L, "Pointer<ushort>");
	tolua_usertype(L, "Pointer<bool>");
	tolua_usertype(L, "Pointer<Primitive<__int8>>");
	tolua_usertype(L, "Pointer<Primitive<int32_t>>");
	tolua_usertype(L, "Pointer<Primitive<uint32_t>>");
	tolua_usertype(L, "Pointer<Primitive<HRESULT>>");
	tolua_usertype(L, "Pointer<Primitive<byte>>");
	tolua_usertype(L, "Pointer<Primitive<float>>");
	tolua_usertype(L, "Pointer<Primitive<BOOL>>");
	tolua_usertype(L, "Pointer<Primitive<ushort>>");
	tolua_usertype(L, "Pointer<Primitive<uint16_t>>");
	tolua_usertype(L, "Pointer<Primitive<int>>");
	tolua_usertype(L, "Pointer<Primitive<LONG>>");
	tolua_usertype(L, "Pointer<Primitive<uintptr_t>>");
	tolua_usertype(L, "Pointer<Primitive<__int64>>");
	tolua_usertype(L, "Pointer<Primitive<short>>");
	tolua_usertype(L, "Pointer<Primitive<__int16>>");
	tolua_usertype(L, "Pointer<Primitive<size_t>>");
	tolua_usertype(L, "Pointer<Primitive<bool>>");
	tolua_usertype(L, "Pointer<Primitive<UINT>>");
	tolua_usertype(L, "Pointer<Primitive<int64_t>>");
	tolua_usertype(L, "Pointer<Primitive<char>>");
	tolua_usertype(L, "Pointer<Primitive<const char*>>");
	tolua_usertype(L, "Pointer<Primitive<double>>");
	tolua_usertype(L, "Pointer<Primitive<uint8_t>>");
	tolua_usertype(L, "Pointer<Primitive<ptrdiff_t>>");
	tolua_usertype(L, "Pointer<Primitive<__int32>>");
	tolua_usertype(L, "Pointer<Primitive<long double>>");
	tolua_usertype(L, "Pointer<Primitive<int8_t>>");
	tolua_usertype(L, "Pointer<Primitive<int16_t>>");
	tolua_usertype(L, "Pointer<Primitive<intptr_t>>");
	tolua_usertype(L, "Pointer<Primitive<DWORD>>");
	tolua_usertype(L, "Pointer<Primitive<uint64_t>>");
	tolua_usertype(L, "Pointer<Primitive<INT>>");
	tolua_usertype(L, "Pointer<Primitive<uint>>");
	tolua_usertype(L, "Pointer<Primitive<long>>");
	tolua_usertype(L, "Pointer<Primitive<LRESULT>>");
	tolua_usertype(L, "Pointer<RECT>");
	tolua_usertype(L, "Pointer<UnknownLuaStruct>");
	tolua_usertype(L, "Pointer<UnmappedUserType>");
	tolua_usertype(L, "Pointer<CNetwork>");
	tolua_usertype(L, "Pointer<char*>");
	tolua_usertype(L, "Pointer<char>");
	tolua_usertype(L, "Pointer<const char*>");
	tolua_usertype(L, "Pointer<int*>");
	tolua_usertype(L, "Pointer<CVidPoly>");
	tolua_usertype(L, "Pointer<CUIControlButtonMapEntry>");
	tolua_usertype(L, "Pointer<CUIControlButtonMapEntry*>");
	tolua_usertype(L, "Pointer<CSearchBitmap>");
	tolua_usertype(L, "Pointer<CObList>");
	tolua_usertype(L, "Pointer<CVisibilityMap>");
	tolua_usertype(L, "Pointer<CParticle>");
	tolua_usertype(L, "Pointer<CItem::vtbl>");
	tolua_usertype(L, "Pointer<CDerivedStats>");
	tolua_usertype(L, "Pointer<WED_TileData_st>");
	tolua_usertype(L, "Pointer<const ConstCharString*>");
	tolua_usertype(L, "Pointer<CharString*>");
	tolua_usertype(L, "Pointer<CVidMode::vtbl>");
	tolua_usertype(L, "Pointer<CUIControlBase::vtbl>");
	tolua_usertype(L, "Pointer<CUIControlButton::vtbl>");
	tolua_usertype(L, "Pointer<CSoundMixer>");
	tolua_usertype(L, "Pointer<CSingleLock>");
	tolua_usertype(L, "Pointer<CObject::vtbl>");
	tolua_usertype(L, "Pointer<CWarp::vtbl>");
	tolua_usertype(L, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::vtbl>");
	tolua_usertype(L, "Pointer<CTypedPtrList<CPtrList,long>>");
	tolua_usertype(L, "Pointer<CTypedPtrList<CPtrList,CWarp*>>");
	tolua_usertype(L, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>>");
	tolua_usertype(L, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>>");
	tolua_usertype(L, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>>");
	tolua_usertype(L, "Pointer<CGameEffectList>");
	tolua_usertype(L, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>");
	tolua_usertype(L, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>");
	tolua_usertype(L, "Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>");
	tolua_usertype(L, "Pointer<CTypedPtrList<CPtrList,long>::CNode>");
	tolua_usertype(L, "Pointer<CSyncObject::vtbl>");
	tolua_usertype(L, "Pointer<CGameObjectArray>");
	tolua_usertype(L, "Pointer<CVidMode3>");
	tolua_usertype(L, "Pointer<CVidMode2>");
	tolua_usertype(L, "Pointer<CVidMode1>");
	tolua_usertype(L, "Pointer<CVidMode0>");
	tolua_usertype(L, "Pointer<CCriticalSection>");
	tolua_usertype(L, "Pointer<CRes::vtbl>");
	tolua_usertype(L, "Pointer<CResUI>");
	tolua_usertype(L, "Pointer<CResText>");
	tolua_usertype(L, "Pointer<CResText*>");
	tolua_usertype(L, "Pointer<CResMosaic>");
	tolua_usertype(L, "Pointer<CResMosaic*>");
	tolua_usertype(L, "Pointer<CResItem>");
	tolua_usertype(L, "Pointer<CResItem*>");
	tolua_usertype(L, "Pointer<CResEffect>");
	tolua_usertype(L, "Pointer<CResEffect*>");
	tolua_usertype(L, "Pointer<CResCell>");
	tolua_usertype(L, "Pointer<CResCell*>");
	tolua_usertype(L, "Pointer<CMessage::vtbl>");
	tolua_usertype(L, "Pointer<CMessageVisualEffect>");
	tolua_usertype(L, "Pointer<CMessageUnknown>");
	tolua_usertype(L, "Pointer<CMessageAutoScroll>");
	tolua_usertype(L, "Pointer<CMessageAddEffect>");
	tolua_usertype(L, "Pointer<CGameObject::vtbl>");
	tolua_usertype(L, "Pointer<CGameEffect::vtbl>");
	tolua_usertype(L, "Pointer<CGameAnimationType::vtbl>");
	tolua_usertype(L, "Pointer<CGameAnimationTypeCharacter>");
	tolua_usertype(L, "Pointer<CChitin::vtbl>");
	tolua_usertype(L, "Pointer<CBaldurEngine::vtbl>");
	tolua_usertype(L, "Pointer<CAIGroup>");
	tolua_usertype(L, "Pointer<CVideo>");
	tolua_usertype(L, "Pointer<CVidPalette>");
	tolua_usertype(L, "Pointer<CVidImage>");
	tolua_usertype(L, "Pointer<CResHelper<CResMosaic,1004>>");
	tolua_usertype(L, "Pointer<CResHelper<CResText,1012>>");
	tolua_usertype(L, "Pointer<CResHelper<CResCell,1000>>");
	tolua_usertype(L, "Pointer<CResHelper<CResEffect,1016>>");
	tolua_usertype(L, "Pointer<CResHelper<CResItem,1005>>");
	tolua_usertype(L, "Pointer<CVidCell>");
	tolua_usertype(L, "Pointer<CGameEffectFile>");
	tolua_usertype(L, "Pointer<CVidMosaic>");
	tolua_usertype(L, "Pointer<CUIControlButtonMap>");
	tolua_usertype(L, "Pointer<CCacheStatus>");
	tolua_usertype(L, "Pointer<CUIControlTextField>");
	tolua_usertype(L, "Pointer<C2DArray>");
	tolua_usertype(L, "Pointer<CRuleTables>");
	tolua_usertype(L, "Pointer<WED_LayerHeader_st>");
	tolua_usertype(L, "Pointer<Item_effect_st>");
	tolua_usertype(L, "Pointer<CResourceManagerHashTable>");
	tolua_usertype(L, "Pointer<CResourceManager>");
	tolua_usertype(L, "Pointer<CInfButtonArray>");
	tolua_usertype(L, "Pointer<CGameEffectBase>");
	tolua_usertype(L, "Pointer<CAIAction>");
	tolua_usertype(L, "Pointer<CGameAIBase::vtbl>");
	tolua_usertype(L, "Pointer<CProjectile::vtbl>");
	tolua_usertype(L, "Pointer<CProjectileMagicMissile>");
	tolua_usertype(L, "Pointer<CAITrigger>");
	tolua_usertype(L, "EnhancedWidescreen");
	tolua_usertype(L, "ConstCharString");
	tolua_usertype(L, "EngineGlobals");
	tolua_usertype(L, "CharString");
	tolua_usertype(L, "CRuntimeClass");
	tolua_usertype(L, "CUIControlBase");
	tolua_usertype(L, "CUIControlBase::vtbl");
	tolua_usertype(L, "CString");
	tolua_usertype(L, "CSoundMixer");
	tolua_usertype(L, "CSingleLock");
	tolua_usertype(L, "CObject");
	tolua_usertype(L, "CObject::vtbl");
	tolua_usertype(L, "CWarp");
	tolua_usertype(L, "CWarp::vtbl");
	tolua_usertype(L, "CTypedPtrList<CPtrList,long>");
	tolua_usertype(L, "CTypedPtrList<CPtrList,long>::CNode");
	tolua_usertype(L, "CTypedPtrList<CPtrList,long>::vtbl");
	tolua_usertype(L, "CTypedPtrList<CPtrList,CWarp*>");
	tolua_usertype(L, "CTypedPtrList<CPtrList,CWarp*>::CNode");
	tolua_usertype(L, "CTypedPtrList<CPtrList,CWarp*>::vtbl");
	tolua_usertype(L, "CTypedPtrList<CPtrList,CUIPanel*>");
	tolua_usertype(L, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
	tolua_usertype(L, "CTypedPtrList<CPtrList,CUIPanel*>::vtbl");
	tolua_usertype(L, "CTypedPtrList<CPtrList,CUIControlBase*>");
	tolua_usertype(L, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
	tolua_usertype(L, "CTypedPtrList<CPtrList,CUIControlBase*>::vtbl");
	tolua_usertype(L, "CTypedPtrList<CPtrList,CGameEffect*>");
	tolua_usertype(L, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
	tolua_usertype(L, "CTypedPtrList<CPtrList,CGameEffect*>::vtbl");
	tolua_usertype(L, "CGameEffectList");
	tolua_usertype(L, "CGameEffectList::vtbl");
	tolua_usertype(L, "CSyncObject");
	tolua_usertype(L, "CSyncObject::vtbl");
	tolua_usertype(L, "CGameObjectArray");
	tolua_usertype(L, "CVidMode");
	tolua_usertype(L, "CVidMode::vtbl");
	tolua_usertype(L, "CVidMode3");
	tolua_usertype(L, "CVidMode3::vtbl");
	tolua_usertype(L, "CVidMode2");
	tolua_usertype(L, "CVidMode2::vtbl");
	tolua_usertype(L, "CVidMode1");
	tolua_usertype(L, "CVidMode1::vtbl");
	tolua_usertype(L, "CVidMode0");
	tolua_usertype(L, "CVidMode0::vtbl");
	tolua_usertype(L, "CCriticalSection");
	tolua_usertype(L, "CCriticalSection::vtbl");
	tolua_usertype(L, "CRes");
	tolua_usertype(L, "CRes::vtbl");
	tolua_usertype(L, "CResWED");
	tolua_usertype(L, "CResWED::vtbl");
	tolua_usertype(L, "CResUI");
	tolua_usertype(L, "CResUI::vtbl");
	tolua_usertype(L, "CResText");
	tolua_usertype(L, "CResText::vtbl");
	tolua_usertype(L, "CResMosaic");
	tolua_usertype(L, "CResMosaic::vtbl");
	tolua_usertype(L, "CResItem");
	tolua_usertype(L, "CResItem::vtbl");
	tolua_usertype(L, "CResEffect");
	tolua_usertype(L, "CResEffect::vtbl");
	tolua_usertype(L, "CResCell");
	tolua_usertype(L, "CResCell::vtbl");
	tolua_usertype(L, "CMessage");
	tolua_usertype(L, "CMessage::vtbl");
	tolua_usertype(L, "CMessageVisualEffect");
	tolua_usertype(L, "CMessageVisualEffect::vtbl");
	tolua_usertype(L, "CMessageUnknown");
	tolua_usertype(L, "CMessageUnknown::vtbl");
	tolua_usertype(L, "CMessageAutoScroll");
	tolua_usertype(L, "CMessageAutoScroll::vtbl");
	tolua_usertype(L, "CMessageAddEffect");
	tolua_usertype(L, "CMessageAddEffect::vtbl");
	tolua_usertype(L, "CInfCursor");
	tolua_usertype(L, "CGameAnimationType");
	tolua_usertype(L, "CGameAnimationType::vtbl");
	tolua_usertype(L, "CGameAnimationTypeCharacter");
	tolua_usertype(L, "CGameAnimationTypeCharacter::vtbl");
	tolua_usertype(L, "CAIGroup");
	tolua_usertype(L, "Array<char,8>");
	tolua_usertype(L, "Array<DWORD,10>");
	tolua_usertype(L, "Array<CInfTileSet*,5>");
	tolua_usertype(L, "Array<tagRGBQUAD,256>");
	tolua_usertype(L, "Array<char,32>");
	tolua_usertype(L, "Array<byte,5>");
	tolua_usertype(L, "Array<byte,16>");
	tolua_usertype(L, "Array<uint,15>");
	tolua_usertype(L, "Array<CGameArea*,12>");
	tolua_usertype(L, "Array<int,6>");
	tolua_usertype(L, "Array<byte,168>");
	tolua_usertype(L, "Array<CVidMode*,4>");
	tolua_usertype(L, "Array<CUIControlButtonMapEntry,1>");
	tolua_usertype(L, "Array<int,12>");
	tolua_usertype(L, "Array<byte,10>");
	tolua_usertype(L, "Array<byte,7>");
	tolua_usertype(L, "Array<byte,3>");
	tolua_usertype(L, "CVideo");
	tolua_usertype(L, "CVidPalette");
	tolua_usertype(L, "CVidImage");
	tolua_usertype(L, "CResRef");
	tolua_usertype(L, "CResHelper<CResMosaic,1004>");
	tolua_usertype(L, "CResHelper<CResText,1012>");
	tolua_usertype(L, "CResHelper<CResCell,1000>");
	tolua_usertype(L, "CResHelper<CResEffect,1016>");
	tolua_usertype(L, "CResHelper<CResItem,1005>");
	tolua_usertype(L, "CVidCell");
	tolua_usertype(L, "CVidFont");
	tolua_usertype(L, "CUIControlButton");
	tolua_usertype(L, "CGameEffectFile");
	tolua_usertype(L, "CVidMosaic");
	tolua_usertype(L, "CUIControlButtonMap");
	tolua_usertype(L, "CUIControlButtonMap::vtbl");
	tolua_usertype(L, "CUIControlTextField");
	tolua_usertype(L, "CUIControlTextField::vtbl");
	tolua_usertype(L, "CUIPanel");
	tolua_usertype(L, "CItem");
	tolua_usertype(L, "CItem::vtbl");
	tolua_usertype(L, "C2DArray");
	tolua_usertype(L, "CRuleTables");
	tolua_usertype(L, "WED_LayerHeader_st");
	tolua_usertype(L, "UI_PanelHeader_st");
	tolua_usertype(L, "Item_effect_st");
	tolua_usertype(L, "CUIManager");
	tolua_usertype(L, "CBaldurEngine");
	tolua_usertype(L, "CBaldurEngine::vtbl");
	tolua_usertype(L, "CBaldurProjector");
	tolua_usertype(L, "CBaldurProjector::vtbl");
	tolua_usertype(L, "CScreenConnection");
	tolua_usertype(L, "CScreenConnection::vtbl");
	tolua_usertype(L, "CScreenMap");
	tolua_usertype(L, "CScreenMap::vtbl");
	tolua_usertype(L, "CScreenWorldMap");
	tolua_usertype(L, "CScreenWorldMap::vtbl");
	tolua_usertype(L, "CUnknownEngine11");
	tolua_usertype(L, "CUnknownEngine11::vtbl");
	tolua_usertype(L, "CUnknownEngine12");
	tolua_usertype(L, "CUnknownEngine12::vtbl");
	tolua_usertype(L, "CUnknownEngine13");
	tolua_usertype(L, "CUnknownEngine13::vtbl");
	tolua_usertype(L, "CUnknownEngine14");
	tolua_usertype(L, "CUnknownEngine14::vtbl");
	tolua_usertype(L, "CUnknownEngine15");
	tolua_usertype(L, "CUnknownEngine15::vtbl");
	tolua_usertype(L, "CUnknownEngine16");
	tolua_usertype(L, "CUnknownEngine16::vtbl");
	tolua_usertype(L, "CUnknownEngine17");
	tolua_usertype(L, "CUnknownEngine17::vtbl");
	tolua_usertype(L, "CUnknownEngine18");
	tolua_usertype(L, "CUnknownEngine18::vtbl");
	tolua_usertype(L, "CUnknownEngine19");
	tolua_usertype(L, "CUnknownEngine19::vtbl");
	tolua_usertype(L, "CUnknownEngine2");
	tolua_usertype(L, "CUnknownEngine2::vtbl");
	tolua_usertype(L, "CUnknownEngine4");
	tolua_usertype(L, "CUnknownEngine4::vtbl");
	tolua_usertype(L, "CUnknownEngine5");
	tolua_usertype(L, "CUnknownEngine5::vtbl");
	tolua_usertype(L, "CUnknownEngine6");
	tolua_usertype(L, "CUnknownEngine6::vtbl");
	tolua_usertype(L, "CUnknownEngine7");
	tolua_usertype(L, "CUnknownEngine7::vtbl");
	tolua_usertype(L, "CUnknownEngine8");
	tolua_usertype(L, "CUnknownEngine8::vtbl");
	tolua_usertype(L, "CUnknownEngine9");
	tolua_usertype(L, "CUnknownEngine9::vtbl");
	tolua_usertype(L, "CScreenWorld");
	tolua_usertype(L, "CScreenWorld::vtbl");
	tolua_usertype(L, "CResourceManagerHashEntry");
	tolua_usertype(L, "CResourceManagerHashTable");
	tolua_usertype(L, "CResourceManager");
	tolua_usertype(L, "CInfinity");
	tolua_usertype(L, "CGameArea");
	tolua_usertype(L, "CInfButtonArray");
	tolua_usertype(L, "CInfGame");
	tolua_usertype(L, "CGameObjectArrayEntry");
	tolua_usertype(L, "CGameEffectBase");
	tolua_usertype(L, "CGameEffect");
	tolua_usertype(L, "CGameEffect::vtbl");
	tolua_usertype(L, "CChitin");
	tolua_usertype(L, "CChitin::vtbl");
	tolua_usertype(L, "CBaldurChitin");
	tolua_usertype(L, "CBaldurChitin::vtbl");
	tolua_usertype(L, "CAIObjectType");
	tolua_usertype(L, "CAIAction");
	tolua_usertype(L, "CGameObject");
	tolua_usertype(L, "CGameObject::vtbl");
	tolua_usertype(L, "CProjectile");
	tolua_usertype(L, "CProjectile::vtbl");
	tolua_usertype(L, "CProjectileMagicMissile");
	tolua_usertype(L, "CProjectileMagicMissile::vtbl");
	tolua_usertype(L, "CGameAIBase");
	tolua_usertype(L, "CGameAIBase::vtbl");
	tolua_usertype(L, "CGameSprite");
	tolua_usertype(L, "CAITrigger");
}

void registerBaseclasses();
int OpenBindingsInternal(lua_State* L)
{
	registerBaseclasses();
	tolua_open(L);
	tolua_reg_types(L);
	tolua_module(L, NULL, 0);
	tolua_beginmodule(L, NULL);
	tolua_cclass(L, "CGameAnimation", "CGameAnimation", {}, NULL);
	tolua_beginmodule(L, "CGameAnimation");
		tolua_variable(L, "m_animation", tolua_get_CGameAnimation_m_animation, tolua_set_CGameAnimation_m_animation);
		tolua_variable(L, "reference_m_animation", tolua_get_CGameAnimation_reference_m_animation, NULL);
		tolua_constant(L, "sizeof", sizeof(CGameAnimation));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameDialogSprite", "CGameDialogSprite", {}, NULL);
	tolua_beginmodule(L, "CGameDialogSprite");
		tolua_variable(L, "m_dialogEntries", tolua_get_CGameDialogSprite_m_dialogEntries, tolua_set_CGameDialogSprite_m_dialogEntries);
		tolua_variable(L, "reference_m_dialogEntries", tolua_get_CGameDialogSprite_reference_m_dialogEntries, NULL);
		tolua_constant(L, "sizeof", sizeof(CGameDialogSprite));
	tolua_endmodule(L);
	tolua_cclass(L, "CObList_CNode", "CObList_CNode", {}, NULL);
	tolua_beginmodule(L, "CObList_CNode");
		tolua_variable(L, "pNext", tolua_get_CObList_CNode_pNext, tolua_set_CObList_CNode_pNext);
		tolua_variable(L, "reference_pNext", tolua_get_CObList_CNode_reference_pNext, NULL);
		tolua_variable(L, "pPrev", tolua_get_CObList_CNode_pPrev, tolua_set_CObList_CNode_pPrev);
		tolua_variable(L, "reference_pPrev", tolua_get_CObList_CNode_reference_pPrev, NULL);
		tolua_variable(L, "data", tolua_get_CObList_CNode_data, tolua_set_CObList_CNode_data);
		tolua_variable(L, "reference_data", tolua_get_CObList_CNode_reference_data, NULL);
		tolua_constant(L, "sizeof", sizeof(CObList_CNode));
	tolua_endmodule(L);
	tolua_cclass(L, "CPtrList_CNode", "CPtrList_CNode", {}, NULL);
	tolua_beginmodule(L, "CPtrList_CNode");
		tolua_variable(L, "m_pNext", tolua_get_CPtrList_CNode_m_pNext, tolua_set_CPtrList_CNode_m_pNext);
		tolua_variable(L, "reference_m_pNext", tolua_get_CPtrList_CNode_reference_m_pNext, NULL);
		tolua_variable(L, "m_pPrev", tolua_get_CPtrList_CNode_m_pPrev, tolua_set_CPtrList_CNode_m_pPrev);
		tolua_variable(L, "reference_m_pPrev", tolua_get_CPtrList_CNode_reference_m_pPrev, NULL);
		tolua_variable(L, "m_pData", tolua_get_CPtrList_CNode_m_pData, tolua_set_CPtrList_CNode_m_pData);
		tolua_variable(L, "reference_m_pData", tolua_get_CPtrList_CNode_reference_m_pData, NULL);
		tolua_constant(L, "sizeof", sizeof(CPtrList_CNode));
	tolua_endmodule(L);
	tolua_cclass(L, "CSize", "CSize", {"tagSIZE"}, NULL);
	tolua_beginmodule(L, "CSize");
		tolua_constant(L, "sizeof", sizeof(CSize));
	tolua_endmodule(L);
	tolua_cclass(L, "CWeather", "CWeather", {}, NULL);
	tolua_beginmodule(L, "CWeather");
		tolua_variable(L, "m_snowStorm", tolua_get_CWeather_m_snowStorm, NULL);
		tolua_variable(L, "m_rainStorm", tolua_get_CWeather_m_rainStorm, NULL);
		tolua_constant(L, "sizeof", sizeof(CWeather));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<__int8>", "Primitive<__int8>", {}, NULL);
	tolua_beginmodule(L, "Primitive<__int8>");
		tolua_variable(L, "value", tolua_get_Primitive___int8__value, tolua_set_Primitive___int8__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive___int8__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<__int8>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<int32_t>", "Primitive<int32_t>", {}, NULL);
	tolua_beginmodule(L, "Primitive<int32_t>");
		tolua_variable(L, "value", tolua_get_Primitive_int32_t__value, tolua_set_Primitive_int32_t__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_int32_t__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<int32_t>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<uint32_t>", "Primitive<uint32_t>", {}, NULL);
	tolua_beginmodule(L, "Primitive<uint32_t>");
		tolua_variable(L, "value", tolua_get_Primitive_uint32_t__value, tolua_set_Primitive_uint32_t__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_uint32_t__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<uint32_t>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<HRESULT>", "Primitive<HRESULT>", {}, NULL);
	tolua_beginmodule(L, "Primitive<HRESULT>");
		tolua_variable(L, "value", tolua_get_Primitive_HRESULT__value, tolua_set_Primitive_HRESULT__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_HRESULT__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<HRESULT>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<byte>", "Primitive<byte>", {}, NULL);
	tolua_beginmodule(L, "Primitive<byte>");
		tolua_variable(L, "value", tolua_get_Primitive_byte__value, tolua_set_Primitive_byte__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_byte__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<byte>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<float>", "Primitive<float>", {}, NULL);
	tolua_beginmodule(L, "Primitive<float>");
		tolua_variable(L, "value", tolua_get_Primitive_float__value, tolua_set_Primitive_float__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_float__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<float>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<BOOL>", "Primitive<BOOL>", {}, NULL);
	tolua_beginmodule(L, "Primitive<BOOL>");
		tolua_variable(L, "value", tolua_get_Primitive_BOOL__value, tolua_set_Primitive_BOOL__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_BOOL__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<BOOL>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<ushort>", "Primitive<ushort>", {}, NULL);
	tolua_beginmodule(L, "Primitive<ushort>");
		tolua_variable(L, "value", tolua_get_Primitive_ushort__value, tolua_set_Primitive_ushort__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_ushort__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<ushort>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<uint16_t>", "Primitive<uint16_t>", {}, NULL);
	tolua_beginmodule(L, "Primitive<uint16_t>");
		tolua_variable(L, "value", tolua_get_Primitive_uint16_t__value, tolua_set_Primitive_uint16_t__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_uint16_t__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<uint16_t>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<int>", "Primitive<int>", {}, NULL);
	tolua_beginmodule(L, "Primitive<int>");
		tolua_variable(L, "value", tolua_get_Primitive_int__value, tolua_set_Primitive_int__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_int__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<int>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<LONG>", "Primitive<LONG>", {}, NULL);
	tolua_beginmodule(L, "Primitive<LONG>");
		tolua_variable(L, "value", tolua_get_Primitive_LONG__value, tolua_set_Primitive_LONG__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_LONG__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<LONG>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<uintptr_t>", "Primitive<uintptr_t>", {}, NULL);
	tolua_beginmodule(L, "Primitive<uintptr_t>");
		tolua_variable(L, "value", tolua_get_Primitive_uintptr_t__value, tolua_set_Primitive_uintptr_t__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_uintptr_t__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<uintptr_t>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<__int64>", "Primitive<__int64>", {}, NULL);
	tolua_beginmodule(L, "Primitive<__int64>");
		tolua_variable(L, "value", tolua_get_Primitive___int64__value, tolua_set_Primitive___int64__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive___int64__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<__int64>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<short>", "Primitive<short>", {}, NULL);
	tolua_beginmodule(L, "Primitive<short>");
		tolua_variable(L, "value", tolua_get_Primitive_short__value, tolua_set_Primitive_short__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_short__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<short>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<__int16>", "Primitive<__int16>", {}, NULL);
	tolua_beginmodule(L, "Primitive<__int16>");
		tolua_variable(L, "value", tolua_get_Primitive___int16__value, tolua_set_Primitive___int16__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive___int16__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<__int16>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<size_t>", "Primitive<size_t>", {}, NULL);
	tolua_beginmodule(L, "Primitive<size_t>");
		tolua_variable(L, "value", tolua_get_Primitive_size_t__value, tolua_set_Primitive_size_t__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_size_t__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<size_t>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<bool>", "Primitive<bool>", {}, NULL);
	tolua_beginmodule(L, "Primitive<bool>");
		tolua_variable(L, "value", tolua_get_Primitive_bool__value, tolua_set_Primitive_bool__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_bool__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<bool>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<UINT>", "Primitive<UINT>", {}, NULL);
	tolua_beginmodule(L, "Primitive<UINT>");
		tolua_variable(L, "value", tolua_get_Primitive_UINT__value, tolua_set_Primitive_UINT__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_UINT__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<UINT>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<int64_t>", "Primitive<int64_t>", {}, NULL);
	tolua_beginmodule(L, "Primitive<int64_t>");
		tolua_variable(L, "value", tolua_get_Primitive_int64_t__value, tolua_set_Primitive_int64_t__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_int64_t__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<int64_t>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<char>", "Primitive<char>", {}, NULL);
	tolua_beginmodule(L, "Primitive<char>");
		tolua_variable(L, "value", tolua_get_Primitive_char__value, tolua_set_Primitive_char__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_char__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<char>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<char*>", "Primitive<char*>", {}, NULL);
	tolua_beginmodule(L, "Primitive<char*>");
		tolua_variable(L, "value", tolua_get_Primitive_char___value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<char*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<double>", "Primitive<double>", {}, NULL);
	tolua_beginmodule(L, "Primitive<double>");
		tolua_variable(L, "value", tolua_get_Primitive_double__value, tolua_set_Primitive_double__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_double__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<double>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<uint8_t>", "Primitive<uint8_t>", {}, NULL);
	tolua_beginmodule(L, "Primitive<uint8_t>");
		tolua_variable(L, "value", tolua_get_Primitive_uint8_t__value, tolua_set_Primitive_uint8_t__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_uint8_t__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<uint8_t>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<ptrdiff_t>", "Primitive<ptrdiff_t>", {}, NULL);
	tolua_beginmodule(L, "Primitive<ptrdiff_t>");
		tolua_variable(L, "value", tolua_get_Primitive_ptrdiff_t__value, tolua_set_Primitive_ptrdiff_t__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_ptrdiff_t__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<ptrdiff_t>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<__int32>", "Primitive<__int32>", {}, NULL);
	tolua_beginmodule(L, "Primitive<__int32>");
		tolua_variable(L, "value", tolua_get_Primitive___int32__value, tolua_set_Primitive___int32__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive___int32__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<__int32>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<long double>", "Primitive<long double>", {}, NULL);
	tolua_beginmodule(L, "Primitive<long double>");
		tolua_variable(L, "value", tolua_get_Primitive_long_double__value, tolua_set_Primitive_long_double__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_long_double__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<long double>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<int8_t>", "Primitive<int8_t>", {}, NULL);
	tolua_beginmodule(L, "Primitive<int8_t>");
		tolua_variable(L, "value", tolua_get_Primitive_int8_t__value, tolua_set_Primitive_int8_t__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_int8_t__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<int8_t>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<int16_t>", "Primitive<int16_t>", {}, NULL);
	tolua_beginmodule(L, "Primitive<int16_t>");
		tolua_variable(L, "value", tolua_get_Primitive_int16_t__value, tolua_set_Primitive_int16_t__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_int16_t__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<int16_t>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<intptr_t>", "Primitive<intptr_t>", {}, NULL);
	tolua_beginmodule(L, "Primitive<intptr_t>");
		tolua_variable(L, "value", tolua_get_Primitive_intptr_t__value, tolua_set_Primitive_intptr_t__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_intptr_t__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<intptr_t>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<DWORD>", "Primitive<DWORD>", {}, NULL);
	tolua_beginmodule(L, "Primitive<DWORD>");
		tolua_variable(L, "value", tolua_get_Primitive_DWORD__value, tolua_set_Primitive_DWORD__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_DWORD__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<DWORD>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<uint64_t>", "Primitive<uint64_t>", {}, NULL);
	tolua_beginmodule(L, "Primitive<uint64_t>");
		tolua_variable(L, "value", tolua_get_Primitive_uint64_t__value, tolua_set_Primitive_uint64_t__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_uint64_t__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<uint64_t>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<INT>", "Primitive<INT>", {}, NULL);
	tolua_beginmodule(L, "Primitive<INT>");
		tolua_variable(L, "value", tolua_get_Primitive_INT__value, tolua_set_Primitive_INT__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_INT__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<INT>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<uint>", "Primitive<uint>", {}, NULL);
	tolua_beginmodule(L, "Primitive<uint>");
		tolua_variable(L, "value", tolua_get_Primitive_uint__value, tolua_set_Primitive_uint__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_uint__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<uint>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<long>", "Primitive<long>", {}, NULL);
	tolua_beginmodule(L, "Primitive<long>");
		tolua_variable(L, "value", tolua_get_Primitive_long__value, tolua_set_Primitive_long__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_long__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<long>));
	tolua_endmodule(L);
	tolua_cclass(L, "Primitive<LRESULT>", "Primitive<LRESULT>", {}, NULL);
	tolua_beginmodule(L, "Primitive<LRESULT>");
		tolua_variable(L, "value", tolua_get_Primitive_LRESULT__value, tolua_set_Primitive_LRESULT__value);
		tolua_variable(L, "reference_value", tolua_get_Primitive_LRESULT__reference_value, NULL);
		tolua_constant(L, "sizeof", sizeof(Primitive<LRESULT>));
	tolua_endmodule(L);
	tolua_cclass(L, "RECT", "RECT", {}, NULL);
	tolua_beginmodule(L, "RECT");
		tolua_variable(L, "left", tolua_get_RECT_left, tolua_set_RECT_left);
		tolua_variable(L, "reference_left", tolua_get_RECT_reference_left, NULL);
		tolua_variable(L, "top", tolua_get_RECT_top, tolua_set_RECT_top);
		tolua_variable(L, "reference_top", tolua_get_RECT_reference_top, NULL);
		tolua_variable(L, "right", tolua_get_RECT_right, tolua_set_RECT_right);
		tolua_variable(L, "reference_right", tolua_get_RECT_reference_right, NULL);
		tolua_variable(L, "bottom", tolua_get_RECT_bottom, tolua_set_RECT_bottom);
		tolua_variable(L, "reference_bottom", tolua_get_RECT_reference_bottom, NULL);
		tolua_constant(L, "sizeof", sizeof(RECT));
	tolua_endmodule(L);
	tolua_cclass(L, "CRect", "CRect", {"RECT"}, NULL);
	tolua_beginmodule(L, "CRect");
		tolua_constant(L, "sizeof", sizeof(CRect));
	tolua_endmodule(L);
	tolua_cclass(L, "UnmappedUserType", "UnmappedUserType", {}, NULL);
	tolua_beginmodule(L, "UnmappedUserType");
		tolua_constant(L, "sizeof", sizeof(UnmappedUserType));
	tolua_endmodule(L);
	tolua_cclass(L, "VoidPointer", "VoidPointer", {}, NULL);
	tolua_beginmodule(L, "VoidPointer");
		tolua_variable(L, "reference", tolua_get_VoidPointer_reference, tolua_set_VoidPointer_reference);
		tolua_constant(L, "sizeof", sizeof(VoidPointer));
	tolua_endmodule(L);
	tolua_cclass(L, "CNetwork", "CNetwork", {}, NULL);
	tolua_beginmodule(L, "CNetwork");
		tolua_variable(L, "m_bConnectionEstablished", tolua_get_CNetwork_m_bConnectionEstablished, tolua_set_CNetwork_m_bConnectionEstablished);
		tolua_variable(L, "reference_m_bConnectionEstablished", tolua_get_CNetwork_reference_m_bConnectionEstablished, NULL);
		tolua_constant(L, "sizeof", sizeof(CNetwork));
	tolua_endmodule(L);
	tolua_cclass(L, "CUIControlButtonMapEntry", "CUIControlButtonMapEntry", {}, NULL);
	tolua_beginmodule(L, "CUIControlButtonMapEntry");
		tolua_variable(L, "m_objectId", tolua_get_CUIControlButtonMapEntry_m_objectId, tolua_set_CUIControlButtonMapEntry_m_objectId);
		tolua_variable(L, "reference_m_objectId", tolua_get_CUIControlButtonMapEntry_reference_m_objectId, NULL);
		tolua_constant(L, "sizeof", sizeof(CUIControlButtonMapEntry));
	tolua_endmodule(L);
	tolua_cclass(L, "CSearchBitmap", "CSearchBitmap", {}, NULL);
	tolua_beginmodule(L, "CSearchBitmap");
		tolua_variable(L, "m_pDynamicCost", tolua_get_CSearchBitmap_m_pDynamicCost, tolua_set_CSearchBitmap_m_pDynamicCost);
		tolua_variable(L, "reference_m_pDynamicCost", tolua_get_CSearchBitmap_reference_m_pDynamicCost, NULL);
		tolua_variable(L, "m_nWidth", tolua_get_CSearchBitmap_m_nWidth, tolua_set_CSearchBitmap_m_nWidth);
		tolua_variable(L, "reference_m_nWidth", tolua_get_CSearchBitmap_reference_m_nWidth, NULL);
		tolua_constant(L, "sizeof", sizeof(CSearchBitmap));
	tolua_endmodule(L);
	tolua_cclass(L, "CPtrList", "CPtrList", {}, NULL);
	tolua_beginmodule(L, "CPtrList");
		tolua_variable(L, "m_pNodeHead", tolua_get_CPtrList_m_pNodeHead, tolua_set_CPtrList_m_pNodeHead);
		tolua_variable(L, "reference_m_pNodeHead", tolua_get_CPtrList_reference_m_pNodeHead, NULL);
		tolua_variable(L, "m_pNodeTail", tolua_get_CPtrList_m_pNodeTail, tolua_set_CPtrList_m_pNodeTail);
		tolua_variable(L, "reference_m_pNodeTail", tolua_get_CPtrList_reference_m_pNodeTail, NULL);
		tolua_variable(L, "m_nCount", tolua_get_CPtrList_m_nCount, tolua_set_CPtrList_m_nCount);
		tolua_variable(L, "reference_m_nCount", tolua_get_CPtrList_reference_m_nCount, NULL);
		tolua_variable(L, "m_pNodeFree", tolua_get_CPtrList_m_pNodeFree, tolua_set_CPtrList_m_pNodeFree);
		tolua_variable(L, "reference_m_pNodeFree", tolua_get_CPtrList_reference_m_pNodeFree, NULL);
		tolua_variable(L, "m_pBlocks", tolua_get_CPtrList_m_pBlocks, tolua_set_CPtrList_m_pBlocks);
		tolua_variable(L, "reference_m_pBlocks", tolua_get_CPtrList_reference_m_pBlocks, NULL);
		tolua_variable(L, "m_nBlockSize", tolua_get_CPtrList_m_nBlockSize, tolua_set_CPtrList_m_nBlockSize);
		tolua_variable(L, "reference_m_nBlockSize", tolua_get_CPtrList_reference_m_nBlockSize, NULL);
		tolua_constant(L, "sizeof", sizeof(CPtrList));
	tolua_endmodule(L);
	tolua_cclass(L, "CPoint", "CPoint", {}, NULL);
	tolua_beginmodule(L, "CPoint");
		tolua_variable(L, "x", tolua_get_CPoint_x, tolua_set_CPoint_x);
		tolua_variable(L, "reference_x", tolua_get_CPoint_reference_x, NULL);
		tolua_variable(L, "y", tolua_get_CPoint_y, tolua_set_CPoint_y);
		tolua_variable(L, "reference_y", tolua_get_CPoint_reference_y, NULL);
		tolua_constant(L, "sizeof", sizeof(CPoint));
	tolua_endmodule(L);
	tolua_cclass(L, "CObList", "CObList", {}, NULL);
	tolua_beginmodule(L, "CObList");
		tolua_variable(L, "m_pNodeHead", tolua_get_CObList_m_pNodeHead, tolua_set_CObList_m_pNodeHead);
		tolua_variable(L, "reference_m_pNodeHead", tolua_get_CObList_reference_m_pNodeHead, NULL);
		tolua_variable(L, "m_pNodeTail", tolua_get_CObList_m_pNodeTail, tolua_set_CObList_m_pNodeTail);
		tolua_variable(L, "reference_m_pNodeTail", tolua_get_CObList_reference_m_pNodeTail, NULL);
		tolua_variable(L, "m_nCount", tolua_get_CObList_m_nCount, tolua_set_CObList_m_nCount);
		tolua_variable(L, "reference_m_nCount", tolua_get_CObList_reference_m_nCount, NULL);
		tolua_variable(L, "m_pNodeFree", tolua_get_CObList_m_pNodeFree, tolua_set_CObList_m_pNodeFree);
		tolua_variable(L, "reference_m_pNodeFree", tolua_get_CObList_reference_m_pNodeFree, NULL);
		tolua_variable(L, "m_pBlocks", tolua_get_CObList_m_pBlocks, tolua_set_CObList_m_pBlocks);
		tolua_variable(L, "reference_m_pBlocks", tolua_get_CObList_reference_m_pBlocks, NULL);
		tolua_variable(L, "m_nBlockSize", tolua_get_CObList_m_nBlockSize, tolua_set_CObList_m_nBlockSize);
		tolua_variable(L, "reference_m_nBlockSize", tolua_get_CObList_reference_m_nBlockSize, NULL);
		tolua_constant(L, "sizeof", sizeof(CObList));
	tolua_endmodule(L);
	tolua_cclass(L, "UI_Control_st", "UI_Control_st", {}, NULL);
	tolua_beginmodule(L, "UI_Control_st");
		tolua_variable(L, "id", tolua_get_UI_Control_st_id, tolua_set_UI_Control_st_id);
		tolua_variable(L, "reference_id", tolua_get_UI_Control_st_reference_id, NULL);
		tolua_variable(L, "x", tolua_get_UI_Control_st_x, tolua_set_UI_Control_st_x);
		tolua_variable(L, "reference_x", tolua_get_UI_Control_st_reference_x, NULL);
		tolua_variable(L, "y", tolua_get_UI_Control_st_y, tolua_set_UI_Control_st_y);
		tolua_variable(L, "reference_y", tolua_get_UI_Control_st_reference_y, NULL);
		tolua_variable(L, "width", tolua_get_UI_Control_st_width, tolua_set_UI_Control_st_width);
		tolua_variable(L, "reference_width", tolua_get_UI_Control_st_reference_width, NULL);
		tolua_variable(L, "height", tolua_get_UI_Control_st_height, tolua_set_UI_Control_st_height);
		tolua_variable(L, "reference_height", tolua_get_UI_Control_st_reference_height, NULL);
		tolua_variable(L, "type", tolua_get_UI_Control_st_type, tolua_set_UI_Control_st_type);
		tolua_variable(L, "reference_type", tolua_get_UI_Control_st_reference_type, NULL);
		tolua_variable(L, "flags", tolua_get_UI_Control_st_flags, tolua_set_UI_Control_st_flags);
		tolua_variable(L, "reference_flags", tolua_get_UI_Control_st_reference_flags, NULL);
		tolua_constant(L, "sizeof", sizeof(UI_Control_st));
	tolua_endmodule(L);
	tolua_cclass(L, "CVisibilityMap", "CVisibilityMap", {}, NULL);
	tolua_beginmodule(L, "CVisibilityMap");
		tolua_variable(L, "m_pMap", tolua_get_CVisibilityMap_m_pMap, tolua_set_CVisibilityMap_m_pMap);
		tolua_variable(L, "reference_m_pMap", tolua_get_CVisibilityMap_reference_m_pMap, NULL);
		tolua_variable(L, "m_nWidth", tolua_get_CVisibilityMap_m_nWidth, tolua_set_CVisibilityMap_m_nWidth);
		tolua_variable(L, "reference_m_nWidth", tolua_get_CVisibilityMap_reference_m_nWidth, NULL);
		tolua_variable(L, "m_nHeight", tolua_get_CVisibilityMap_m_nHeight, tolua_set_CVisibilityMap_m_nHeight);
		tolua_variable(L, "reference_m_nHeight", tolua_get_CVisibilityMap_reference_m_nHeight, NULL);
		tolua_constant(L, "sizeof", sizeof(CVisibilityMap));
	tolua_endmodule(L);
	tolua_cclass(L, "CVideoFunctions", "CVideoFunctions", {}, NULL);
	tolua_beginmodule(L, "CVideoFunctions");
		tolua_function(L, "Blt1", &tolua_function_CVideoFunctions_Blt1);
		tolua_function(L, "Blt2", &tolua_function_CVideoFunctions_Blt2);
		tolua_function(L, "Blt3", &tolua_function_CVideoFunctions_Blt3);
		tolua_function(L, "Blt4", &tolua_function_CVideoFunctions_Blt4);
		tolua_function(L, "BltFast1", &tolua_function_CVideoFunctions_BltFast1);
		tolua_function(L, "BltFast2", &tolua_function_CVideoFunctions_BltFast2);
		tolua_constant(L, "sizeof", sizeof(CVideoFunctions));
	tolua_endmodule(L);
	tolua_cclass(L, "CParticle", "CParticle", {}, NULL);
	tolua_beginmodule(L, "CParticle");
		tolua_variable(L, "m_rgbColor", tolua_get_CParticle_m_rgbColor, tolua_set_CParticle_m_rgbColor);
		tolua_variable(L, "reference_m_rgbColor", tolua_get_CParticle_reference_m_rgbColor, NULL);
		tolua_constant(L, "sizeof", sizeof(CParticle));
	tolua_endmodule(L);
	tolua_cclass(L, "CDerivedStats", "CDerivedStats", {}, NULL);
	tolua_beginmodule(L, "CDerivedStats");
		tolua_variable(L, "m_generalState", tolua_get_CDerivedStats_m_generalState, tolua_set_CDerivedStats_m_generalState);
		tolua_variable(L, "reference_m_generalState", tolua_get_CDerivedStats_reference_m_generalState, NULL);
		tolua_variable(L, "m_op182List", tolua_get_CDerivedStats_m_op182List, NULL);
		tolua_variable(L, "m_op183List", tolua_get_CDerivedStats_m_op183List, NULL);
		tolua_constant(L, "sizeof", sizeof(CDerivedStats));
	tolua_endmodule(L);
	tolua_cclass(L, "mosHeader_st", "mosHeader_st", {}, NULL);
	tolua_beginmodule(L, "mosHeader_st");
		tolua_variable(L, "nFileType", tolua_get_mosHeader_st_nFileType, tolua_set_mosHeader_st_nFileType);
		tolua_variable(L, "reference_nFileType", tolua_get_mosHeader_st_reference_nFileType, NULL);
		tolua_variable(L, "nFileVersion", tolua_get_mosHeader_st_nFileVersion, tolua_set_mosHeader_st_nFileVersion);
		tolua_variable(L, "reference_nFileVersion", tolua_get_mosHeader_st_reference_nFileVersion, NULL);
		tolua_variable(L, "nWidth", tolua_get_mosHeader_st_nWidth, tolua_set_mosHeader_st_nWidth);
		tolua_variable(L, "reference_nWidth", tolua_get_mosHeader_st_reference_nWidth, NULL);
		tolua_variable(L, "nHeight", tolua_get_mosHeader_st_nHeight, tolua_set_mosHeader_st_nHeight);
		tolua_variable(L, "reference_nHeight", tolua_get_mosHeader_st_reference_nHeight, NULL);
		tolua_variable(L, "nXTiles", tolua_get_mosHeader_st_nXTiles, tolua_set_mosHeader_st_nXTiles);
		tolua_variable(L, "reference_nXTiles", tolua_get_mosHeader_st_reference_nXTiles, NULL);
		tolua_variable(L, "nYTiles", tolua_get_mosHeader_st_nYTiles, tolua_set_mosHeader_st_nYTiles);
		tolua_variable(L, "reference_nYTiles", tolua_get_mosHeader_st_reference_nYTiles, NULL);
		tolua_variable(L, "nTileSize", tolua_get_mosHeader_st_nTileSize, tolua_set_mosHeader_st_nTileSize);
		tolua_variable(L, "reference_nTileSize", tolua_get_mosHeader_st_reference_nTileSize, NULL);
		tolua_variable(L, "nTransparentColor", tolua_get_mosHeader_st_nTransparentColor, tolua_set_mosHeader_st_nTransparentColor);
		tolua_variable(L, "reference_nTransparentColor", tolua_get_mosHeader_st_reference_nTransparentColor, NULL);
		tolua_variable(L, "nCompressed", tolua_get_mosHeader_st_nCompressed, tolua_set_mosHeader_st_nCompressed);
		tolua_variable(L, "reference_nCompressed", tolua_get_mosHeader_st_reference_nCompressed, NULL);
		tolua_variable(L, "nPaletteOffset", tolua_get_mosHeader_st_nPaletteOffset, tolua_set_mosHeader_st_nPaletteOffset);
		tolua_variable(L, "reference_nPaletteOffset", tolua_get_mosHeader_st_reference_nPaletteOffset, NULL);
		tolua_constant(L, "sizeof", sizeof(mosHeader_st));
	tolua_endmodule(L);
	tolua_cclass(L, "WED_TileData_st", "WED_TileData_st", {}, NULL);
	tolua_beginmodule(L, "WED_TileData_st");
		tolua_variable(L, "nStartingTile", tolua_get_WED_TileData_st_nStartingTile, tolua_set_WED_TileData_st_nStartingTile);
		tolua_variable(L, "reference_nStartingTile", tolua_get_WED_TileData_st_reference_nStartingTile, NULL);
		tolua_variable(L, "nNumTiles", tolua_get_WED_TileData_st_nNumTiles, tolua_set_WED_TileData_st_nNumTiles);
		tolua_variable(L, "reference_nNumTiles", tolua_get_WED_TileData_st_reference_nNumTiles, NULL);
		tolua_variable(L, "nSecondaryTile", tolua_get_WED_TileData_st_nSecondaryTile, tolua_set_WED_TileData_st_nSecondaryTile);
		tolua_variable(L, "reference_nSecondaryTile", tolua_get_WED_TileData_st_reference_nSecondaryTile, NULL);
		tolua_variable(L, "bFlags", tolua_get_WED_TileData_st_bFlags, tolua_set_WED_TileData_st_bFlags);
		tolua_variable(L, "reference_bFlags", tolua_get_WED_TileData_st_reference_bFlags, NULL);
		tolua_variable(L, "bAnimSpeed", tolua_get_WED_TileData_st_bAnimSpeed, tolua_set_WED_TileData_st_bAnimSpeed);
		tolua_variable(L, "reference_bAnimSpeed", tolua_get_WED_TileData_st_reference_bAnimSpeed, NULL);
		tolua_variable(L, "wFlags", tolua_get_WED_TileData_st_wFlags, tolua_set_WED_TileData_st_wFlags);
		tolua_variable(L, "reference_wFlags", tolua_get_WED_TileData_st_reference_wFlags, NULL);
		tolua_constant(L, "sizeof", sizeof(WED_TileData_st));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CResourceManagerHashEntry>", "VariableArray<CResourceManagerHashEntry>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CResourceManagerHashEntry>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CResourceManagerHashEntry__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CResourceManagerHashEntry__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CResourceManagerHashEntry>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CArchive>", "VariableArray<CArchive>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CArchive>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CArchive__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CArchive__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CArchive>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CGameDialogEntry*>", "VariableArray<CGameDialogEntry*>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CGameDialogEntry*>");
		tolua_function(L, "get", &tolua_function_VariableArray_CGameDialogEntry___get);
		tolua_function(L, "getReference", &tolua_function_VariableArray_CGameDialogEntry___getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CGameDialogEntry___set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CGameDialogEntry*>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CObList_CNode>", "VariableArray<CObList_CNode>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CObList_CNode>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CObList_CNode__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CObList_CNode__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CObList_CNode>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CPtrList_CNode>", "VariableArray<CPtrList_CNode>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CPtrList_CNode>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CPtrList_CNode__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CPtrList_CNode__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CPtrList_CNode>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CVRamPool>", "VariableArray<CVRamPool>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CVRamPool>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CVRamPool__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CVRamPool__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CVRamPool>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CRect>", "VariableArray<CRect>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CRect>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CRect__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CRect__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CRect>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<byte*>", "VariableArray<byte*>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<byte*>");
		tolua_function(L, "get", &tolua_function_VariableArray_byte___get);
		tolua_function(L, "getReference", &tolua_function_VariableArray_byte___getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_byte___set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<byte*>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<char>", "VariableArray<char>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<char>");
		tolua_function(L, "get", &tolua_function_VariableArray_char__get);
		tolua_function(L, "getReference", &tolua_function_VariableArray_char__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_char__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<char>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CPtrList>", "VariableArray<CPtrList>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CPtrList>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CPtrList__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CPtrList__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CPtrList>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CPoint>", "VariableArray<CPoint>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CPoint>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CPoint__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CPoint__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CPoint>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<UI_Control_st>", "VariableArray<UI_Control_st>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<UI_Control_st>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_UI_Control_st__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_UI_Control_st__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<UI_Control_st>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CVideoFunctions>", "VariableArray<CVideoFunctions>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CVideoFunctions>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CVideoFunctions__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CVideoFunctions__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CVideoFunctions>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<mosHeader_st>", "VariableArray<mosHeader_st>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<mosHeader_st>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_mosHeader_st__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_mosHeader_st__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<mosHeader_st>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<void*>", "VariableArray<void*>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<void*>");
		tolua_function(L, "get", &tolua_function_VariableArray_void___get);
		tolua_function(L, "getReference", &tolua_function_VariableArray_void___getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_void___set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<void*>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CRuntimeClass>", "VariableArray<CRuntimeClass>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CRuntimeClass>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CRuntimeClass__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CRuntimeClass__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CRuntimeClass>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUIControlBase>", "VariableArray<CUIControlBase>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUIControlBase>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUIControlBase__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUIControlBase__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUIControlBase>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CString>", "VariableArray<CString>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CString>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CString__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CString__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CString>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CObject>", "VariableArray<CObject>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CObject>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CObject__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CObject__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CObject>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CWarp>", "VariableArray<CWarp>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CWarp>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CWarp__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CWarp__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CWarp>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CTypedPtrList<CPtrList,CGameEffect*>::CNode>", "VariableArray<CTypedPtrList<CPtrList,CGameEffect*>::CNode>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CTypedPtrList_CPtrList_CGameEffect____CNode__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CTypedPtrList_CPtrList_CGameEffect____CNode__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CTypedPtrList<CPtrList,CGameEffect*>::CNode>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CSyncObject>", "VariableArray<CSyncObject>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CSyncObject>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CSyncObject__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CSyncObject__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CSyncObject>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CRes>", "VariableArray<CRes>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CRes>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CRes__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CRes__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CRes>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CResWED>", "VariableArray<CResWED>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CResWED>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CResWED__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CResWED__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CResWED>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CMessage>", "VariableArray<CMessage>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CMessage>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CMessage__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CMessage__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CMessage>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CInfCursor>", "VariableArray<CInfCursor>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CInfCursor>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CInfCursor__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CInfCursor__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CInfCursor>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CGameAnimationType>", "VariableArray<CGameAnimationType>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CGameAnimationType>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CGameAnimationType__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CGameAnimationType__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CGameAnimationType>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CResRef>", "VariableArray<CResRef>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CResRef>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CResRef__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CResRef__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CResRef>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CVidFont>", "VariableArray<CVidFont>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CVidFont>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CVidFont__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CVidFont__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CVidFont>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUIControlButton>", "VariableArray<CUIControlButton>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUIControlButton>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUIControlButton__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUIControlButton__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUIControlButton>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUIPanel>", "VariableArray<CUIPanel>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUIPanel>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUIPanel__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUIPanel__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUIPanel>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CItem>", "VariableArray<CItem>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CItem>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CItem__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CItem__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CItem>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<UI_PanelHeader_st>", "VariableArray<UI_PanelHeader_st>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<UI_PanelHeader_st>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_UI_PanelHeader_st__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_UI_PanelHeader_st__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<UI_PanelHeader_st>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUIManager>", "VariableArray<CUIManager>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUIManager>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUIManager__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUIManager__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUIManager>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CBaldurEngine>", "VariableArray<CBaldurEngine>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CBaldurEngine>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CBaldurEngine__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CBaldurEngine__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CBaldurEngine>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CBaldurProjector>", "VariableArray<CBaldurProjector>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CBaldurProjector>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CBaldurProjector__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CBaldurProjector__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CBaldurProjector>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CScreenConnection>", "VariableArray<CScreenConnection>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CScreenConnection>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CScreenConnection__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CScreenConnection__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CScreenConnection>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CScreenMap>", "VariableArray<CScreenMap>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CScreenMap>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CScreenMap__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CScreenMap__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CScreenMap>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CScreenWorldMap>", "VariableArray<CScreenWorldMap>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CScreenWorldMap>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CScreenWorldMap__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CScreenWorldMap__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CScreenWorldMap>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine11>", "VariableArray<CUnknownEngine11>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine11>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine11__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine11__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine11>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine12>", "VariableArray<CUnknownEngine12>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine12>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine12__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine12__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine12>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine13>", "VariableArray<CUnknownEngine13>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine13>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine13__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine13__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine13>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine14>", "VariableArray<CUnknownEngine14>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine14>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine14__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine14__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine14>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine15>", "VariableArray<CUnknownEngine15>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine15>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine15__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine15__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine15>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine16>", "VariableArray<CUnknownEngine16>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine16>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine16__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine16__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine16>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine17>", "VariableArray<CUnknownEngine17>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine17>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine17__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine17__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine17>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine18>", "VariableArray<CUnknownEngine18>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine18>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine18__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine18__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine18>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine19>", "VariableArray<CUnknownEngine19>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine19>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine19__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine19__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine19>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine2>", "VariableArray<CUnknownEngine2>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine2>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine2__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine2__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine2>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine4>", "VariableArray<CUnknownEngine4>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine4>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine4__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine4__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine4>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine5>", "VariableArray<CUnknownEngine5>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine5>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine5__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine5__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine5>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine6>", "VariableArray<CUnknownEngine6>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine6>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine6__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine6__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine6>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine7>", "VariableArray<CUnknownEngine7>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine7>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine7__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine7__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine7>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine8>", "VariableArray<CUnknownEngine8>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine8>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine8__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine8__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine8>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CUnknownEngine9>", "VariableArray<CUnknownEngine9>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CUnknownEngine9>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CUnknownEngine9__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CUnknownEngine9__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CUnknownEngine9>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CScreenWorld>", "VariableArray<CScreenWorld>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CScreenWorld>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CScreenWorld__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CScreenWorld__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CScreenWorld>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CInfinity>", "VariableArray<CInfinity>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CInfinity>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CInfinity__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CInfinity__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CInfinity>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CInfGame>", "VariableArray<CInfGame>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CInfGame>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CInfGame__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CInfGame__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CInfGame>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CGameObjectArrayEntry>", "VariableArray<CGameObjectArrayEntry>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CGameObjectArrayEntry>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CGameObjectArrayEntry__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CGameObjectArrayEntry__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CGameObjectArrayEntry>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CGameEffect>", "VariableArray<CGameEffect>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CGameEffect>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CGameEffect__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CGameEffect__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CGameEffect>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CChitin>", "VariableArray<CChitin>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CChitin>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CChitin__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CChitin__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CChitin>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CBaldurChitin>", "VariableArray<CBaldurChitin>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CBaldurChitin>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CBaldurChitin__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CBaldurChitin__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CBaldurChitin>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CAIObjectType>", "VariableArray<CAIObjectType>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CAIObjectType>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CAIObjectType__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CAIObjectType__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CAIObjectType>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CGameObject>", "VariableArray<CGameObject>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CGameObject>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CGameObject__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CGameObject__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CGameObject>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CProjectile>", "VariableArray<CProjectile>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CProjectile>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CProjectile__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CProjectile__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CProjectile>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CGameAIBase>", "VariableArray<CGameAIBase>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CGameAIBase>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CGameAIBase__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CGameAIBase__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CGameAIBase>));
	tolua_endmodule(L);
	tolua_cclass(L, "VariableArray<CGameSprite>", "VariableArray<CGameSprite>", {}, NULL);
	tolua_beginmodule(L, "VariableArray<CGameSprite>");
		tolua_function(L, "getReference", &tolua_function_VariableArray_CGameSprite__getReference);
		tolua_function(L, "set", &tolua_function_VariableArray_CGameSprite__set);
		tolua_constant(L, "sizeof", sizeof(VariableArray<CGameSprite>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CBaldurChitin>", "Pointer<CBaldurChitin>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CBaldurChitin>");
		tolua_variable(L, "reference", tolua_get_Pointer_CBaldurChitin__reference, tolua_set_Pointer_CBaldurChitin__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CBaldurChitin__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CBaldurChitin>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<const MSG>", "Pointer<const MSG>", {}, NULL);
	tolua_beginmodule(L, "Pointer<const MSG>");
		tolua_variable(L, "reference", tolua_get_Pointer_const_MSG__reference, tolua_set_Pointer_const_MSG__reference);
		tolua_constant(L, "sizeof", sizeof(Pointer<const MSG>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CInfCursor>", "Pointer<CInfCursor>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CInfCursor>");
		tolua_variable(L, "reference", tolua_get_Pointer_CInfCursor__reference, tolua_set_Pointer_CInfCursor__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CInfCursor__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CInfCursor>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CInfGame>", "Pointer<CInfGame>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CInfGame>");
		tolua_variable(L, "reference", tolua_get_Pointer_CInfGame__reference, tolua_set_Pointer_CInfGame__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CInfGame__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CInfGame>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine4>", "Pointer<CUnknownEngine4>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine4>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine4__reference, tolua_set_Pointer_CUnknownEngine4__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine4__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine4>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CBaldurProjector>", "Pointer<CBaldurProjector>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CBaldurProjector>");
		tolua_variable(L, "reference", tolua_get_Pointer_CBaldurProjector__reference, tolua_set_Pointer_CBaldurProjector__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CBaldurProjector__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CBaldurProjector>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine2>", "Pointer<CUnknownEngine2>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine2>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine2__reference, tolua_set_Pointer_CUnknownEngine2__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine2__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine2>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine5>", "Pointer<CUnknownEngine5>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine5>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine5__reference, tolua_set_Pointer_CUnknownEngine5__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine5__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine5>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine6>", "Pointer<CUnknownEngine6>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine6>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine6__reference, tolua_set_Pointer_CUnknownEngine6__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine6__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine6>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine7>", "Pointer<CUnknownEngine7>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine7>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine7__reference, tolua_set_Pointer_CUnknownEngine7__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine7__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine7>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine8>", "Pointer<CUnknownEngine8>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine8>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine8__reference, tolua_set_Pointer_CUnknownEngine8__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine8__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine8>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine9>", "Pointer<CUnknownEngine9>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine9>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine9__reference, tolua_set_Pointer_CUnknownEngine9__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine9__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine9>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CScreenMap>", "Pointer<CScreenMap>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CScreenMap>");
		tolua_variable(L, "reference", tolua_get_Pointer_CScreenMap__reference, tolua_set_Pointer_CScreenMap__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CScreenMap__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CScreenMap>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine11>", "Pointer<CUnknownEngine11>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine11>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine11__reference, tolua_set_Pointer_CUnknownEngine11__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine11__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine11>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine12>", "Pointer<CUnknownEngine12>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine12>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine12__reference, tolua_set_Pointer_CUnknownEngine12__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine12__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine12>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine13>", "Pointer<CUnknownEngine13>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine13>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine13__reference, tolua_set_Pointer_CUnknownEngine13__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine13__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine13>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine14>", "Pointer<CUnknownEngine14>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine14>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine14__reference, tolua_set_Pointer_CUnknownEngine14__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine14__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine14>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine15>", "Pointer<CUnknownEngine15>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine15>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine15__reference, tolua_set_Pointer_CUnknownEngine15__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine15__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine15>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CScreenWorld>", "Pointer<CScreenWorld>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CScreenWorld>");
		tolua_variable(L, "reference", tolua_get_Pointer_CScreenWorld__reference, tolua_set_Pointer_CScreenWorld__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CScreenWorld__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CScreenWorld>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine16>", "Pointer<CUnknownEngine16>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine16>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine16__reference, tolua_set_Pointer_CUnknownEngine16__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine16__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine16>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine17>", "Pointer<CUnknownEngine17>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine17>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine17__reference, tolua_set_Pointer_CUnknownEngine17__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine17__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine17>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CScreenConnection>", "Pointer<CScreenConnection>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CScreenConnection>");
		tolua_variable(L, "reference", tolua_get_Pointer_CScreenConnection__reference, tolua_set_Pointer_CScreenConnection__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CScreenConnection__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CScreenConnection>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CScreenWorldMap>", "Pointer<CScreenWorldMap>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CScreenWorldMap>");
		tolua_variable(L, "reference", tolua_get_Pointer_CScreenWorldMap__reference, tolua_set_Pointer_CScreenWorldMap__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CScreenWorldMap__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CScreenWorldMap>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine18>", "Pointer<CUnknownEngine18>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine18>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine18__reference, tolua_set_Pointer_CUnknownEngine18__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine18__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine18>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine19>", "Pointer<CUnknownEngine19>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine19>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine19__reference, tolua_set_Pointer_CUnknownEngine19__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine19__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine19>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CWarp>", "Pointer<CWarp>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CWarp>");
		tolua_variable(L, "reference", tolua_get_Pointer_CWarp__reference, tolua_set_Pointer_CWarp__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CWarp__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CWarp>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CPoint>", "Pointer<CPoint>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CPoint>");
		tolua_variable(L, "reference", tolua_get_Pointer_CPoint__reference, tolua_set_Pointer_CPoint__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CPoint__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CPoint>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResWED>", "Pointer<CResWED>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResWED>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResWED__reference, tolua_set_Pointer_CResWED__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResWED__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResWED>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CInfTileSet>", "Pointer<CInfTileSet>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CInfTileSet>");
		tolua_variable(L, "reference", tolua_get_Pointer_CInfTileSet__reference, tolua_set_Pointer_CInfTileSet__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CInfTileSet__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CInfTileSet>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVRamPool>", "Pointer<CVRamPool>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVRamPool>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVRamPool__reference, tolua_set_Pointer_CVRamPool__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVRamPool__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVRamPool>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidMode>", "Pointer<CVidMode>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidMode>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidMode__reference, tolua_set_Pointer_CVidMode__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidMode__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidMode>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameArea>", "Pointer<CGameArea>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameArea>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameArea__reference, tolua_set_Pointer_CGameArea__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameArea__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameArea>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CPtrList>", "Pointer<CPtrList>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CPtrList>");
		tolua_variable(L, "reference", tolua_get_Pointer_CPtrList__reference, tolua_set_Pointer_CPtrList__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CPtrList__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CPtrList>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CPtrList_CNode>", "Pointer<CPtrList_CNode>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CPtrList_CNode>");
		tolua_variable(L, "reference", tolua_get_Pointer_CPtrList_CNode__reference, tolua_set_Pointer_CPtrList_CNode__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CPtrList_CNode__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CPtrList_CNode>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<mosHeader_st>", "Pointer<mosHeader_st>", {}, NULL);
	tolua_beginmodule(L, "Pointer<mosHeader_st>");
		tolua_variable(L, "reference", tolua_get_Pointer_mosHeader_st__reference, tolua_set_Pointer_mosHeader_st__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_mosHeader_st__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<mosHeader_st>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CRes>", "Pointer<CRes>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CRes>");
		tolua_variable(L, "reference", tolua_get_Pointer_CRes__reference, tolua_set_Pointer_CRes__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CRes__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CRes>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResRef>", "Pointer<CResRef>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResRef>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResRef__reference, tolua_set_Pointer_CResRef__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResRef__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResRef>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<UI_Control_st>", "Pointer<UI_Control_st>", {}, NULL);
	tolua_beginmodule(L, "Pointer<UI_Control_st>");
		tolua_variable(L, "reference", tolua_get_Pointer_UI_Control_st__reference, tolua_set_Pointer_UI_Control_st__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_UI_Control_st__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<UI_Control_st>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<UI_PanelHeader_st>", "Pointer<UI_PanelHeader_st>", {}, NULL);
	tolua_beginmodule(L, "Pointer<UI_PanelHeader_st>");
		tolua_variable(L, "reference", tolua_get_Pointer_UI_PanelHeader_st__reference, tolua_set_Pointer_UI_PanelHeader_st__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_UI_PanelHeader_st__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<UI_PanelHeader_st>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CSyncObject>", "Pointer<CSyncObject>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CSyncObject>");
		tolua_variable(L, "reference", tolua_get_Pointer_CSyncObject__reference, tolua_set_Pointer_CSyncObject__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CSyncObject__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CSyncObject>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUIControlBase>", "Pointer<CUIControlBase>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUIControlBase>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUIControlBase__reference, tolua_set_Pointer_CUIControlBase__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUIControlBase__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUIControlBase>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUIPanel>", "Pointer<CUIPanel>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUIPanel>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUIPanel__reference, tolua_set_Pointer_CUIPanel__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUIPanel__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUIPanel>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CBaldurEngine>", "Pointer<CBaldurEngine>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CBaldurEngine>");
		tolua_variable(L, "reference", tolua_get_Pointer_CBaldurEngine__reference, tolua_set_Pointer_CBaldurEngine__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CBaldurEngine__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CBaldurEngine>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUIManager>", "Pointer<CUIManager>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUIManager>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUIManager__reference, tolua_set_Pointer_CUIManager__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUIManager__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUIManager>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CRect>", "Pointer<CRect>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CRect>");
		tolua_variable(L, "reference", tolua_get_Pointer_CRect__reference, tolua_set_Pointer_CRect__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CRect__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CRect>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CString>", "Pointer<CString>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CString>");
		tolua_variable(L, "reference", tolua_get_Pointer_CString__reference, tolua_set_Pointer_CString__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CString__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CString>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<DDSURFACEDESC>", "Pointer<DDSURFACEDESC>", {}, NULL);
	tolua_beginmodule(L, "Pointer<DDSURFACEDESC>");
		tolua_variable(L, "reference", tolua_get_Pointer_DDSURFACEDESC__reference, tolua_set_Pointer_DDSURFACEDESC__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_DDSURFACEDESC__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<DDSURFACEDESC>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidFont>", "Pointer<CVidFont>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidFont>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidFont__reference, tolua_set_Pointer_CVidFont__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidFont__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidFont>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<IDirectDrawSurface*>", "Pointer<IDirectDrawSurface*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<IDirectDrawSurface*>");
		tolua_variable(L, "reference", tolua_get_Pointer_IDirectDrawSurface___reference, tolua_set_Pointer_IDirectDrawSurface___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_IDirectDrawSurface___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_IDirectDrawSurface___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<IDirectDrawSurface*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<void*>", "Pointer<void*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<void*>");
		tolua_variable(L, "reference", tolua_get_Pointer_void___reference, tolua_set_Pointer_void___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_void___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_void___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<void*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<uint>", "Pointer<uint>", {}, NULL);
	tolua_beginmodule(L, "Pointer<uint>");
		tolua_variable(L, "reference", tolua_get_Pointer_uint__reference, tolua_set_Pointer_uint__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_uint__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_uint__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<uint>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameEffect>", "Pointer<CGameEffect>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameEffect>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameEffect__reference, tolua_set_Pointer_CGameEffect__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameEffect__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameEffect>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>", "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>");
		tolua_variable(L, "reference", tolua_get_Pointer_CTypedPtrList_CPtrList_CGameEffect____CNode__reference, tolua_set_Pointer_CTypedPtrList_CPtrList_CGameEffect____CNode__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CTypedPtrList_CPtrList_CGameEffect____CNode__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<tagRGBQUAD>", "Pointer<tagRGBQUAD>", {}, NULL);
	tolua_beginmodule(L, "Pointer<tagRGBQUAD>");
		tolua_variable(L, "reference", tolua_get_Pointer_tagRGBQUAD__reference, tolua_set_Pointer_tagRGBQUAD__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_tagRGBQUAD__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<tagRGBQUAD>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameObject>", "Pointer<CGameObject>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameObject>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameObject__reference, tolua_set_Pointer_CGameObject__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameObject__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameObject>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CAIObjectType>", "Pointer<CAIObjectType>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CAIObjectType>");
		tolua_variable(L, "reference", tolua_get_Pointer_CAIObjectType__reference, tolua_set_Pointer_CAIObjectType__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CAIObjectType__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CAIObjectType>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CItem>", "Pointer<CItem>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CItem>");
		tolua_variable(L, "reference", tolua_get_Pointer_CItem__reference, tolua_set_Pointer_CItem__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CItem__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CItem>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUIControlButton>", "Pointer<CUIControlButton>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUIControlButton>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUIControlButton__reference, tolua_set_Pointer_CUIControlButton__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUIControlButton__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUIControlButton>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameAnimationType>", "Pointer<CGameAnimationType>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameAnimationType>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameAnimationType__reference, tolua_set_Pointer_CGameAnimationType__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameAnimationType__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameAnimationType>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CProjectile>", "Pointer<CProjectile>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CProjectile>");
		tolua_variable(L, "reference", tolua_get_Pointer_CProjectile__reference, tolua_set_Pointer_CProjectile__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CProjectile__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CProjectile>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CChitin>", "Pointer<CChitin>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CChitin>");
		tolua_variable(L, "reference", tolua_get_Pointer_CChitin__reference, tolua_set_Pointer_CChitin__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CChitin__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CChitin>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<IDirectDraw>", "Pointer<IDirectDraw>", {}, NULL);
	tolua_beginmodule(L, "Pointer<IDirectDraw>");
		tolua_variable(L, "reference", tolua_get_Pointer_IDirectDraw__reference, tolua_set_Pointer_IDirectDraw__reference);
		tolua_constant(L, "sizeof", sizeof(Pointer<IDirectDraw>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<byte>", "Pointer<byte>", {}, NULL);
	tolua_beginmodule(L, "Pointer<byte>");
		tolua_variable(L, "reference", tolua_get_Pointer_byte__reference, tolua_set_Pointer_byte__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_byte__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_byte__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<byte>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CObList_CNode>", "Pointer<CObList_CNode>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CObList_CNode>");
		tolua_variable(L, "reference", tolua_get_Pointer_CObList_CNode__reference, tolua_set_Pointer_CObList_CNode__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CObList_CNode__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CObList_CNode>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVideoFunctions>", "Pointer<CVideoFunctions>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVideoFunctions>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVideoFunctions__reference, tolua_set_Pointer_CVideoFunctions__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVideoFunctions__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVideoFunctions>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<IDirectDrawSurface>", "Pointer<IDirectDrawSurface>", {}, NULL);
	tolua_beginmodule(L, "Pointer<IDirectDrawSurface>");
		tolua_variable(L, "reference", tolua_get_Pointer_IDirectDrawSurface__reference, tolua_set_Pointer_IDirectDrawSurface__reference);
		tolua_constant(L, "sizeof", sizeof(Pointer<IDirectDrawSurface>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<DDBLTFX>", "Pointer<DDBLTFX>", {}, NULL);
	tolua_beginmodule(L, "Pointer<DDBLTFX>");
		tolua_variable(L, "reference", tolua_get_Pointer_DDBLTFX__reference, tolua_set_Pointer_DDBLTFX__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_DDBLTFX__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<DDBLTFX>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameSprite>", "Pointer<CGameSprite>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameSprite>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameSprite__reference, tolua_set_Pointer_CGameSprite__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameSprite__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameSprite>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CRuntimeClass>", "Pointer<CRuntimeClass>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CRuntimeClass>");
		tolua_variable(L, "reference", tolua_get_Pointer_CRuntimeClass__reference, tolua_set_Pointer_CRuntimeClass__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CRuntimeClass__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CRuntimeClass>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CObject>", "Pointer<CObject>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CObject>");
		tolua_variable(L, "reference", tolua_get_Pointer_CObject__reference, tolua_set_Pointer_CObject__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CObject__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CObject>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CArchive>", "Pointer<CArchive>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CArchive>");
		tolua_variable(L, "reference", tolua_get_Pointer_CArchive__reference, tolua_set_Pointer_CArchive__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CArchive__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CArchive>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameAIBase>", "Pointer<CGameAIBase>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameAIBase>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameAIBase__reference, tolua_set_Pointer_CGameAIBase__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameAIBase__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameAIBase>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResourceManagerHashEntry>", "Pointer<CResourceManagerHashEntry>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResourceManagerHashEntry>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResourceManagerHashEntry__reference, tolua_set_Pointer_CResourceManagerHashEntry__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResourceManagerHashEntry__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResourceManagerHashEntry>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameObjectArrayEntry>", "Pointer<CGameObjectArrayEntry>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameObjectArrayEntry>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameObjectArrayEntry__reference, tolua_set_Pointer_CGameObjectArrayEntry__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameObjectArrayEntry__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameObjectArrayEntry>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CInfinity>", "Pointer<CInfinity>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CInfinity>");
		tolua_variable(L, "reference", tolua_get_Pointer_CInfinity__reference, tolua_set_Pointer_CInfinity__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CInfinity__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CInfinity>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameDialogEntry*>", "Pointer<CGameDialogEntry*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameDialogEntry*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameDialogEntry___reference, tolua_set_Pointer_CGameDialogEntry___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CGameDialogEntry___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameDialogEntry___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameDialogEntry*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CMessage>", "Pointer<CMessage>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CMessage>");
		tolua_variable(L, "reference", tolua_get_Pointer_CMessage__reference, tolua_set_Pointer_CMessage__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CMessage__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CMessage>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<byte*>", "Pointer<byte*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<byte*>");
		tolua_variable(L, "reference", tolua_get_Pointer_byte___reference, tolua_set_Pointer_byte___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_byte___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_byte___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<byte*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<VariableArray<CResourceManagerHashEntry>>", "Pointer<VariableArray<CResourceManagerHashEntry>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<VariableArray<CResourceManagerHashEntry>>");
		tolua_variable(L, "reference", tolua_get_Pointer_VariableArray_CResourceManagerHashEntry___reference, tolua_set_Pointer_VariableArray_CResourceManagerHashEntry___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_VariableArray_CResourceManagerHashEntry___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<VariableArray<CResourceManagerHashEntry>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CBaldurChitin*>", "Pointer<CBaldurChitin*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CBaldurChitin*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CBaldurChitin___reference, tolua_set_Pointer_CBaldurChitin___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CBaldurChitin___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CBaldurChitin___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CBaldurChitin*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<const MSG*>", "Pointer<const MSG*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<const MSG*>");
		tolua_variable(L, "reference", tolua_get_Pointer_const_MSG___reference, tolua_set_Pointer_const_MSG___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_const_MSG___getValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<const MSG*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CInfCursor*>", "Pointer<CInfCursor*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CInfCursor*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CInfCursor___reference, tolua_set_Pointer_CInfCursor___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CInfCursor___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CInfCursor___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CInfCursor*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CInfGame*>", "Pointer<CInfGame*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CInfGame*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CInfGame___reference, tolua_set_Pointer_CInfGame___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CInfGame___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CInfGame___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CInfGame*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine4*>", "Pointer<CUnknownEngine4*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine4*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine4___reference, tolua_set_Pointer_CUnknownEngine4___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine4___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine4___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine4*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CBaldurProjector*>", "Pointer<CBaldurProjector*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CBaldurProjector*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CBaldurProjector___reference, tolua_set_Pointer_CBaldurProjector___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CBaldurProjector___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CBaldurProjector___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CBaldurProjector*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine2*>", "Pointer<CUnknownEngine2*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine2*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine2___reference, tolua_set_Pointer_CUnknownEngine2___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine2___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine2___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine2*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine5*>", "Pointer<CUnknownEngine5*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine5*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine5___reference, tolua_set_Pointer_CUnknownEngine5___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine5___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine5___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine5*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine6*>", "Pointer<CUnknownEngine6*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine6*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine6___reference, tolua_set_Pointer_CUnknownEngine6___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine6___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine6___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine6*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine7*>", "Pointer<CUnknownEngine7*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine7*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine7___reference, tolua_set_Pointer_CUnknownEngine7___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine7___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine7___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine7*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine8*>", "Pointer<CUnknownEngine8*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine8*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine8___reference, tolua_set_Pointer_CUnknownEngine8___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine8___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine8___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine8*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine9*>", "Pointer<CUnknownEngine9*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine9*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine9___reference, tolua_set_Pointer_CUnknownEngine9___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine9___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine9___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine9*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CScreenMap*>", "Pointer<CScreenMap*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CScreenMap*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CScreenMap___reference, tolua_set_Pointer_CScreenMap___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CScreenMap___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CScreenMap___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CScreenMap*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine11*>", "Pointer<CUnknownEngine11*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine11*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine11___reference, tolua_set_Pointer_CUnknownEngine11___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine11___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine11___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine11*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine12*>", "Pointer<CUnknownEngine12*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine12*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine12___reference, tolua_set_Pointer_CUnknownEngine12___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine12___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine12___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine12*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine13*>", "Pointer<CUnknownEngine13*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine13*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine13___reference, tolua_set_Pointer_CUnknownEngine13___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine13___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine13___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine13*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine14*>", "Pointer<CUnknownEngine14*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine14*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine14___reference, tolua_set_Pointer_CUnknownEngine14___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine14___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine14___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine14*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine15*>", "Pointer<CUnknownEngine15*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine15*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine15___reference, tolua_set_Pointer_CUnknownEngine15___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine15___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine15___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine15*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CScreenWorld*>", "Pointer<CScreenWorld*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CScreenWorld*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CScreenWorld___reference, tolua_set_Pointer_CScreenWorld___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CScreenWorld___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CScreenWorld___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CScreenWorld*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine16*>", "Pointer<CUnknownEngine16*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine16*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine16___reference, tolua_set_Pointer_CUnknownEngine16___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine16___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine16___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine16*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine17*>", "Pointer<CUnknownEngine17*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine17*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine17___reference, tolua_set_Pointer_CUnknownEngine17___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine17___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine17___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine17*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CScreenConnection*>", "Pointer<CScreenConnection*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CScreenConnection*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CScreenConnection___reference, tolua_set_Pointer_CScreenConnection___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CScreenConnection___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CScreenConnection___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CScreenConnection*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CScreenWorldMap*>", "Pointer<CScreenWorldMap*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CScreenWorldMap*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CScreenWorldMap___reference, tolua_set_Pointer_CScreenWorldMap___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CScreenWorldMap___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CScreenWorldMap___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CScreenWorldMap*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine18*>", "Pointer<CUnknownEngine18*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine18*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine18___reference, tolua_set_Pointer_CUnknownEngine18___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine18___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine18___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine18*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUnknownEngine19*>", "Pointer<CUnknownEngine19*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUnknownEngine19*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUnknownEngine19___reference, tolua_set_Pointer_CUnknownEngine19___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUnknownEngine19___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUnknownEngine19___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUnknownEngine19*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CWarp*>", "Pointer<CWarp*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CWarp*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CWarp___reference, tolua_set_Pointer_CWarp___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CWarp___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CWarp___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CWarp*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CPoint*>", "Pointer<CPoint*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CPoint*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CPoint___reference, tolua_set_Pointer_CPoint___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CPoint___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CPoint___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CPoint*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResWED*>", "Pointer<CResWED*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResWED*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResWED___reference, tolua_set_Pointer_CResWED___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CResWED___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResWED___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResWED*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CInfTileSet*>", "Pointer<CInfTileSet*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CInfTileSet*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CInfTileSet___reference, tolua_set_Pointer_CInfTileSet___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CInfTileSet___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CInfTileSet___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CInfTileSet*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVRamPool*>", "Pointer<CVRamPool*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVRamPool*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVRamPool___reference, tolua_set_Pointer_CVRamPool___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CVRamPool___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVRamPool___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVRamPool*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidMode*>", "Pointer<CVidMode*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidMode*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidMode___reference, tolua_set_Pointer_CVidMode___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CVidMode___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidMode___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidMode*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameArea*>", "Pointer<CGameArea*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameArea*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameArea___reference, tolua_set_Pointer_CGameArea___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CGameArea___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameArea___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameArea*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CPtrList*>", "Pointer<CPtrList*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CPtrList*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CPtrList___reference, tolua_set_Pointer_CPtrList___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CPtrList___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CPtrList___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CPtrList*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CPtrList_CNode*>", "Pointer<CPtrList_CNode*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CPtrList_CNode*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CPtrList_CNode___reference, tolua_set_Pointer_CPtrList_CNode___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CPtrList_CNode___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CPtrList_CNode___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CPtrList_CNode*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<mosHeader_st*>", "Pointer<mosHeader_st*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<mosHeader_st*>");
		tolua_variable(L, "reference", tolua_get_Pointer_mosHeader_st___reference, tolua_set_Pointer_mosHeader_st___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_mosHeader_st___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_mosHeader_st___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<mosHeader_st*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CRes*>", "Pointer<CRes*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CRes*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CRes___reference, tolua_set_Pointer_CRes___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CRes___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CRes___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CRes*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResRef*>", "Pointer<CResRef*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResRef*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResRef___reference, tolua_set_Pointer_CResRef___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CResRef___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResRef___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResRef*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<UI_Control_st*>", "Pointer<UI_Control_st*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<UI_Control_st*>");
		tolua_variable(L, "reference", tolua_get_Pointer_UI_Control_st___reference, tolua_set_Pointer_UI_Control_st___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_UI_Control_st___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_UI_Control_st___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<UI_Control_st*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<UI_PanelHeader_st*>", "Pointer<UI_PanelHeader_st*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<UI_PanelHeader_st*>");
		tolua_variable(L, "reference", tolua_get_Pointer_UI_PanelHeader_st___reference, tolua_set_Pointer_UI_PanelHeader_st___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_UI_PanelHeader_st___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_UI_PanelHeader_st___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<UI_PanelHeader_st*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CSyncObject*>", "Pointer<CSyncObject*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CSyncObject*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CSyncObject___reference, tolua_set_Pointer_CSyncObject___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CSyncObject___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CSyncObject___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CSyncObject*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUIControlBase*>", "Pointer<CUIControlBase*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUIControlBase*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUIControlBase___reference, tolua_set_Pointer_CUIControlBase___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUIControlBase___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUIControlBase___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUIControlBase*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUIPanel*>", "Pointer<CUIPanel*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUIPanel*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUIPanel___reference, tolua_set_Pointer_CUIPanel___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUIPanel___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUIPanel___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUIPanel*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CBaldurEngine*>", "Pointer<CBaldurEngine*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CBaldurEngine*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CBaldurEngine___reference, tolua_set_Pointer_CBaldurEngine___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CBaldurEngine___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CBaldurEngine___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CBaldurEngine*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUIManager*>", "Pointer<CUIManager*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUIManager*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUIManager___reference, tolua_set_Pointer_CUIManager___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUIManager___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUIManager___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUIManager*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CRect*>", "Pointer<CRect*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CRect*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CRect___reference, tolua_set_Pointer_CRect___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CRect___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CRect___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CRect*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CString*>", "Pointer<CString*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CString*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CString___reference, tolua_set_Pointer_CString___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CString___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CString___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CString*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<DDSURFACEDESC*>", "Pointer<DDSURFACEDESC*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<DDSURFACEDESC*>");
		tolua_variable(L, "reference", tolua_get_Pointer_DDSURFACEDESC___reference, tolua_set_Pointer_DDSURFACEDESC___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_DDSURFACEDESC___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_DDSURFACEDESC___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<DDSURFACEDESC*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidFont*>", "Pointer<CVidFont*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidFont*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidFont___reference, tolua_set_Pointer_CVidFont___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CVidFont___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidFont___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidFont*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<IDirectDrawSurface**>", "Pointer<IDirectDrawSurface**>", {}, NULL);
	tolua_beginmodule(L, "Pointer<IDirectDrawSurface**>");
		tolua_variable(L, "reference", tolua_get_Pointer_IDirectDrawSurface____reference, tolua_set_Pointer_IDirectDrawSurface____reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_IDirectDrawSurface____getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_IDirectDrawSurface____setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<IDirectDrawSurface**>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<void**>", "Pointer<void**>", {}, NULL);
	tolua_beginmodule(L, "Pointer<void**>");
		tolua_variable(L, "reference", tolua_get_Pointer_void____reference, tolua_set_Pointer_void____reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_void____getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_void____setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<void**>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<uint*>", "Pointer<uint*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<uint*>");
		tolua_variable(L, "reference", tolua_get_Pointer_uint___reference, tolua_set_Pointer_uint___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_uint___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_uint___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<uint*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameEffect*>", "Pointer<CGameEffect*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameEffect*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameEffect___reference, tolua_set_Pointer_CGameEffect___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CGameEffect___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameEffect___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameEffect*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>", "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CTypedPtrList_CPtrList_CGameEffect____CNode___reference, tolua_set_Pointer_CTypedPtrList_CPtrList_CGameEffect____CNode___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CTypedPtrList_CPtrList_CGameEffect____CNode___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CTypedPtrList_CPtrList_CGameEffect____CNode___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CTypedPtrList<CPtrList,CGameEffect*>::CNode*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<tagRGBQUAD*>", "Pointer<tagRGBQUAD*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<tagRGBQUAD*>");
		tolua_variable(L, "reference", tolua_get_Pointer_tagRGBQUAD___reference, tolua_set_Pointer_tagRGBQUAD___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_tagRGBQUAD___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_tagRGBQUAD___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<tagRGBQUAD*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameObject*>", "Pointer<CGameObject*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameObject*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameObject___reference, tolua_set_Pointer_CGameObject___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CGameObject___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameObject___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameObject*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CAIObjectType*>", "Pointer<CAIObjectType*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CAIObjectType*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CAIObjectType___reference, tolua_set_Pointer_CAIObjectType___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CAIObjectType___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CAIObjectType___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CAIObjectType*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CItem*>", "Pointer<CItem*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CItem*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CItem___reference, tolua_set_Pointer_CItem___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CItem___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CItem___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CItem*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUIControlButton*>", "Pointer<CUIControlButton*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUIControlButton*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUIControlButton___reference, tolua_set_Pointer_CUIControlButton___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUIControlButton___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUIControlButton___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUIControlButton*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameAnimationType*>", "Pointer<CGameAnimationType*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameAnimationType*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameAnimationType___reference, tolua_set_Pointer_CGameAnimationType___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CGameAnimationType___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameAnimationType___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameAnimationType*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CProjectile*>", "Pointer<CProjectile*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CProjectile*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CProjectile___reference, tolua_set_Pointer_CProjectile___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CProjectile___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CProjectile___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CProjectile*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CChitin*>", "Pointer<CChitin*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CChitin*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CChitin___reference, tolua_set_Pointer_CChitin___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CChitin___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CChitin___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CChitin*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<IDirectDraw*>", "Pointer<IDirectDraw*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<IDirectDraw*>");
		tolua_variable(L, "reference", tolua_get_Pointer_IDirectDraw___reference, tolua_set_Pointer_IDirectDraw___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_IDirectDraw___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_IDirectDraw___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<IDirectDraw*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CObList_CNode*>", "Pointer<CObList_CNode*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CObList_CNode*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CObList_CNode___reference, tolua_set_Pointer_CObList_CNode___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CObList_CNode___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CObList_CNode___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CObList_CNode*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVideoFunctions*>", "Pointer<CVideoFunctions*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVideoFunctions*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVideoFunctions___reference, tolua_set_Pointer_CVideoFunctions___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CVideoFunctions___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVideoFunctions___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVideoFunctions*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<DDBLTFX*>", "Pointer<DDBLTFX*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<DDBLTFX*>");
		tolua_variable(L, "reference", tolua_get_Pointer_DDBLTFX___reference, tolua_set_Pointer_DDBLTFX___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_DDBLTFX___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_DDBLTFX___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<DDBLTFX*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameSprite*>", "Pointer<CGameSprite*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameSprite*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameSprite___reference, tolua_set_Pointer_CGameSprite___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CGameSprite___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameSprite___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameSprite*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CRuntimeClass*>", "Pointer<CRuntimeClass*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CRuntimeClass*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CRuntimeClass___reference, tolua_set_Pointer_CRuntimeClass___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CRuntimeClass___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CRuntimeClass___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CRuntimeClass*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CObject*>", "Pointer<CObject*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CObject*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CObject___reference, tolua_set_Pointer_CObject___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CObject___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CObject___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CObject*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CArchive*>", "Pointer<CArchive*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CArchive*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CArchive___reference, tolua_set_Pointer_CArchive___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CArchive___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CArchive___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CArchive*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameAIBase*>", "Pointer<CGameAIBase*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameAIBase*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameAIBase___reference, tolua_set_Pointer_CGameAIBase___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CGameAIBase___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameAIBase___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameAIBase*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResourceManagerHashEntry*>", "Pointer<CResourceManagerHashEntry*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResourceManagerHashEntry*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResourceManagerHashEntry___reference, tolua_set_Pointer_CResourceManagerHashEntry___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CResourceManagerHashEntry___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResourceManagerHashEntry___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResourceManagerHashEntry*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameObjectArrayEntry*>", "Pointer<CGameObjectArrayEntry*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameObjectArrayEntry*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameObjectArrayEntry___reference, tolua_set_Pointer_CGameObjectArrayEntry___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CGameObjectArrayEntry___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameObjectArrayEntry___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameObjectArrayEntry*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CInfinity*>", "Pointer<CInfinity*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CInfinity*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CInfinity___reference, tolua_set_Pointer_CInfinity___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CInfinity___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CInfinity___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CInfinity*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameDialogEntry**>", "Pointer<CGameDialogEntry**>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameDialogEntry**>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameDialogEntry____reference, tolua_set_Pointer_CGameDialogEntry____reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CGameDialogEntry____getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameDialogEntry____setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameDialogEntry**>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CMessage*>", "Pointer<CMessage*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CMessage*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CMessage___reference, tolua_set_Pointer_CMessage___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CMessage___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CMessage___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CMessage*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<byte**>", "Pointer<byte**>", {}, NULL);
	tolua_beginmodule(L, "Pointer<byte**>");
		tolua_variable(L, "reference", tolua_get_Pointer_byte____reference, tolua_set_Pointer_byte____reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_byte____getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_byte____setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<byte**>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<VariableArray<CResourceManagerHashEntry>*>", "Pointer<VariableArray<CResourceManagerHashEntry>*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<VariableArray<CResourceManagerHashEntry>*>");
		tolua_variable(L, "reference", tolua_get_Pointer_VariableArray_CResourceManagerHashEntry____reference, tolua_set_Pointer_VariableArray_CResourceManagerHashEntry____reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_VariableArray_CResourceManagerHashEntry____getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_VariableArray_CResourceManagerHashEntry____setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<VariableArray<CResourceManagerHashEntry>*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<BOOL>", "Pointer<BOOL>", {}, NULL);
	tolua_beginmodule(L, "Pointer<BOOL>");
		tolua_variable(L, "reference", tolua_get_Pointer_BOOL__reference, tolua_set_Pointer_BOOL__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_BOOL__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_BOOL__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<BOOL>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CBlood>", "Pointer<CBlood>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CBlood>");
		tolua_variable(L, "reference", tolua_get_Pointer_CBlood__reference, tolua_set_Pointer_CBlood__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CBlood__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CBlood>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CChitinUnknown>", "Pointer<CChitinUnknown>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CChitinUnknown>");
		tolua_variable(L, "reference", tolua_get_Pointer_CChitinUnknown__reference, tolua_set_Pointer_CChitinUnknown__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CChitinUnknown__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CChitinUnknown>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CFile>", "Pointer<CFile>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CFile>");
		tolua_variable(L, "reference", tolua_get_Pointer_CFile__reference, tolua_set_Pointer_CFile__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CFile__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CFile>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameAnimation>", "Pointer<CGameAnimation>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameAnimation>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameAnimation__reference, tolua_set_Pointer_CGameAnimation__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameAnimation__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameAnimation>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameDialogEntry>", "Pointer<CGameDialogEntry>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameDialogEntry>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameDialogEntry__reference, tolua_set_Pointer_CGameDialogEntry__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameDialogEntry__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameDialogEntry>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameDialogSprite>", "Pointer<CGameDialogSprite>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameDialogSprite>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameDialogSprite__reference, tolua_set_Pointer_CGameDialogSprite__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameDialogSprite__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameDialogSprite>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CMessageHandler>", "Pointer<CMessageHandler>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CMessageHandler>");
		tolua_variable(L, "reference", tolua_get_Pointer_CMessageHandler__reference, tolua_set_Pointer_CMessageHandler__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CMessageHandler__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CMessageHandler>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CProgressBar>", "Pointer<CProgressBar>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CProgressBar>");
		tolua_variable(L, "reference", tolua_get_Pointer_CProgressBar__reference, tolua_set_Pointer_CProgressBar__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CProgressBar__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CProgressBar>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CRainStorm>", "Pointer<CRainStorm>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CRainStorm>");
		tolua_variable(L, "reference", tolua_get_Pointer_CRainStorm__reference, tolua_set_Pointer_CRainStorm__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CRainStorm__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CRainStorm>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CSize>", "Pointer<CSize>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CSize>");
		tolua_variable(L, "reference", tolua_get_Pointer_CSize__reference, tolua_set_Pointer_CSize__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CSize__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CSize>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CSnowStorm>", "Pointer<CSnowStorm>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CSnowStorm>");
		tolua_variable(L, "reference", tolua_get_Pointer_CSnowStorm__reference, tolua_set_Pointer_CSnowStorm__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CSnowStorm__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CSnowStorm>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CSoundImp>", "Pointer<CSoundImp>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CSoundImp>");
		tolua_variable(L, "reference", tolua_get_Pointer_CSoundImp__reference, tolua_set_Pointer_CSoundImp__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CSoundImp__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CSoundImp>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CTlkTable>", "Pointer<CTlkTable>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CTlkTable>");
		tolua_variable(L, "reference", tolua_get_Pointer_CTlkTable__reference, tolua_set_Pointer_CTlkTable__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CTlkTable__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CTlkTable>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidBitmap>", "Pointer<CVidBitmap>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidBitmap>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidBitmap__reference, tolua_set_Pointer_CVidBitmap__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidBitmap__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidBitmap>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CWeather>", "Pointer<CWeather>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CWeather>");
		tolua_variable(L, "reference", tolua_get_Pointer_CWeather__reference, tolua_set_Pointer_CWeather__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CWeather__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CWeather>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<DWORD>", "Pointer<DWORD>", {}, NULL);
	tolua_beginmodule(L, "Pointer<DWORD>");
		tolua_variable(L, "reference", tolua_get_Pointer_DWORD__reference, tolua_set_Pointer_DWORD__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_DWORD__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_DWORD__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<DWORD>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<DWORD*>", "Pointer<DWORD*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<DWORD*>");
		tolua_variable(L, "reference", tolua_get_Pointer_DWORD___reference, tolua_set_Pointer_DWORD___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_DWORD___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_DWORD___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<DWORD*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<HRESULT>", "Pointer<HRESULT>", {}, NULL);
	tolua_beginmodule(L, "Pointer<HRESULT>");
		tolua_variable(L, "reference", tolua_get_Pointer_HRESULT__reference, tolua_set_Pointer_HRESULT__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_HRESULT__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_HRESULT__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<HRESULT>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<INT>", "Pointer<INT>", {}, NULL);
	tolua_beginmodule(L, "Pointer<INT>");
		tolua_variable(L, "reference", tolua_get_Pointer_INT__reference, tolua_set_Pointer_INT__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_INT__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_INT__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<INT>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<LONG>", "Pointer<LONG>", {}, NULL);
	tolua_beginmodule(L, "Pointer<LONG>");
		tolua_variable(L, "reference", tolua_get_Pointer_LONG__reference, tolua_set_Pointer_LONG__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_LONG__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_LONG__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<LONG>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<const LPCSTR>", "Pointer<const LPCSTR>", {}, NULL);
	tolua_beginmodule(L, "Pointer<const LPCSTR>");
		tolua_variable(L, "reference", tolua_get_Pointer_const_LPCSTR__reference, tolua_set_Pointer_const_LPCSTR__reference);
		tolua_constant(L, "sizeof", sizeof(Pointer<const LPCSTR>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<LRESULT>", "Pointer<LRESULT>", {}, NULL);
	tolua_beginmodule(L, "Pointer<LRESULT>");
		tolua_variable(L, "reference", tolua_get_Pointer_LRESULT__reference, tolua_set_Pointer_LRESULT__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_LRESULT__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_LRESULT__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<LRESULT>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<int>", "Pointer<int>", {}, NULL);
	tolua_beginmodule(L, "Pointer<int>");
		tolua_variable(L, "reference", tolua_get_Pointer_int__reference, tolua_set_Pointer_int__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_int__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_int__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<int>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<UINT>", "Pointer<UINT>", {}, NULL);
	tolua_beginmodule(L, "Pointer<UINT>");
		tolua_variable(L, "reference", tolua_get_Pointer_UINT__reference, tolua_set_Pointer_UINT__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_UINT__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_UINT__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<UINT>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<short>", "Pointer<short>", {}, NULL);
	tolua_beginmodule(L, "Pointer<short>");
		tolua_variable(L, "reference", tolua_get_Pointer_short__reference, tolua_set_Pointer_short__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_short__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_short__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<short>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<size_t>", "Pointer<size_t>", {}, NULL);
	tolua_beginmodule(L, "Pointer<size_t>");
		tolua_variable(L, "reference", tolua_get_Pointer_size_t__reference, tolua_set_Pointer_size_t__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_size_t__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_size_t__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<size_t>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<uintptr_t>", "Pointer<uintptr_t>", {}, NULL);
	tolua_beginmodule(L, "Pointer<uintptr_t>");
		tolua_variable(L, "reference", tolua_get_Pointer_uintptr_t__reference, tolua_set_Pointer_uintptr_t__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_uintptr_t__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_uintptr_t__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<uintptr_t>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<long>", "Pointer<long>", {}, NULL);
	tolua_beginmodule(L, "Pointer<long>");
		tolua_variable(L, "reference", tolua_get_Pointer_long__reference, tolua_set_Pointer_long__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_long__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_long__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<long>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<ushort>", "Pointer<ushort>", {}, NULL);
	tolua_beginmodule(L, "Pointer<ushort>");
		tolua_variable(L, "reference", tolua_get_Pointer_ushort__reference, tolua_set_Pointer_ushort__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_ushort__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_ushort__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<ushort>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<bool>", "Pointer<bool>", {}, NULL);
	tolua_beginmodule(L, "Pointer<bool>");
		tolua_variable(L, "reference", tolua_get_Pointer_bool__reference, tolua_set_Pointer_bool__reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_bool__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_bool__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<bool>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<__int8>>", "Pointer<Primitive<__int8>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<__int8>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive___int8___reference, tolua_set_Pointer_Primitive___int8___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive___int8___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<__int8>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<int32_t>>", "Pointer<Primitive<int32_t>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<int32_t>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_int32_t___reference, tolua_set_Pointer_Primitive_int32_t___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_int32_t___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<int32_t>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<uint32_t>>", "Pointer<Primitive<uint32_t>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<uint32_t>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_uint32_t___reference, tolua_set_Pointer_Primitive_uint32_t___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_uint32_t___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<uint32_t>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<HRESULT>>", "Pointer<Primitive<HRESULT>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<HRESULT>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_HRESULT___reference, tolua_set_Pointer_Primitive_HRESULT___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_HRESULT___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<HRESULT>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<byte>>", "Pointer<Primitive<byte>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<byte>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_byte___reference, tolua_set_Pointer_Primitive_byte___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_byte___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<byte>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<float>>", "Pointer<Primitive<float>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<float>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_float___reference, tolua_set_Pointer_Primitive_float___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_float___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<float>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<BOOL>>", "Pointer<Primitive<BOOL>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<BOOL>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_BOOL___reference, tolua_set_Pointer_Primitive_BOOL___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_BOOL___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<BOOL>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<ushort>>", "Pointer<Primitive<ushort>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<ushort>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_ushort___reference, tolua_set_Pointer_Primitive_ushort___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_ushort___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<ushort>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<uint16_t>>", "Pointer<Primitive<uint16_t>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<uint16_t>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_uint16_t___reference, tolua_set_Pointer_Primitive_uint16_t___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_uint16_t___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<uint16_t>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<int>>", "Pointer<Primitive<int>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<int>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_int___reference, tolua_set_Pointer_Primitive_int___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_int___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<int>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<LONG>>", "Pointer<Primitive<LONG>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<LONG>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_LONG___reference, tolua_set_Pointer_Primitive_LONG___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_LONG___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<LONG>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<uintptr_t>>", "Pointer<Primitive<uintptr_t>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<uintptr_t>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_uintptr_t___reference, tolua_set_Pointer_Primitive_uintptr_t___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_uintptr_t___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<uintptr_t>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<__int64>>", "Pointer<Primitive<__int64>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<__int64>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive___int64___reference, tolua_set_Pointer_Primitive___int64___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive___int64___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<__int64>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<short>>", "Pointer<Primitive<short>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<short>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_short___reference, tolua_set_Pointer_Primitive_short___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_short___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<short>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<__int16>>", "Pointer<Primitive<__int16>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<__int16>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive___int16___reference, tolua_set_Pointer_Primitive___int16___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive___int16___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<__int16>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<size_t>>", "Pointer<Primitive<size_t>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<size_t>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_size_t___reference, tolua_set_Pointer_Primitive_size_t___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_size_t___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<size_t>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<bool>>", "Pointer<Primitive<bool>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<bool>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_bool___reference, tolua_set_Pointer_Primitive_bool___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_bool___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<bool>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<UINT>>", "Pointer<Primitive<UINT>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<UINT>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_UINT___reference, tolua_set_Pointer_Primitive_UINT___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_UINT___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<UINT>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<int64_t>>", "Pointer<Primitive<int64_t>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<int64_t>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_int64_t___reference, tolua_set_Pointer_Primitive_int64_t___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_int64_t___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<int64_t>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<char>>", "Pointer<Primitive<char>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<char>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_char___reference, tolua_set_Pointer_Primitive_char___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_char___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<char>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<const char*>>", "Pointer<Primitive<const char*>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<const char*>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_const_char____reference, tolua_set_Pointer_Primitive_const_char____reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_const_char____setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<const char*>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<double>>", "Pointer<Primitive<double>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<double>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_double___reference, tolua_set_Pointer_Primitive_double___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_double___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<double>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<uint8_t>>", "Pointer<Primitive<uint8_t>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<uint8_t>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_uint8_t___reference, tolua_set_Pointer_Primitive_uint8_t___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_uint8_t___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<uint8_t>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<ptrdiff_t>>", "Pointer<Primitive<ptrdiff_t>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<ptrdiff_t>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_ptrdiff_t___reference, tolua_set_Pointer_Primitive_ptrdiff_t___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_ptrdiff_t___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<ptrdiff_t>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<__int32>>", "Pointer<Primitive<__int32>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<__int32>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive___int32___reference, tolua_set_Pointer_Primitive___int32___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive___int32___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<__int32>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<long double>>", "Pointer<Primitive<long double>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<long double>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_long_double___reference, tolua_set_Pointer_Primitive_long_double___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_long_double___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<long double>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<int8_t>>", "Pointer<Primitive<int8_t>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<int8_t>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_int8_t___reference, tolua_set_Pointer_Primitive_int8_t___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_int8_t___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<int8_t>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<int16_t>>", "Pointer<Primitive<int16_t>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<int16_t>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_int16_t___reference, tolua_set_Pointer_Primitive_int16_t___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_int16_t___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<int16_t>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<intptr_t>>", "Pointer<Primitive<intptr_t>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<intptr_t>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_intptr_t___reference, tolua_set_Pointer_Primitive_intptr_t___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_intptr_t___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<intptr_t>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<DWORD>>", "Pointer<Primitive<DWORD>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<DWORD>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_DWORD___reference, tolua_set_Pointer_Primitive_DWORD___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_DWORD___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<DWORD>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<uint64_t>>", "Pointer<Primitive<uint64_t>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<uint64_t>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_uint64_t___reference, tolua_set_Pointer_Primitive_uint64_t___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_uint64_t___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<uint64_t>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<INT>>", "Pointer<Primitive<INT>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<INT>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_INT___reference, tolua_set_Pointer_Primitive_INT___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_INT___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<INT>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<uint>>", "Pointer<Primitive<uint>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<uint>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_uint___reference, tolua_set_Pointer_Primitive_uint___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_uint___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<uint>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<long>>", "Pointer<Primitive<long>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<long>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_long___reference, tolua_set_Pointer_Primitive_long___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_long___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<long>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Primitive<LRESULT>>", "Pointer<Primitive<LRESULT>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Primitive<LRESULT>>");
		tolua_variable(L, "reference", tolua_get_Pointer_Primitive_LRESULT___reference, tolua_set_Pointer_Primitive_LRESULT___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Primitive_LRESULT___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Primitive<LRESULT>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<RECT>", "Pointer<RECT>", {}, NULL);
	tolua_beginmodule(L, "Pointer<RECT>");
		tolua_variable(L, "reference", tolua_get_Pointer_RECT__reference, tolua_set_Pointer_RECT__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_RECT__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<RECT>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<UnknownLuaStruct>", "Pointer<UnknownLuaStruct>", {}, NULL);
	tolua_beginmodule(L, "Pointer<UnknownLuaStruct>");
		tolua_variable(L, "reference", tolua_get_Pointer_UnknownLuaStruct__reference, tolua_set_Pointer_UnknownLuaStruct__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_UnknownLuaStruct__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<UnknownLuaStruct>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<UnmappedUserType>", "Pointer<UnmappedUserType>", {}, NULL);
	tolua_beginmodule(L, "Pointer<UnmappedUserType>");
		tolua_variable(L, "reference", tolua_get_Pointer_UnmappedUserType__reference, tolua_set_Pointer_UnmappedUserType__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_UnmappedUserType__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<UnmappedUserType>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CNetwork>", "Pointer<CNetwork>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CNetwork>");
		tolua_variable(L, "reference", tolua_get_Pointer_CNetwork__reference, tolua_set_Pointer_CNetwork__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CNetwork__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CNetwork>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<char*>", "Pointer<char*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<char*>");
		tolua_variable(L, "reference", tolua_get_Pointer_char___reference, tolua_set_Pointer_char___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_char___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<char*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<char>", "Pointer<char>", {}, NULL);
	tolua_beginmodule(L, "Pointer<char>");
		tolua_variable(L, "reference", tolua_get_Pointer_char__reference, NULL);
		tolua_function(L, "getValue", &tolua_function_Pointer_char__getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_char__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<char>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<const char*>", "Pointer<const char*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<const char*>");
		tolua_variable(L, "reference", tolua_get_Pointer_const_char___reference, tolua_set_Pointer_const_char___reference);
		tolua_constant(L, "sizeof", sizeof(Pointer<const char*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<int*>", "Pointer<int*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<int*>");
		tolua_variable(L, "reference", tolua_get_Pointer_int___reference, tolua_set_Pointer_int___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_int___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_int___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<int*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidPoly>", "Pointer<CVidPoly>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidPoly>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidPoly__reference, tolua_set_Pointer_CVidPoly__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidPoly__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidPoly>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUIControlButtonMapEntry>", "Pointer<CUIControlButtonMapEntry>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUIControlButtonMapEntry>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUIControlButtonMapEntry__reference, tolua_set_Pointer_CUIControlButtonMapEntry__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUIControlButtonMapEntry__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUIControlButtonMapEntry>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUIControlButtonMapEntry*>", "Pointer<CUIControlButtonMapEntry*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUIControlButtonMapEntry*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUIControlButtonMapEntry___reference, tolua_set_Pointer_CUIControlButtonMapEntry___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CUIControlButtonMapEntry___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUIControlButtonMapEntry___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUIControlButtonMapEntry*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CSearchBitmap>", "Pointer<CSearchBitmap>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CSearchBitmap>");
		tolua_variable(L, "reference", tolua_get_Pointer_CSearchBitmap__reference, tolua_set_Pointer_CSearchBitmap__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CSearchBitmap__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CSearchBitmap>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CObList>", "Pointer<CObList>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CObList>");
		tolua_variable(L, "reference", tolua_get_Pointer_CObList__reference, tolua_set_Pointer_CObList__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CObList__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CObList>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVisibilityMap>", "Pointer<CVisibilityMap>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVisibilityMap>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVisibilityMap__reference, tolua_set_Pointer_CVisibilityMap__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVisibilityMap__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVisibilityMap>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CParticle>", "Pointer<CParticle>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CParticle>");
		tolua_variable(L, "reference", tolua_get_Pointer_CParticle__reference, tolua_set_Pointer_CParticle__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CParticle__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CParticle>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CItem::vtbl>", "Pointer<CItem::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CItem::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CItem__vtbl__reference, tolua_set_Pointer_CItem__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CItem__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CItem::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CDerivedStats>", "Pointer<CDerivedStats>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CDerivedStats>");
		tolua_variable(L, "reference", tolua_get_Pointer_CDerivedStats__reference, tolua_set_Pointer_CDerivedStats__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CDerivedStats__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CDerivedStats>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<WED_TileData_st>", "Pointer<WED_TileData_st>", {}, NULL);
	tolua_beginmodule(L, "Pointer<WED_TileData_st>");
		tolua_variable(L, "reference", tolua_get_Pointer_WED_TileData_st__reference, tolua_set_Pointer_WED_TileData_st__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_WED_TileData_st__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<WED_TileData_st>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<const ConstCharString*>", "Pointer<const ConstCharString*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<const ConstCharString*>");
		tolua_variable(L, "reference", tolua_get_Pointer_const_ConstCharString___reference, tolua_set_Pointer_const_ConstCharString___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_const_ConstCharString___getValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<const ConstCharString*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CharString*>", "Pointer<CharString*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CharString*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CharString___reference, tolua_set_Pointer_CharString___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CharString___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CharString___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CharString*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidMode::vtbl>", "Pointer<CVidMode::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidMode::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidMode__vtbl__reference, tolua_set_Pointer_CVidMode__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidMode__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidMode::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUIControlBase::vtbl>", "Pointer<CUIControlBase::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUIControlBase::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUIControlBase__vtbl__reference, tolua_set_Pointer_CUIControlBase__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUIControlBase__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUIControlBase::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUIControlButton::vtbl>", "Pointer<CUIControlButton::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUIControlButton::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUIControlButton__vtbl__reference, tolua_set_Pointer_CUIControlButton__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUIControlButton__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUIControlButton::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CSoundMixer>", "Pointer<CSoundMixer>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CSoundMixer>");
		tolua_variable(L, "reference", tolua_get_Pointer_CSoundMixer__reference, tolua_set_Pointer_CSoundMixer__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CSoundMixer__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CSoundMixer>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CSingleLock>", "Pointer<CSingleLock>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CSingleLock>");
		tolua_variable(L, "reference", tolua_get_Pointer_CSingleLock__reference, tolua_set_Pointer_CSingleLock__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CSingleLock__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CSingleLock>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CObject::vtbl>", "Pointer<CObject::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CObject::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CObject__vtbl__reference, tolua_set_Pointer_CObject__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CObject__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CObject::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CWarp::vtbl>", "Pointer<CWarp::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CWarp::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CWarp__vtbl__reference, tolua_set_Pointer_CWarp__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CWarp__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CWarp::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::vtbl>", "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CTypedPtrList_CPtrList_CGameEffect____vtbl__reference, tolua_set_Pointer_CTypedPtrList_CPtrList_CGameEffect____vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CTypedPtrList_CPtrList_CGameEffect____vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CTypedPtrList<CPtrList,CGameEffect*>::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CTypedPtrList<CPtrList,long>>", "Pointer<CTypedPtrList<CPtrList,long>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CTypedPtrList<CPtrList,long>>");
		tolua_variable(L, "reference", tolua_get_Pointer_CTypedPtrList_CPtrList_long___reference, tolua_set_Pointer_CTypedPtrList_CPtrList_long___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CTypedPtrList_CPtrList_long___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CTypedPtrList<CPtrList,long>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CTypedPtrList<CPtrList,CWarp*>>", "Pointer<CTypedPtrList<CPtrList,CWarp*>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CTypedPtrList<CPtrList,CWarp*>>");
		tolua_variable(L, "reference", tolua_get_Pointer_CTypedPtrList_CPtrList_CWarp____reference, tolua_set_Pointer_CTypedPtrList_CPtrList_CWarp____reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CTypedPtrList_CPtrList_CWarp____setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CTypedPtrList<CPtrList,CWarp*>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>>", "Pointer<CTypedPtrList<CPtrList,CUIPanel*>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>>");
		tolua_variable(L, "reference", tolua_get_Pointer_CTypedPtrList_CPtrList_CUIPanel____reference, tolua_set_Pointer_CTypedPtrList_CPtrList_CUIPanel____reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CTypedPtrList_CPtrList_CUIPanel____setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CTypedPtrList<CPtrList,CUIPanel*>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>>", "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>>");
		tolua_variable(L, "reference", tolua_get_Pointer_CTypedPtrList_CPtrList_CUIControlBase____reference, tolua_set_Pointer_CTypedPtrList_CPtrList_CUIControlBase____reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CTypedPtrList_CPtrList_CUIControlBase____setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CTypedPtrList<CPtrList,CUIControlBase*>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>>", "Pointer<CTypedPtrList<CPtrList,CGameEffect*>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CTypedPtrList<CPtrList,CGameEffect*>>");
		tolua_variable(L, "reference", tolua_get_Pointer_CTypedPtrList_CPtrList_CGameEffect____reference, tolua_set_Pointer_CTypedPtrList_CPtrList_CGameEffect____reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CTypedPtrList_CPtrList_CGameEffect____setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CTypedPtrList<CPtrList,CGameEffect*>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameEffectList>", "Pointer<CGameEffectList>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameEffectList>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameEffectList__reference, tolua_set_Pointer_CGameEffectList__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameEffectList__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameEffectList>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>", "Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>");
		tolua_variable(L, "reference", tolua_get_Pointer_CTypedPtrList_CPtrList_CUIPanel____CNode__reference, tolua_set_Pointer_CTypedPtrList_CPtrList_CUIPanel____CNode__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CTypedPtrList_CPtrList_CUIPanel____CNode__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CTypedPtrList<CPtrList,CUIPanel*>::CNode>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>", "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>");
		tolua_variable(L, "reference", tolua_get_Pointer_CTypedPtrList_CPtrList_CUIControlBase____CNode__reference, tolua_set_Pointer_CTypedPtrList_CPtrList_CUIControlBase____CNode__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CTypedPtrList_CPtrList_CUIControlBase____CNode__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CTypedPtrList<CPtrList,CUIControlBase*>::CNode>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>", "Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>");
		tolua_variable(L, "reference", tolua_get_Pointer_CTypedPtrList_CPtrList_CWarp____CNode__reference, tolua_set_Pointer_CTypedPtrList_CPtrList_CWarp____CNode__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CTypedPtrList_CPtrList_CWarp____CNode__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CTypedPtrList<CPtrList,CWarp*>::CNode>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CTypedPtrList<CPtrList,long>::CNode>", "Pointer<CTypedPtrList<CPtrList,long>::CNode>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CTypedPtrList<CPtrList,long>::CNode>");
		tolua_variable(L, "reference", tolua_get_Pointer_CTypedPtrList_CPtrList_long___CNode__reference, tolua_set_Pointer_CTypedPtrList_CPtrList_long___CNode__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CTypedPtrList_CPtrList_long___CNode__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CTypedPtrList<CPtrList,long>::CNode>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CSyncObject::vtbl>", "Pointer<CSyncObject::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CSyncObject::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CSyncObject__vtbl__reference, tolua_set_Pointer_CSyncObject__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CSyncObject__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CSyncObject::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameObjectArray>", "Pointer<CGameObjectArray>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameObjectArray>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameObjectArray__reference, tolua_set_Pointer_CGameObjectArray__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameObjectArray__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameObjectArray>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidMode3>", "Pointer<CVidMode3>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidMode3>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidMode3__reference, tolua_set_Pointer_CVidMode3__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidMode3__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidMode3>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidMode2>", "Pointer<CVidMode2>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidMode2>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidMode2__reference, tolua_set_Pointer_CVidMode2__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidMode2__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidMode2>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidMode1>", "Pointer<CVidMode1>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidMode1>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidMode1__reference, tolua_set_Pointer_CVidMode1__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidMode1__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidMode1>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidMode0>", "Pointer<CVidMode0>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidMode0>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidMode0__reference, tolua_set_Pointer_CVidMode0__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidMode0__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidMode0>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CCriticalSection>", "Pointer<CCriticalSection>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CCriticalSection>");
		tolua_variable(L, "reference", tolua_get_Pointer_CCriticalSection__reference, tolua_set_Pointer_CCriticalSection__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CCriticalSection__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CCriticalSection>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CRes::vtbl>", "Pointer<CRes::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CRes::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CRes__vtbl__reference, tolua_set_Pointer_CRes__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CRes__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CRes::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResUI>", "Pointer<CResUI>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResUI>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResUI__reference, tolua_set_Pointer_CResUI__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResUI__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResUI>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResText>", "Pointer<CResText>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResText>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResText__reference, tolua_set_Pointer_CResText__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResText__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResText>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResText*>", "Pointer<CResText*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResText*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResText___reference, tolua_set_Pointer_CResText___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CResText___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResText___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResText*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResMosaic>", "Pointer<CResMosaic>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResMosaic>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResMosaic__reference, tolua_set_Pointer_CResMosaic__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResMosaic__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResMosaic>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResMosaic*>", "Pointer<CResMosaic*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResMosaic*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResMosaic___reference, tolua_set_Pointer_CResMosaic___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CResMosaic___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResMosaic___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResMosaic*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResItem>", "Pointer<CResItem>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResItem>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResItem__reference, tolua_set_Pointer_CResItem__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResItem__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResItem>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResItem*>", "Pointer<CResItem*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResItem*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResItem___reference, tolua_set_Pointer_CResItem___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CResItem___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResItem___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResItem*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResEffect>", "Pointer<CResEffect>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResEffect>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResEffect__reference, tolua_set_Pointer_CResEffect__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResEffect__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResEffect>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResEffect*>", "Pointer<CResEffect*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResEffect*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResEffect___reference, tolua_set_Pointer_CResEffect___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CResEffect___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResEffect___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResEffect*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResCell>", "Pointer<CResCell>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResCell>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResCell__reference, tolua_set_Pointer_CResCell__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResCell__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResCell>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResCell*>", "Pointer<CResCell*>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResCell*>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResCell___reference, tolua_set_Pointer_CResCell___reference);
		tolua_function(L, "getValue", &tolua_function_Pointer_CResCell___getValue);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResCell___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResCell*>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CMessage::vtbl>", "Pointer<CMessage::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CMessage::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CMessage__vtbl__reference, tolua_set_Pointer_CMessage__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CMessage__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CMessage::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CMessageVisualEffect>", "Pointer<CMessageVisualEffect>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CMessageVisualEffect>");
		tolua_variable(L, "reference", tolua_get_Pointer_CMessageVisualEffect__reference, tolua_set_Pointer_CMessageVisualEffect__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CMessageVisualEffect__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CMessageVisualEffect>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CMessageUnknown>", "Pointer<CMessageUnknown>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CMessageUnknown>");
		tolua_variable(L, "reference", tolua_get_Pointer_CMessageUnknown__reference, tolua_set_Pointer_CMessageUnknown__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CMessageUnknown__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CMessageUnknown>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CMessageAutoScroll>", "Pointer<CMessageAutoScroll>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CMessageAutoScroll>");
		tolua_variable(L, "reference", tolua_get_Pointer_CMessageAutoScroll__reference, tolua_set_Pointer_CMessageAutoScroll__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CMessageAutoScroll__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CMessageAutoScroll>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CMessageAddEffect>", "Pointer<CMessageAddEffect>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CMessageAddEffect>");
		tolua_variable(L, "reference", tolua_get_Pointer_CMessageAddEffect__reference, tolua_set_Pointer_CMessageAddEffect__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CMessageAddEffect__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CMessageAddEffect>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameObject::vtbl>", "Pointer<CGameObject::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameObject::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameObject__vtbl__reference, tolua_set_Pointer_CGameObject__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameObject__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameObject::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameEffect::vtbl>", "Pointer<CGameEffect::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameEffect::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameEffect__vtbl__reference, tolua_set_Pointer_CGameEffect__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameEffect__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameEffect::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameAnimationType::vtbl>", "Pointer<CGameAnimationType::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameAnimationType::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameAnimationType__vtbl__reference, tolua_set_Pointer_CGameAnimationType__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameAnimationType__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameAnimationType::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameAnimationTypeCharacter>", "Pointer<CGameAnimationTypeCharacter>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameAnimationTypeCharacter>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameAnimationTypeCharacter__reference, tolua_set_Pointer_CGameAnimationTypeCharacter__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameAnimationTypeCharacter__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameAnimationTypeCharacter>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CChitin::vtbl>", "Pointer<CChitin::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CChitin::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CChitin__vtbl__reference, tolua_set_Pointer_CChitin__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CChitin__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CChitin::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CBaldurEngine::vtbl>", "Pointer<CBaldurEngine::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CBaldurEngine::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CBaldurEngine__vtbl__reference, tolua_set_Pointer_CBaldurEngine__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CBaldurEngine__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CBaldurEngine::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CAIGroup>", "Pointer<CAIGroup>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CAIGroup>");
		tolua_variable(L, "reference", tolua_get_Pointer_CAIGroup__reference, tolua_set_Pointer_CAIGroup__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CAIGroup__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CAIGroup>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVideo>", "Pointer<CVideo>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVideo>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVideo__reference, tolua_set_Pointer_CVideo__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVideo__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVideo>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidPalette>", "Pointer<CVidPalette>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidPalette>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidPalette__reference, tolua_set_Pointer_CVidPalette__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidPalette__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidPalette>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidImage>", "Pointer<CVidImage>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidImage>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidImage__reference, tolua_set_Pointer_CVidImage__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidImage__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidImage>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResHelper<CResMosaic,1004>>", "Pointer<CResHelper<CResMosaic,1004>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResHelper<CResMosaic,1004>>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResHelper_CResMosaic_1004___reference, tolua_set_Pointer_CResHelper_CResMosaic_1004___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResHelper_CResMosaic_1004___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResHelper<CResMosaic,1004>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResHelper<CResText,1012>>", "Pointer<CResHelper<CResText,1012>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResHelper<CResText,1012>>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResHelper_CResText_1012___reference, tolua_set_Pointer_CResHelper_CResText_1012___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResHelper_CResText_1012___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResHelper<CResText,1012>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResHelper<CResCell,1000>>", "Pointer<CResHelper<CResCell,1000>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResHelper<CResCell,1000>>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResHelper_CResCell_1000___reference, tolua_set_Pointer_CResHelper_CResCell_1000___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResHelper_CResCell_1000___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResHelper<CResCell,1000>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResHelper<CResEffect,1016>>", "Pointer<CResHelper<CResEffect,1016>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResHelper<CResEffect,1016>>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResHelper_CResEffect_1016___reference, tolua_set_Pointer_CResHelper_CResEffect_1016___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResHelper_CResEffect_1016___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResHelper<CResEffect,1016>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResHelper<CResItem,1005>>", "Pointer<CResHelper<CResItem,1005>>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResHelper<CResItem,1005>>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResHelper_CResItem_1005___reference, tolua_set_Pointer_CResHelper_CResItem_1005___reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResHelper_CResItem_1005___setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResHelper<CResItem,1005>>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidCell>", "Pointer<CVidCell>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidCell>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidCell__reference, tolua_set_Pointer_CVidCell__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidCell__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidCell>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameEffectFile>", "Pointer<CGameEffectFile>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameEffectFile>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameEffectFile__reference, tolua_set_Pointer_CGameEffectFile__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameEffectFile__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameEffectFile>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CVidMosaic>", "Pointer<CVidMosaic>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CVidMosaic>");
		tolua_variable(L, "reference", tolua_get_Pointer_CVidMosaic__reference, tolua_set_Pointer_CVidMosaic__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CVidMosaic__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CVidMosaic>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUIControlButtonMap>", "Pointer<CUIControlButtonMap>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUIControlButtonMap>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUIControlButtonMap__reference, tolua_set_Pointer_CUIControlButtonMap__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUIControlButtonMap__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUIControlButtonMap>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CCacheStatus>", "Pointer<CCacheStatus>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CCacheStatus>");
		tolua_variable(L, "reference", tolua_get_Pointer_CCacheStatus__reference, tolua_set_Pointer_CCacheStatus__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CCacheStatus__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CCacheStatus>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CUIControlTextField>", "Pointer<CUIControlTextField>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CUIControlTextField>");
		tolua_variable(L, "reference", tolua_get_Pointer_CUIControlTextField__reference, tolua_set_Pointer_CUIControlTextField__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CUIControlTextField__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CUIControlTextField>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<C2DArray>", "Pointer<C2DArray>", {}, NULL);
	tolua_beginmodule(L, "Pointer<C2DArray>");
		tolua_variable(L, "reference", tolua_get_Pointer_C2DArray__reference, tolua_set_Pointer_C2DArray__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_C2DArray__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<C2DArray>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CRuleTables>", "Pointer<CRuleTables>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CRuleTables>");
		tolua_variable(L, "reference", tolua_get_Pointer_CRuleTables__reference, tolua_set_Pointer_CRuleTables__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CRuleTables__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CRuleTables>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<WED_LayerHeader_st>", "Pointer<WED_LayerHeader_st>", {}, NULL);
	tolua_beginmodule(L, "Pointer<WED_LayerHeader_st>");
		tolua_variable(L, "reference", tolua_get_Pointer_WED_LayerHeader_st__reference, tolua_set_Pointer_WED_LayerHeader_st__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_WED_LayerHeader_st__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<WED_LayerHeader_st>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<Item_effect_st>", "Pointer<Item_effect_st>", {}, NULL);
	tolua_beginmodule(L, "Pointer<Item_effect_st>");
		tolua_variable(L, "reference", tolua_get_Pointer_Item_effect_st__reference, tolua_set_Pointer_Item_effect_st__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_Item_effect_st__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<Item_effect_st>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResourceManagerHashTable>", "Pointer<CResourceManagerHashTable>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResourceManagerHashTable>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResourceManagerHashTable__reference, tolua_set_Pointer_CResourceManagerHashTable__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResourceManagerHashTable__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResourceManagerHashTable>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CResourceManager>", "Pointer<CResourceManager>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CResourceManager>");
		tolua_variable(L, "reference", tolua_get_Pointer_CResourceManager__reference, tolua_set_Pointer_CResourceManager__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CResourceManager__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CResourceManager>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CInfButtonArray>", "Pointer<CInfButtonArray>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CInfButtonArray>");
		tolua_variable(L, "reference", tolua_get_Pointer_CInfButtonArray__reference, tolua_set_Pointer_CInfButtonArray__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CInfButtonArray__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CInfButtonArray>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameEffectBase>", "Pointer<CGameEffectBase>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameEffectBase>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameEffectBase__reference, tolua_set_Pointer_CGameEffectBase__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameEffectBase__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameEffectBase>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CAIAction>", "Pointer<CAIAction>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CAIAction>");
		tolua_variable(L, "reference", tolua_get_Pointer_CAIAction__reference, tolua_set_Pointer_CAIAction__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CAIAction__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CAIAction>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CGameAIBase::vtbl>", "Pointer<CGameAIBase::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CGameAIBase::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CGameAIBase__vtbl__reference, tolua_set_Pointer_CGameAIBase__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CGameAIBase__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CGameAIBase::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CProjectile::vtbl>", "Pointer<CProjectile::vtbl>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CProjectile::vtbl>");
		tolua_variable(L, "reference", tolua_get_Pointer_CProjectile__vtbl__reference, tolua_set_Pointer_CProjectile__vtbl__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CProjectile__vtbl__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CProjectile::vtbl>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CProjectileMagicMissile>", "Pointer<CProjectileMagicMissile>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CProjectileMagicMissile>");
		tolua_variable(L, "reference", tolua_get_Pointer_CProjectileMagicMissile__reference, tolua_set_Pointer_CProjectileMagicMissile__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CProjectileMagicMissile__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CProjectileMagicMissile>));
	tolua_endmodule(L);
	tolua_cclass(L, "Pointer<CAITrigger>", "Pointer<CAITrigger>", {}, NULL);
	tolua_beginmodule(L, "Pointer<CAITrigger>");
		tolua_variable(L, "reference", tolua_get_Pointer_CAITrigger__reference, tolua_set_Pointer_CAITrigger__reference);
		tolua_function(L, "setValue", &tolua_function_Pointer_CAITrigger__setValue);
		tolua_constant(L, "sizeof", sizeof(Pointer<CAITrigger>));
	tolua_endmodule(L);
	tolua_cclass(L, "EnhancedWidescreen", "EnhancedWidescreen", {}, NULL);
	tolua_beginmodule(L, "EnhancedWidescreen");
		tolua_variable(L, "allowedOutOfBoundsLeft", tolua_get_EnhancedWidescreen_allowedOutOfBoundsLeft, tolua_set_EnhancedWidescreen_allowedOutOfBoundsLeft);
		tolua_variable(L, "reference_allowedOutOfBoundsLeft", tolua_get_EnhancedWidescreen_reference_allowedOutOfBoundsLeft, NULL);
		tolua_variable(L, "allowedOutOfBoundsTop", tolua_get_EnhancedWidescreen_allowedOutOfBoundsTop, tolua_set_EnhancedWidescreen_allowedOutOfBoundsTop);
		tolua_variable(L, "reference_allowedOutOfBoundsTop", tolua_get_EnhancedWidescreen_reference_allowedOutOfBoundsTop, NULL);
		tolua_variable(L, "allowedOutOfBoundsRight", tolua_get_EnhancedWidescreen_allowedOutOfBoundsRight, tolua_set_EnhancedWidescreen_allowedOutOfBoundsRight);
		tolua_variable(L, "reference_allowedOutOfBoundsRight", tolua_get_EnhancedWidescreen_reference_allowedOutOfBoundsRight, NULL);
		tolua_variable(L, "allowedOutOfBoundsBottom", tolua_get_EnhancedWidescreen_allowedOutOfBoundsBottom, tolua_set_EnhancedWidescreen_allowedOutOfBoundsBottom);
		tolua_variable(L, "reference_allowedOutOfBoundsBottom", tolua_get_EnhancedWidescreen_reference_allowedOutOfBoundsBottom, NULL);
		tolua_function(L, "GetINIString", &tolua_function_EnhancedWidescreen_GetINIString);
		tolua_function(L, "StringToVirtualKey", &tolua_function_EnhancedWidescreen_StringToVirtualKey);
	tolua_endmodule(L);
	tolua_cclass(L, "ConstCharString", "ConstCharString", {}, NULL);
	tolua_beginmodule(L, "ConstCharString");
		tolua_function(L, "getChar", &tolua_function_ConstCharString_getChar);
		tolua_function(L, "set", &tolua_function_ConstCharString_set);
		tolua_function(L, "setL", &tolua_function_ConstCharString_setL);
		tolua_function(L, "setReference", &tolua_function_ConstCharString_setReference);
		tolua_function(L, "pointTo", &tolua_function_ConstCharString_pointTo);
		tolua_function(L, "get", &tolua_function_ConstCharString_get);
		tolua_function(L, "free", &tolua_function_ConstCharString_free);
		tolua_constant(L, "sizeof", sizeof(ConstCharString));
	tolua_endmodule(L);
	tolua_cclass(L, "EngineGlobals", "EngineGlobals", {}, NULL);
	tolua_beginmodule(L, "EngineGlobals");
		tolua_function(L, "AssertionFailed", tolua_function_AssertionFailed);
		tolua_function(L, "GetDeviceBitDepth", tolua_function_GetDeviceBitDepth);
		tolua_function(L, "CoInitialize", tolua_function_CoInitialize);
		tolua_function(L, "CoUninitialize", tolua_function_CoUninitialize);
		tolua_function(L, "DispatchMessageA", tolua_function_DispatchMessageA);
		tolua_function(L, "GetCurrentThread", tolua_function_GetCurrentThread);
		tolua_function(L, "GetCursorPos", tolua_function_GetCursorPos);
		tolua_function(L, "GetMessageA", tolua_function_GetMessageA);
		tolua_function(L, "GetPrivateProfileIntA", tolua_function_GetPrivateProfileIntA);
		tolua_function(L, "GetTickCount", tolua_function_GetTickCount);
		tolua_function(L, "MessageBoxA", tolua_function_MessageBoxA);
		tolua_function(L, "PeekMessageA", tolua_function_PeekMessageA);
		tolua_function(L, "RegisterWindowMessageA", tolua_function_RegisterWindowMessageA);
		tolua_function(L, "SetThreadPriority", tolua_function_SetThreadPriority);
		tolua_function(L, "SuspendThread", tolua_function_SuspendThread);
		tolua_function(L, "TranslateMessage", tolua_function_TranslateMessage);
		tolua_variable(L, "g_pBaldurChitin", tolua_get_g_pBaldurChitin, tolua_set_g_pBaldurChitin);
		tolua_variable(L, "reference_g_pBaldurChitin", tolua_get_reference_g_pBaldurChitin, NULL);
		tolua_variable(L, "AsyncThreadLastTickStart", tolua_get_AsyncThreadLastTickStart, tolua_set_AsyncThreadLastTickStart);
		tolua_variable(L, "reference_AsyncThreadLastTickStart", tolua_get_reference_AsyncThreadLastTickStart, NULL);
		tolua_variable(L, "AsyncThreadTickDelta", tolua_get_AsyncThreadTickDelta, tolua_set_AsyncThreadTickDelta);
		tolua_variable(L, "reference_AsyncThreadTickDelta", tolua_get_reference_AsyncThreadTickDelta, NULL);
		tolua_variable(L, "MaximumFrameRate", tolua_get_MaximumFrameRate, tolua_set_MaximumFrameRate);
		tolua_variable(L, "reference_MaximumFrameRate", tolua_get_reference_MaximumFrameRate, NULL);
		tolua_variable(L, "ResolutionX", tolua_get_ResolutionX, tolua_set_ResolutionX);
		tolua_variable(L, "reference_ResolutionX", tolua_get_reference_ResolutionX, NULL);
		tolua_variable(L, "ResolutionY", tolua_get_ResolutionY, tolua_set_ResolutionY);
		tolua_variable(L, "reference_ResolutionY", tolua_get_reference_ResolutionY, NULL);
		tolua_variable(L, "reference_AssertionFailed", tolua_get_reference_AssertionFailed, NULL);
		tolua_variable(L, "reference_GetDeviceBitDepth", tolua_get_reference_GetDeviceBitDepth, NULL);
		tolua_variable(L, "reference_CoInitialize", tolua_get_reference_CoInitialize, NULL);
		tolua_variable(L, "reference_CoUninitialize", tolua_get_reference_CoUninitialize, NULL);
		tolua_variable(L, "reference_DispatchMessageA", tolua_get_reference_DispatchMessageA, NULL);
		tolua_variable(L, "reference_GetCurrentThread", tolua_get_reference_GetCurrentThread, NULL);
		tolua_variable(L, "reference_GetCursorPos", tolua_get_reference_GetCursorPos, NULL);
		tolua_variable(L, "reference_GetMessageA", tolua_get_reference_GetMessageA, NULL);
		tolua_variable(L, "reference_GetPrivateProfileIntA", tolua_get_reference_GetPrivateProfileIntA, NULL);
		tolua_variable(L, "reference_GetTickCount", tolua_get_reference_GetTickCount, NULL);
		tolua_variable(L, "reference_MessageBoxA", tolua_get_reference_MessageBoxA, NULL);
		tolua_variable(L, "reference_PeekMessageA", tolua_get_reference_PeekMessageA, NULL);
		tolua_variable(L, "reference_RegisterWindowMessageA", tolua_get_reference_RegisterWindowMessageA, NULL);
		tolua_variable(L, "reference_SetThreadPriority", tolua_get_reference_SetThreadPriority, NULL);
		tolua_variable(L, "reference_SuspendThread", tolua_get_reference_SuspendThread, NULL);
		tolua_variable(L, "reference_TranslateMessage", tolua_get_reference_TranslateMessage, NULL);
	tolua_endmodule(L);
	tolua_cclass(L, "CharString", "CharString", {}, NULL);
	tolua_beginmodule(L, "CharString");
		tolua_function(L, "getChar", &tolua_function_CharString_getChar);
		tolua_function(L, "setChar", &tolua_function_CharString_setChar);
		tolua_function(L, "set", &tolua_function_CharString_set);
		tolua_function(L, "setL", &tolua_function_CharString_setL);
		tolua_function(L, "write", &tolua_function_CharString_write);
		tolua_function(L, "writeL", &tolua_function_CharString_writeL);
		tolua_function(L, "setReference", &tolua_function_CharString_setReference);
		tolua_function(L, "pointTo", &tolua_function_CharString_pointTo);
		tolua_function(L, "get", &tolua_function_CharString_get);
		tolua_function(L, "getL", &tolua_function_CharString_getL);
		tolua_function(L, "free", &tolua_function_CharString_free);
		tolua_constant(L, "sizeof", sizeof(CharString));
	tolua_endmodule(L);
	tolua_cclass(L, "CRuntimeClass", "CRuntimeClass", {}, NULL);
	tolua_beginmodule(L, "CRuntimeClass");
		tolua_variable(L, "m_lpszClassName", tolua_get_CRuntimeClass_m_lpszClassName, NULL);
		tolua_variable(L, "m_nObjectSize", tolua_get_CRuntimeClass_m_nObjectSize, tolua_set_CRuntimeClass_m_nObjectSize);
		tolua_variable(L, "reference_m_nObjectSize", tolua_get_CRuntimeClass_reference_m_nObjectSize, NULL);
		tolua_constant(L, "sizeof", sizeof(CRuntimeClass));
	tolua_endmodule(L);
	tolua_cclass(L, "CUIControlBase", "CUIControlBase", {}, NULL);
	tolua_beginmodule(L, "CUIControlBase");
		tolua_variable(L, "m_pPanel", tolua_get_CUIControlBase_m_pPanel, tolua_set_CUIControlBase_m_pPanel);
		tolua_variable(L, "reference_m_pPanel", tolua_get_CUIControlBase_reference_m_pPanel, NULL);
		tolua_variable(L, "m_nId", tolua_get_CUIControlBase_m_nId, tolua_set_CUIControlBase_m_nId);
		tolua_variable(L, "reference_m_nId", tolua_get_CUIControlBase_reference_m_nId, NULL);
		tolua_variable(L, "m_nX", tolua_get_CUIControlBase_m_nX, tolua_set_CUIControlBase_m_nX);
		tolua_variable(L, "reference_m_nX", tolua_get_CUIControlBase_reference_m_nX, NULL);
		tolua_variable(L, "m_nY", tolua_get_CUIControlBase_m_nY, tolua_set_CUIControlBase_m_nY);
		tolua_variable(L, "reference_m_nY", tolua_get_CUIControlBase_reference_m_nY, NULL);
		tolua_variable(L, "m_nWidth", tolua_get_CUIControlBase_m_nWidth, tolua_set_CUIControlBase_m_nWidth);
		tolua_variable(L, "reference_m_nWidth", tolua_get_CUIControlBase_reference_m_nWidth, NULL);
		tolua_variable(L, "m_nHeight", tolua_get_CUIControlBase_m_nHeight, tolua_set_CUIControlBase_m_nHeight);
		tolua_variable(L, "reference_m_nHeight", tolua_get_CUIControlBase_reference_m_nHeight, NULL);
		tolua_variable(L, "m_bActive", tolua_get_CUIControlBase_m_bActive, tolua_set_CUIControlBase_m_bActive);
		tolua_variable(L, "reference_m_bActive", tolua_get_CUIControlBase_reference_m_bActive, NULL);
		tolua_variable(L, "m_bInactiveRender", tolua_get_CUIControlBase_m_bInactiveRender, tolua_set_CUIControlBase_m_bInactiveRender);
		tolua_variable(L, "reference_m_bInactiveRender", tolua_get_CUIControlBase_reference_m_bInactiveRender, NULL);
		tolua_variable(L, "m_nToolTipStrref", tolua_get_CUIControlBase_m_nToolTipStrref, tolua_set_CUIControlBase_m_nToolTipStrref);
		tolua_variable(L, "reference_m_nToolTipStrref", tolua_get_CUIControlBase_reference_m_nToolTipStrref, NULL);
		tolua_variable(L, "reference_CreateControl", tolua_get_reference_CUIControlBase_CreateControl, NULL);
		tolua_function(L, "CreateControl", &tolua_function_CUIControlBase_CreateControl);
		tolua_function(L, "virtual_VirtualDestruct", &tolua_function_CUIControlBase_virtual_VirtualDestruct);
		tolua_function(L, "virtual_NeedMouseMove", &tolua_function_CUIControlBase_virtual_NeedMouseMove);
		tolua_function(L, "virtual_OnLButtonUp", &tolua_function_CUIControlBase_virtual_OnLButtonUp);
		tolua_function(L, "virtual_KillFocus", &tolua_function_CUIControlBase_virtual_KillFocus);
		tolua_function(L, "virtual_OnMouseMove", &tolua_function_CUIControlBase_virtual_OnMouseMove);
		tolua_function(L, "virtual_OnLButtonDown", &tolua_function_CUIControlBase_virtual_OnLButtonDown);
		tolua_function(L, "virtual_OnLButtonUpWithCoords", &tolua_function_CUIControlBase_virtual_OnLButtonUpWithCoords);
		tolua_function(L, "virtual_OnLButtonDblClk", &tolua_function_CUIControlBase_virtual_OnLButtonDblClk);
		tolua_function(L, "virtual_OnRButtonDown", &tolua_function_CUIControlBase_virtual_OnRButtonDown);
		tolua_function(L, "virtual_OnRButtonUp", &tolua_function_CUIControlBase_virtual_OnRButtonUp);
		tolua_function(L, "virtual_OnKeyDown", &tolua_function_CUIControlBase_virtual_OnKeyDown);
		tolua_function(L, "virtual_TimerAsynchronousUpdate", &tolua_function_CUIControlBase_virtual_TimerAsynchronousUpdate);
		tolua_function(L, "virtual_GetTooltip", &tolua_function_CUIControlBase_virtual_GetTooltip);
		tolua_function(L, "virtual_Invalidate", &tolua_function_CUIControlBase_virtual_Invalidate);
		tolua_function(L, "virtual_Render", &tolua_function_CUIControlBase_virtual_Render);
		tolua_function(L, "virtual_NeedRender", &tolua_function_CUIControlBase_virtual_NeedRender);
		tolua_constant(L, "sizeof", sizeof(CUIControlBase));
	tolua_endmodule(L);
	tolua_cclass(L, "CUIControlBase::vtbl", "CUIControlBase::vtbl", {}, NULL);
	tolua_beginmodule(L, "CUIControlBase::vtbl");
		tolua_variable(L, "VirtualDestruct", tolua_get_CUIControlBase__vtbl_VirtualDestruct, tolua_set_CUIControlBase__vtbl_VirtualDestruct);
		tolua_variable(L, "reference_VirtualDestruct", tolua_get_CUIControlBase__vtbl_reference_VirtualDestruct, NULL);
		tolua_variable(L, "NeedMouseMove", tolua_get_CUIControlBase__vtbl_NeedMouseMove, tolua_set_CUIControlBase__vtbl_NeedMouseMove);
		tolua_variable(L, "reference_NeedMouseMove", tolua_get_CUIControlBase__vtbl_reference_NeedMouseMove, NULL);
		tolua_variable(L, "OnLButtonUp", tolua_get_CUIControlBase__vtbl_OnLButtonUp, tolua_set_CUIControlBase__vtbl_OnLButtonUp);
		tolua_variable(L, "reference_OnLButtonUp", tolua_get_CUIControlBase__vtbl_reference_OnLButtonUp, NULL);
		tolua_variable(L, "KillFocus", tolua_get_CUIControlBase__vtbl_KillFocus, tolua_set_CUIControlBase__vtbl_KillFocus);
		tolua_variable(L, "reference_KillFocus", tolua_get_CUIControlBase__vtbl_reference_KillFocus, NULL);
		tolua_variable(L, "OnMouseMove", tolua_get_CUIControlBase__vtbl_OnMouseMove, tolua_set_CUIControlBase__vtbl_OnMouseMove);
		tolua_variable(L, "reference_OnMouseMove", tolua_get_CUIControlBase__vtbl_reference_OnMouseMove, NULL);
		tolua_variable(L, "OnLButtonDown", tolua_get_CUIControlBase__vtbl_OnLButtonDown, tolua_set_CUIControlBase__vtbl_OnLButtonDown);
		tolua_variable(L, "reference_OnLButtonDown", tolua_get_CUIControlBase__vtbl_reference_OnLButtonDown, NULL);
		tolua_variable(L, "OnLButtonUpWithCoords", tolua_get_CUIControlBase__vtbl_OnLButtonUpWithCoords, tolua_set_CUIControlBase__vtbl_OnLButtonUpWithCoords);
		tolua_variable(L, "reference_OnLButtonUpWithCoords", tolua_get_CUIControlBase__vtbl_reference_OnLButtonUpWithCoords, NULL);
		tolua_variable(L, "OnLButtonDblClk", tolua_get_CUIControlBase__vtbl_OnLButtonDblClk, tolua_set_CUIControlBase__vtbl_OnLButtonDblClk);
		tolua_variable(L, "reference_OnLButtonDblClk", tolua_get_CUIControlBase__vtbl_reference_OnLButtonDblClk, NULL);
		tolua_variable(L, "OnRButtonDown", tolua_get_CUIControlBase__vtbl_OnRButtonDown, tolua_set_CUIControlBase__vtbl_OnRButtonDown);
		tolua_variable(L, "reference_OnRButtonDown", tolua_get_CUIControlBase__vtbl_reference_OnRButtonDown, NULL);
		tolua_variable(L, "OnRButtonUp", tolua_get_CUIControlBase__vtbl_OnRButtonUp, tolua_set_CUIControlBase__vtbl_OnRButtonUp);
		tolua_variable(L, "reference_OnRButtonUp", tolua_get_CUIControlBase__vtbl_reference_OnRButtonUp, NULL);
		tolua_variable(L, "OnKeyDown", tolua_get_CUIControlBase__vtbl_OnKeyDown, tolua_set_CUIControlBase__vtbl_OnKeyDown);
		tolua_variable(L, "reference_OnKeyDown", tolua_get_CUIControlBase__vtbl_reference_OnKeyDown, NULL);
		tolua_variable(L, "TimerAsynchronousUpdate", tolua_get_CUIControlBase__vtbl_TimerAsynchronousUpdate, tolua_set_CUIControlBase__vtbl_TimerAsynchronousUpdate);
		tolua_variable(L, "reference_TimerAsynchronousUpdate", tolua_get_CUIControlBase__vtbl_reference_TimerAsynchronousUpdate, NULL);
		tolua_variable(L, "GetTooltip", tolua_get_CUIControlBase__vtbl_GetTooltip, tolua_set_CUIControlBase__vtbl_GetTooltip);
		tolua_variable(L, "reference_GetTooltip", tolua_get_CUIControlBase__vtbl_reference_GetTooltip, NULL);
		tolua_variable(L, "Invalidate", tolua_get_CUIControlBase__vtbl_Invalidate, tolua_set_CUIControlBase__vtbl_Invalidate);
		tolua_variable(L, "reference_Invalidate", tolua_get_CUIControlBase__vtbl_reference_Invalidate, NULL);
		tolua_variable(L, "Render", tolua_get_CUIControlBase__vtbl_Render, tolua_set_CUIControlBase__vtbl_Render);
		tolua_variable(L, "reference_Render", tolua_get_CUIControlBase__vtbl_reference_Render, NULL);
		tolua_variable(L, "NeedRender", tolua_get_CUIControlBase__vtbl_NeedRender, tolua_set_CUIControlBase__vtbl_NeedRender);
		tolua_variable(L, "reference_NeedRender", tolua_get_CUIControlBase__vtbl_reference_NeedRender, NULL);
		tolua_constant(L, "sizeof", sizeof(CUIControlBase::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CString", "CString", {}, NULL);
	tolua_beginmodule(L, "CString");
		tolua_variable(L, "m_pchData", tolua_get_CString_m_pchData, NULL);
		tolua_function(L, "Construct", &tolua_function_CString_Construct);
		tolua_function(L, "Destruct", &tolua_function_CString_Destruct);
		tolua_function(L, "LoadStringA", &tolua_function_CString_LoadStringA);
		tolua_function(L, "SetFromChars", &tolua_function_CString_SetFromChars);
		tolua_constant(L, "sizeof", sizeof(CString));
	tolua_endmodule(L);
	tolua_cclass(L, "CSoundMixer", "CSoundMixer", {}, NULL);
	tolua_beginmodule(L, "CSoundMixer");
		tolua_variable(L, "m_nActiveArea", tolua_get_CSoundMixer_m_nActiveArea, tolua_set_CSoundMixer_m_nActiveArea);
		tolua_variable(L, "reference_m_nActiveArea", tolua_get_CSoundMixer_reference_m_nActiveArea, NULL);
		tolua_variable(L, "m_nCurrentSong", tolua_get_CSoundMixer_m_nCurrentSong, tolua_set_CSoundMixer_m_nCurrentSong);
		tolua_variable(L, "reference_m_nCurrentSong", tolua_get_CSoundMixer_reference_m_nCurrentSong, NULL);
		tolua_variable(L, "m_nLastSong", tolua_get_CSoundMixer_m_nLastSong, tolua_set_CSoundMixer_m_nLastSong);
		tolua_variable(L, "reference_m_nLastSong", tolua_get_CSoundMixer_reference_m_nLastSong, NULL);
		tolua_constant(L, "sizeof", sizeof(CSoundMixer));
	tolua_endmodule(L);
	tolua_cclass(L, "CSingleLock", "CSingleLock", {}, NULL);
	tolua_beginmodule(L, "CSingleLock");
		tolua_variable(L, "m_pObject", tolua_get_CSingleLock_m_pObject, tolua_set_CSingleLock_m_pObject);
		tolua_variable(L, "reference_m_pObject", tolua_get_CSingleLock_reference_m_pObject, NULL);
		tolua_variable(L, "m_hObject", tolua_get_CSingleLock_m_hObject, tolua_set_CSingleLock_m_hObject);
		tolua_variable(L, "reference_m_hObject", tolua_get_CSingleLock_reference_m_hObject, NULL);
		tolua_variable(L, "m_bAcquired", tolua_get_CSingleLock_m_bAcquired, tolua_set_CSingleLock_m_bAcquired);
		tolua_variable(L, "reference_m_bAcquired", tolua_get_CSingleLock_reference_m_bAcquired, NULL);
		tolua_function(L, "Construct", &tolua_function_CSingleLock_Construct);
		tolua_function(L, "Destruct", &tolua_function_CSingleLock_Destruct);
		tolua_function(L, "Lock", &tolua_function_CSingleLock_Lock);
		tolua_function(L, "Unlock", &tolua_function_CSingleLock_Unlock);
		tolua_constant(L, "sizeof", sizeof(CSingleLock));
	tolua_endmodule(L);
	tolua_cclass(L, "CObject", "CObject", {}, NULL);
	tolua_beginmodule(L, "CObject");
		tolua_function(L, "virtual_GetRuntimeClass", &tolua_function_CObject_virtual_GetRuntimeClass);
		tolua_function(L, "virtual_VirtualDestruct", &tolua_function_CObject_virtual_VirtualDestruct);
		tolua_function(L, "virtual_Serialize", &tolua_function_CObject_virtual_Serialize);
		tolua_constant(L, "sizeof", sizeof(CObject));
	tolua_endmodule(L);
	tolua_cclass(L, "CObject::vtbl", "CObject::vtbl", {}, NULL);
	tolua_beginmodule(L, "CObject::vtbl");
		tolua_variable(L, "GetRuntimeClass", tolua_get_CObject__vtbl_GetRuntimeClass, tolua_set_CObject__vtbl_GetRuntimeClass);
		tolua_variable(L, "reference_GetRuntimeClass", tolua_get_CObject__vtbl_reference_GetRuntimeClass, NULL);
		tolua_variable(L, "VirtualDestruct", tolua_get_CObject__vtbl_VirtualDestruct, tolua_set_CObject__vtbl_VirtualDestruct);
		tolua_variable(L, "reference_VirtualDestruct", tolua_get_CObject__vtbl_reference_VirtualDestruct, NULL);
		tolua_variable(L, "Serialize", tolua_get_CObject__vtbl_Serialize, tolua_set_CObject__vtbl_Serialize);
		tolua_variable(L, "reference_Serialize", tolua_get_CObject__vtbl_reference_Serialize, NULL);
		tolua_constant(L, "sizeof", sizeof(CObject::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CWarp", "CWarp", {"CObject"}, NULL);
	tolua_beginmodule(L, "CWarp");
		tolua_variable(L, "m_pVidMode", tolua_get_CWarp_m_pVidMode, tolua_set_CWarp_m_pVidMode);
		tolua_variable(L, "reference_m_pVidMode", tolua_get_CWarp_reference_m_pVidMode, NULL);
		tolua_variable(L, "m_pLastEngine", tolua_get_CWarp_m_pLastEngine, tolua_set_CWarp_m_pLastEngine);
		tolua_variable(L, "reference_m_pLastEngine", tolua_get_CWarp_reference_m_pLastEngine, NULL);
		tolua_variable(L, "lTimers", tolua_get_CWarp_lTimers, NULL);
		tolua_function(L, "virtual_EngineActivated", &tolua_function_CWarp_virtual_EngineActivated);
		tolua_function(L, "virtual_EngineDeactivated", &tolua_function_CWarp_virtual_EngineDeactivated);
		tolua_function(L, "virtual_EngineDestroyed", &tolua_function_CWarp_virtual_EngineDestroyed);
		tolua_function(L, "virtual_EngineInitialized", &tolua_function_CWarp_virtual_EngineInitialized);
		tolua_function(L, "virtual_EngineGameInit", &tolua_function_CWarp_virtual_EngineGameInit);
		tolua_function(L, "virtual_EngineGameUninit", &tolua_function_CWarp_virtual_EngineGameUninit);
		tolua_function(L, "virtual_SelectEngine", &tolua_function_CWarp_virtual_SelectEngine);
		tolua_function(L, "virtual_OnMouseMove", &tolua_function_CWarp_virtual_OnMouseMove);
		tolua_function(L, "virtual_CheckMouseLButton", &tolua_function_CWarp_virtual_CheckMouseLButton);
		tolua_function(L, "virtual_OnLButtonDblClk", &tolua_function_CWarp_virtual_OnLButtonDblClk);
		tolua_function(L, "virtual_OnLButtonDown", &tolua_function_CWarp_virtual_OnLButtonDown);
		tolua_function(L, "virtual_OnLButtonUp", &tolua_function_CWarp_virtual_OnLButtonUp);
		tolua_function(L, "virtual_CheckMouseRButton", &tolua_function_CWarp_virtual_CheckMouseRButton);
		tolua_function(L, "virtual_OnRButtonDblClk", &tolua_function_CWarp_virtual_OnRButtonDblClk);
		tolua_function(L, "virtual_OnRButtonDown", &tolua_function_CWarp_virtual_OnRButtonDown);
		tolua_function(L, "virtual_OnRButtonUp", &tolua_function_CWarp_virtual_OnRButtonUp);
		tolua_function(L, "virtual_GetNumVirtualKeys", &tolua_function_CWarp_virtual_GetNumVirtualKeys);
		tolua_function(L, "virtual_GetVirtualKeys", &tolua_function_CWarp_virtual_GetVirtualKeys);
		tolua_function(L, "virtual_GetVirtualKeysFlags", &tolua_function_CWarp_virtual_GetVirtualKeysFlags);
		tolua_function(L, "virtual_OnKeyDown", &tolua_function_CWarp_virtual_OnKeyDown);
		tolua_function(L, "virtual_TimerAsynchronousUpdate", &tolua_function_CWarp_virtual_TimerAsynchronousUpdate);
		tolua_function(L, "virtual_TimerSynchronousUpdate", &tolua_function_CWarp_virtual_TimerSynchronousUpdate);
		tolua_constant(L, "sizeof", sizeof(CWarp));
	tolua_endmodule(L);
	tolua_cclass(L, "CWarp::vtbl", "CWarp::vtbl", {"CObject::vtbl"}, NULL);
	tolua_beginmodule(L, "CWarp::vtbl");
		tolua_variable(L, "EngineActivated", tolua_get_CWarp__vtbl_EngineActivated, tolua_set_CWarp__vtbl_EngineActivated);
		tolua_variable(L, "reference_EngineActivated", tolua_get_CWarp__vtbl_reference_EngineActivated, NULL);
		tolua_variable(L, "EngineDeactivated", tolua_get_CWarp__vtbl_EngineDeactivated, tolua_set_CWarp__vtbl_EngineDeactivated);
		tolua_variable(L, "reference_EngineDeactivated", tolua_get_CWarp__vtbl_reference_EngineDeactivated, NULL);
		tolua_variable(L, "EngineDestroyed", tolua_get_CWarp__vtbl_EngineDestroyed, tolua_set_CWarp__vtbl_EngineDestroyed);
		tolua_variable(L, "reference_EngineDestroyed", tolua_get_CWarp__vtbl_reference_EngineDestroyed, NULL);
		tolua_variable(L, "EngineInitialized", tolua_get_CWarp__vtbl_EngineInitialized, tolua_set_CWarp__vtbl_EngineInitialized);
		tolua_variable(L, "reference_EngineInitialized", tolua_get_CWarp__vtbl_reference_EngineInitialized, NULL);
		tolua_variable(L, "EngineGameInit", tolua_get_CWarp__vtbl_EngineGameInit, tolua_set_CWarp__vtbl_EngineGameInit);
		tolua_variable(L, "reference_EngineGameInit", tolua_get_CWarp__vtbl_reference_EngineGameInit, NULL);
		tolua_variable(L, "EngineGameUninit", tolua_get_CWarp__vtbl_EngineGameUninit, tolua_set_CWarp__vtbl_EngineGameUninit);
		tolua_variable(L, "reference_EngineGameUninit", tolua_get_CWarp__vtbl_reference_EngineGameUninit, NULL);
		tolua_variable(L, "SelectEngine", tolua_get_CWarp__vtbl_SelectEngine, tolua_set_CWarp__vtbl_SelectEngine);
		tolua_variable(L, "reference_SelectEngine", tolua_get_CWarp__vtbl_reference_SelectEngine, NULL);
		tolua_variable(L, "OnMouseMove", tolua_get_CWarp__vtbl_OnMouseMove, tolua_set_CWarp__vtbl_OnMouseMove);
		tolua_variable(L, "reference_OnMouseMove", tolua_get_CWarp__vtbl_reference_OnMouseMove, NULL);
		tolua_variable(L, "CheckMouseLButton", tolua_get_CWarp__vtbl_CheckMouseLButton, tolua_set_CWarp__vtbl_CheckMouseLButton);
		tolua_variable(L, "reference_CheckMouseLButton", tolua_get_CWarp__vtbl_reference_CheckMouseLButton, NULL);
		tolua_variable(L, "OnLButtonDblClk", tolua_get_CWarp__vtbl_OnLButtonDblClk, tolua_set_CWarp__vtbl_OnLButtonDblClk);
		tolua_variable(L, "reference_OnLButtonDblClk", tolua_get_CWarp__vtbl_reference_OnLButtonDblClk, NULL);
		tolua_variable(L, "OnLButtonDown", tolua_get_CWarp__vtbl_OnLButtonDown, tolua_set_CWarp__vtbl_OnLButtonDown);
		tolua_variable(L, "reference_OnLButtonDown", tolua_get_CWarp__vtbl_reference_OnLButtonDown, NULL);
		tolua_variable(L, "OnLButtonUp", tolua_get_CWarp__vtbl_OnLButtonUp, tolua_set_CWarp__vtbl_OnLButtonUp);
		tolua_variable(L, "reference_OnLButtonUp", tolua_get_CWarp__vtbl_reference_OnLButtonUp, NULL);
		tolua_variable(L, "CheckMouseRButton", tolua_get_CWarp__vtbl_CheckMouseRButton, tolua_set_CWarp__vtbl_CheckMouseRButton);
		tolua_variable(L, "reference_CheckMouseRButton", tolua_get_CWarp__vtbl_reference_CheckMouseRButton, NULL);
		tolua_variable(L, "OnRButtonDblClk", tolua_get_CWarp__vtbl_OnRButtonDblClk, tolua_set_CWarp__vtbl_OnRButtonDblClk);
		tolua_variable(L, "reference_OnRButtonDblClk", tolua_get_CWarp__vtbl_reference_OnRButtonDblClk, NULL);
		tolua_variable(L, "OnRButtonDown", tolua_get_CWarp__vtbl_OnRButtonDown, tolua_set_CWarp__vtbl_OnRButtonDown);
		tolua_variable(L, "reference_OnRButtonDown", tolua_get_CWarp__vtbl_reference_OnRButtonDown, NULL);
		tolua_variable(L, "OnRButtonUp", tolua_get_CWarp__vtbl_OnRButtonUp, tolua_set_CWarp__vtbl_OnRButtonUp);
		tolua_variable(L, "reference_OnRButtonUp", tolua_get_CWarp__vtbl_reference_OnRButtonUp, NULL);
		tolua_variable(L, "GetNumVirtualKeys", tolua_get_CWarp__vtbl_GetNumVirtualKeys, tolua_set_CWarp__vtbl_GetNumVirtualKeys);
		tolua_variable(L, "reference_GetNumVirtualKeys", tolua_get_CWarp__vtbl_reference_GetNumVirtualKeys, NULL);
		tolua_variable(L, "GetVirtualKeys", tolua_get_CWarp__vtbl_GetVirtualKeys, tolua_set_CWarp__vtbl_GetVirtualKeys);
		tolua_variable(L, "reference_GetVirtualKeys", tolua_get_CWarp__vtbl_reference_GetVirtualKeys, NULL);
		tolua_variable(L, "GetVirtualKeysFlags", tolua_get_CWarp__vtbl_GetVirtualKeysFlags, tolua_set_CWarp__vtbl_GetVirtualKeysFlags);
		tolua_variable(L, "reference_GetVirtualKeysFlags", tolua_get_CWarp__vtbl_reference_GetVirtualKeysFlags, NULL);
		tolua_variable(L, "OnKeyDown", tolua_get_CWarp__vtbl_OnKeyDown, tolua_set_CWarp__vtbl_OnKeyDown);
		tolua_variable(L, "reference_OnKeyDown", tolua_get_CWarp__vtbl_reference_OnKeyDown, NULL);
		tolua_variable(L, "TimerAsynchronousUpdate", tolua_get_CWarp__vtbl_TimerAsynchronousUpdate, tolua_set_CWarp__vtbl_TimerAsynchronousUpdate);
		tolua_variable(L, "reference_TimerAsynchronousUpdate", tolua_get_CWarp__vtbl_reference_TimerAsynchronousUpdate, NULL);
		tolua_variable(L, "TimerSynchronousUpdate", tolua_get_CWarp__vtbl_TimerSynchronousUpdate, tolua_set_CWarp__vtbl_TimerSynchronousUpdate);
		tolua_variable(L, "reference_TimerSynchronousUpdate", tolua_get_CWarp__vtbl_reference_TimerSynchronousUpdate, NULL);
		tolua_constant(L, "sizeof", sizeof(CWarp::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,long>", "CTypedPtrList<CPtrList,long>", {"CObject"}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,long>");
		tolua_variable(L, "m_pNodeHead", tolua_get_CTypedPtrList_CPtrList_long__m_pNodeHead, tolua_set_CTypedPtrList_CPtrList_long__m_pNodeHead);
		tolua_variable(L, "reference_m_pNodeHead", tolua_get_CTypedPtrList_CPtrList_long__reference_m_pNodeHead, NULL);
		tolua_variable(L, "m_pNodeTail", tolua_get_CTypedPtrList_CPtrList_long__m_pNodeTail, tolua_set_CTypedPtrList_CPtrList_long__m_pNodeTail);
		tolua_variable(L, "reference_m_pNodeTail", tolua_get_CTypedPtrList_CPtrList_long__reference_m_pNodeTail, NULL);
		tolua_variable(L, "m_nCount", tolua_get_CTypedPtrList_CPtrList_long__m_nCount, tolua_set_CTypedPtrList_CPtrList_long__m_nCount);
		tolua_variable(L, "reference_m_nCount", tolua_get_CTypedPtrList_CPtrList_long__reference_m_nCount, NULL);
		tolua_variable(L, "m_pNodeFree", tolua_get_CTypedPtrList_CPtrList_long__m_pNodeFree, tolua_set_CTypedPtrList_CPtrList_long__m_pNodeFree);
		tolua_variable(L, "reference_m_pNodeFree", tolua_get_CTypedPtrList_CPtrList_long__reference_m_pNodeFree, NULL);
		tolua_variable(L, "m_pBlocks", tolua_get_CTypedPtrList_CPtrList_long__m_pBlocks, tolua_set_CTypedPtrList_CPtrList_long__m_pBlocks);
		tolua_variable(L, "reference_m_pBlocks", tolua_get_CTypedPtrList_CPtrList_long__reference_m_pBlocks, NULL);
		tolua_variable(L, "m_nBlockSize", tolua_get_CTypedPtrList_CPtrList_long__m_nBlockSize, tolua_set_CTypedPtrList_CPtrList_long__m_nBlockSize);
		tolua_variable(L, "reference_m_nBlockSize", tolua_get_CTypedPtrList_CPtrList_long__reference_m_nBlockSize, NULL);
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,long>));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,long>::CNode", "CTypedPtrList<CPtrList,long>::CNode", {}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,long>::CNode");
		tolua_variable(L, "m_pNext", tolua_get_CTypedPtrList_CPtrList_long___CNode_m_pNext, tolua_set_CTypedPtrList_CPtrList_long___CNode_m_pNext);
		tolua_variable(L, "reference_m_pNext", tolua_get_CTypedPtrList_CPtrList_long___CNode_reference_m_pNext, NULL);
		tolua_variable(L, "m_pPrev", tolua_get_CTypedPtrList_CPtrList_long___CNode_m_pPrev, tolua_set_CTypedPtrList_CPtrList_long___CNode_m_pPrev);
		tolua_variable(L, "reference_m_pPrev", tolua_get_CTypedPtrList_CPtrList_long___CNode_reference_m_pPrev, NULL);
		tolua_variable(L, "m_pData", tolua_get_CTypedPtrList_CPtrList_long___CNode_m_pData, tolua_set_CTypedPtrList_CPtrList_long___CNode_m_pData);
		tolua_variable(L, "reference_m_pData", tolua_get_CTypedPtrList_CPtrList_long___CNode_reference_m_pData, NULL);
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,long>::CNode));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,long>::vtbl", "CTypedPtrList<CPtrList,long>::vtbl", {"CObject::vtbl"}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,long>::vtbl");
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,long>::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,CWarp*>", "CTypedPtrList<CPtrList,CWarp*>", {"CObject"}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,CWarp*>");
		tolua_variable(L, "m_pNodeHead", tolua_get_CTypedPtrList_CPtrList_CWarp___m_pNodeHead, tolua_set_CTypedPtrList_CPtrList_CWarp___m_pNodeHead);
		tolua_variable(L, "reference_m_pNodeHead", tolua_get_CTypedPtrList_CPtrList_CWarp___reference_m_pNodeHead, NULL);
		tolua_variable(L, "m_pNodeTail", tolua_get_CTypedPtrList_CPtrList_CWarp___m_pNodeTail, tolua_set_CTypedPtrList_CPtrList_CWarp___m_pNodeTail);
		tolua_variable(L, "reference_m_pNodeTail", tolua_get_CTypedPtrList_CPtrList_CWarp___reference_m_pNodeTail, NULL);
		tolua_variable(L, "m_nCount", tolua_get_CTypedPtrList_CPtrList_CWarp___m_nCount, tolua_set_CTypedPtrList_CPtrList_CWarp___m_nCount);
		tolua_variable(L, "reference_m_nCount", tolua_get_CTypedPtrList_CPtrList_CWarp___reference_m_nCount, NULL);
		tolua_variable(L, "m_pNodeFree", tolua_get_CTypedPtrList_CPtrList_CWarp___m_pNodeFree, tolua_set_CTypedPtrList_CPtrList_CWarp___m_pNodeFree);
		tolua_variable(L, "reference_m_pNodeFree", tolua_get_CTypedPtrList_CPtrList_CWarp___reference_m_pNodeFree, NULL);
		tolua_variable(L, "m_pBlocks", tolua_get_CTypedPtrList_CPtrList_CWarp___m_pBlocks, tolua_set_CTypedPtrList_CPtrList_CWarp___m_pBlocks);
		tolua_variable(L, "reference_m_pBlocks", tolua_get_CTypedPtrList_CPtrList_CWarp___reference_m_pBlocks, NULL);
		tolua_variable(L, "m_nBlockSize", tolua_get_CTypedPtrList_CPtrList_CWarp___m_nBlockSize, tolua_set_CTypedPtrList_CPtrList_CWarp___m_nBlockSize);
		tolua_variable(L, "reference_m_nBlockSize", tolua_get_CTypedPtrList_CPtrList_CWarp___reference_m_nBlockSize, NULL);
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,CWarp*>));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,CWarp*>::CNode", "CTypedPtrList<CPtrList,CWarp*>::CNode", {}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,CWarp*>::CNode");
		tolua_variable(L, "m_pNext", tolua_get_CTypedPtrList_CPtrList_CWarp____CNode_m_pNext, tolua_set_CTypedPtrList_CPtrList_CWarp____CNode_m_pNext);
		tolua_variable(L, "reference_m_pNext", tolua_get_CTypedPtrList_CPtrList_CWarp____CNode_reference_m_pNext, NULL);
		tolua_variable(L, "m_pPrev", tolua_get_CTypedPtrList_CPtrList_CWarp____CNode_m_pPrev, tolua_set_CTypedPtrList_CPtrList_CWarp____CNode_m_pPrev);
		tolua_variable(L, "reference_m_pPrev", tolua_get_CTypedPtrList_CPtrList_CWarp____CNode_reference_m_pPrev, NULL);
		tolua_variable(L, "m_pData", tolua_get_CTypedPtrList_CPtrList_CWarp____CNode_m_pData, tolua_set_CTypedPtrList_CPtrList_CWarp____CNode_m_pData);
		tolua_variable(L, "reference_m_pData", tolua_get_CTypedPtrList_CPtrList_CWarp____CNode_reference_m_pData, NULL);
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,CWarp*>::CNode));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,CWarp*>::vtbl", "CTypedPtrList<CPtrList,CWarp*>::vtbl", {"CObject::vtbl"}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,CWarp*>::vtbl");
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,CWarp*>::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,CUIPanel*>", "CTypedPtrList<CPtrList,CUIPanel*>", {"CObject"}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,CUIPanel*>");
		tolua_variable(L, "m_pNodeHead", tolua_get_CTypedPtrList_CPtrList_CUIPanel___m_pNodeHead, tolua_set_CTypedPtrList_CPtrList_CUIPanel___m_pNodeHead);
		tolua_variable(L, "reference_m_pNodeHead", tolua_get_CTypedPtrList_CPtrList_CUIPanel___reference_m_pNodeHead, NULL);
		tolua_variable(L, "m_pNodeTail", tolua_get_CTypedPtrList_CPtrList_CUIPanel___m_pNodeTail, tolua_set_CTypedPtrList_CPtrList_CUIPanel___m_pNodeTail);
		tolua_variable(L, "reference_m_pNodeTail", tolua_get_CTypedPtrList_CPtrList_CUIPanel___reference_m_pNodeTail, NULL);
		tolua_variable(L, "m_nCount", tolua_get_CTypedPtrList_CPtrList_CUIPanel___m_nCount, tolua_set_CTypedPtrList_CPtrList_CUIPanel___m_nCount);
		tolua_variable(L, "reference_m_nCount", tolua_get_CTypedPtrList_CPtrList_CUIPanel___reference_m_nCount, NULL);
		tolua_variable(L, "m_pNodeFree", tolua_get_CTypedPtrList_CPtrList_CUIPanel___m_pNodeFree, tolua_set_CTypedPtrList_CPtrList_CUIPanel___m_pNodeFree);
		tolua_variable(L, "reference_m_pNodeFree", tolua_get_CTypedPtrList_CPtrList_CUIPanel___reference_m_pNodeFree, NULL);
		tolua_variable(L, "m_pBlocks", tolua_get_CTypedPtrList_CPtrList_CUIPanel___m_pBlocks, tolua_set_CTypedPtrList_CPtrList_CUIPanel___m_pBlocks);
		tolua_variable(L, "reference_m_pBlocks", tolua_get_CTypedPtrList_CPtrList_CUIPanel___reference_m_pBlocks, NULL);
		tolua_variable(L, "m_nBlockSize", tolua_get_CTypedPtrList_CPtrList_CUIPanel___m_nBlockSize, tolua_set_CTypedPtrList_CPtrList_CUIPanel___m_nBlockSize);
		tolua_variable(L, "reference_m_nBlockSize", tolua_get_CTypedPtrList_CPtrList_CUIPanel___reference_m_nBlockSize, NULL);
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,CUIPanel*>));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,CUIPanel*>::CNode", "CTypedPtrList<CPtrList,CUIPanel*>::CNode", {}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,CUIPanel*>::CNode");
		tolua_variable(L, "m_pNext", tolua_get_CTypedPtrList_CPtrList_CUIPanel____CNode_m_pNext, tolua_set_CTypedPtrList_CPtrList_CUIPanel____CNode_m_pNext);
		tolua_variable(L, "reference_m_pNext", tolua_get_CTypedPtrList_CPtrList_CUIPanel____CNode_reference_m_pNext, NULL);
		tolua_variable(L, "m_pPrev", tolua_get_CTypedPtrList_CPtrList_CUIPanel____CNode_m_pPrev, tolua_set_CTypedPtrList_CPtrList_CUIPanel____CNode_m_pPrev);
		tolua_variable(L, "reference_m_pPrev", tolua_get_CTypedPtrList_CPtrList_CUIPanel____CNode_reference_m_pPrev, NULL);
		tolua_variable(L, "m_pData", tolua_get_CTypedPtrList_CPtrList_CUIPanel____CNode_m_pData, tolua_set_CTypedPtrList_CPtrList_CUIPanel____CNode_m_pData);
		tolua_variable(L, "reference_m_pData", tolua_get_CTypedPtrList_CPtrList_CUIPanel____CNode_reference_m_pData, NULL);
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,CUIPanel*>::CNode));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,CUIPanel*>::vtbl", "CTypedPtrList<CPtrList,CUIPanel*>::vtbl", {"CObject::vtbl"}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,CUIPanel*>::vtbl");
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,CUIPanel*>::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,CUIControlBase*>", "CTypedPtrList<CPtrList,CUIControlBase*>", {"CObject"}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,CUIControlBase*>");
		tolua_variable(L, "m_pNodeHead", tolua_get_CTypedPtrList_CPtrList_CUIControlBase___m_pNodeHead, tolua_set_CTypedPtrList_CPtrList_CUIControlBase___m_pNodeHead);
		tolua_variable(L, "reference_m_pNodeHead", tolua_get_CTypedPtrList_CPtrList_CUIControlBase___reference_m_pNodeHead, NULL);
		tolua_variable(L, "m_pNodeTail", tolua_get_CTypedPtrList_CPtrList_CUIControlBase___m_pNodeTail, tolua_set_CTypedPtrList_CPtrList_CUIControlBase___m_pNodeTail);
		tolua_variable(L, "reference_m_pNodeTail", tolua_get_CTypedPtrList_CPtrList_CUIControlBase___reference_m_pNodeTail, NULL);
		tolua_variable(L, "m_nCount", tolua_get_CTypedPtrList_CPtrList_CUIControlBase___m_nCount, tolua_set_CTypedPtrList_CPtrList_CUIControlBase___m_nCount);
		tolua_variable(L, "reference_m_nCount", tolua_get_CTypedPtrList_CPtrList_CUIControlBase___reference_m_nCount, NULL);
		tolua_variable(L, "m_pNodeFree", tolua_get_CTypedPtrList_CPtrList_CUIControlBase___m_pNodeFree, tolua_set_CTypedPtrList_CPtrList_CUIControlBase___m_pNodeFree);
		tolua_variable(L, "reference_m_pNodeFree", tolua_get_CTypedPtrList_CPtrList_CUIControlBase___reference_m_pNodeFree, NULL);
		tolua_variable(L, "m_pBlocks", tolua_get_CTypedPtrList_CPtrList_CUIControlBase___m_pBlocks, tolua_set_CTypedPtrList_CPtrList_CUIControlBase___m_pBlocks);
		tolua_variable(L, "reference_m_pBlocks", tolua_get_CTypedPtrList_CPtrList_CUIControlBase___reference_m_pBlocks, NULL);
		tolua_variable(L, "m_nBlockSize", tolua_get_CTypedPtrList_CPtrList_CUIControlBase___m_nBlockSize, tolua_set_CTypedPtrList_CPtrList_CUIControlBase___m_nBlockSize);
		tolua_variable(L, "reference_m_nBlockSize", tolua_get_CTypedPtrList_CPtrList_CUIControlBase___reference_m_nBlockSize, NULL);
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,CUIControlBase*>));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode", "CTypedPtrList<CPtrList,CUIControlBase*>::CNode", {}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,CUIControlBase*>::CNode");
		tolua_variable(L, "m_pNext", tolua_get_CTypedPtrList_CPtrList_CUIControlBase____CNode_m_pNext, tolua_set_CTypedPtrList_CPtrList_CUIControlBase____CNode_m_pNext);
		tolua_variable(L, "reference_m_pNext", tolua_get_CTypedPtrList_CPtrList_CUIControlBase____CNode_reference_m_pNext, NULL);
		tolua_variable(L, "m_pPrev", tolua_get_CTypedPtrList_CPtrList_CUIControlBase____CNode_m_pPrev, tolua_set_CTypedPtrList_CPtrList_CUIControlBase____CNode_m_pPrev);
		tolua_variable(L, "reference_m_pPrev", tolua_get_CTypedPtrList_CPtrList_CUIControlBase____CNode_reference_m_pPrev, NULL);
		tolua_variable(L, "m_pData", tolua_get_CTypedPtrList_CPtrList_CUIControlBase____CNode_m_pData, tolua_set_CTypedPtrList_CPtrList_CUIControlBase____CNode_m_pData);
		tolua_variable(L, "reference_m_pData", tolua_get_CTypedPtrList_CPtrList_CUIControlBase____CNode_reference_m_pData, NULL);
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,CUIControlBase*>::CNode));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,CUIControlBase*>::vtbl", "CTypedPtrList<CPtrList,CUIControlBase*>::vtbl", {"CObject::vtbl"}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,CUIControlBase*>::vtbl");
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,CUIControlBase*>::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,CGameEffect*>", "CTypedPtrList<CPtrList,CGameEffect*>", {"CObject"}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,CGameEffect*>");
		tolua_variable(L, "m_pNodeHead", tolua_get_CTypedPtrList_CPtrList_CGameEffect___m_pNodeHead, tolua_set_CTypedPtrList_CPtrList_CGameEffect___m_pNodeHead);
		tolua_variable(L, "reference_m_pNodeHead", tolua_get_CTypedPtrList_CPtrList_CGameEffect___reference_m_pNodeHead, NULL);
		tolua_variable(L, "m_pNodeTail", tolua_get_CTypedPtrList_CPtrList_CGameEffect___m_pNodeTail, tolua_set_CTypedPtrList_CPtrList_CGameEffect___m_pNodeTail);
		tolua_variable(L, "reference_m_pNodeTail", tolua_get_CTypedPtrList_CPtrList_CGameEffect___reference_m_pNodeTail, NULL);
		tolua_variable(L, "m_nCount", tolua_get_CTypedPtrList_CPtrList_CGameEffect___m_nCount, tolua_set_CTypedPtrList_CPtrList_CGameEffect___m_nCount);
		tolua_variable(L, "reference_m_nCount", tolua_get_CTypedPtrList_CPtrList_CGameEffect___reference_m_nCount, NULL);
		tolua_variable(L, "m_pNodeFree", tolua_get_CTypedPtrList_CPtrList_CGameEffect___m_pNodeFree, tolua_set_CTypedPtrList_CPtrList_CGameEffect___m_pNodeFree);
		tolua_variable(L, "reference_m_pNodeFree", tolua_get_CTypedPtrList_CPtrList_CGameEffect___reference_m_pNodeFree, NULL);
		tolua_variable(L, "m_pBlocks", tolua_get_CTypedPtrList_CPtrList_CGameEffect___m_pBlocks, tolua_set_CTypedPtrList_CPtrList_CGameEffect___m_pBlocks);
		tolua_variable(L, "reference_m_pBlocks", tolua_get_CTypedPtrList_CPtrList_CGameEffect___reference_m_pBlocks, NULL);
		tolua_variable(L, "m_nBlockSize", tolua_get_CTypedPtrList_CPtrList_CGameEffect___m_nBlockSize, tolua_set_CTypedPtrList_CPtrList_CGameEffect___m_nBlockSize);
		tolua_variable(L, "reference_m_nBlockSize", tolua_get_CTypedPtrList_CPtrList_CGameEffect___reference_m_nBlockSize, NULL);
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,CGameEffect*>));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,CGameEffect*>::CNode", "CTypedPtrList<CPtrList,CGameEffect*>::CNode", {}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,CGameEffect*>::CNode");
		tolua_variable(L, "m_pNext", tolua_get_CTypedPtrList_CPtrList_CGameEffect____CNode_m_pNext, tolua_set_CTypedPtrList_CPtrList_CGameEffect____CNode_m_pNext);
		tolua_variable(L, "reference_m_pNext", tolua_get_CTypedPtrList_CPtrList_CGameEffect____CNode_reference_m_pNext, NULL);
		tolua_variable(L, "m_pPrev", tolua_get_CTypedPtrList_CPtrList_CGameEffect____CNode_m_pPrev, tolua_set_CTypedPtrList_CPtrList_CGameEffect____CNode_m_pPrev);
		tolua_variable(L, "reference_m_pPrev", tolua_get_CTypedPtrList_CPtrList_CGameEffect____CNode_reference_m_pPrev, NULL);
		tolua_variable(L, "m_pData", tolua_get_CTypedPtrList_CPtrList_CGameEffect____CNode_m_pData, tolua_set_CTypedPtrList_CPtrList_CGameEffect____CNode_m_pData);
		tolua_variable(L, "reference_m_pData", tolua_get_CTypedPtrList_CPtrList_CGameEffect____CNode_reference_m_pData, NULL);
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,CGameEffect*>::CNode));
	tolua_endmodule(L);
	tolua_cclass(L, "CTypedPtrList<CPtrList,CGameEffect*>::vtbl", "CTypedPtrList<CPtrList,CGameEffect*>::vtbl", {"CObject::vtbl"}, NULL);
	tolua_beginmodule(L, "CTypedPtrList<CPtrList,CGameEffect*>::vtbl");
		tolua_constant(L, "sizeof", sizeof(CTypedPtrList<CPtrList,CGameEffect*>::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameEffectList", "CGameEffectList", {"CTypedPtrList<CPtrList,CGameEffect*>"}, NULL);
	tolua_beginmodule(L, "CGameEffectList");
		tolua_variable(L, "m_posNext", tolua_get_CGameEffectList_m_posNext, tolua_set_CGameEffectList_m_posNext);
		tolua_variable(L, "reference_m_posNext", tolua_get_CGameEffectList_reference_m_posNext, NULL);
		tolua_variable(L, "m_posCurrent", tolua_get_CGameEffectList_m_posCurrent, tolua_set_CGameEffectList_m_posCurrent);
		tolua_variable(L, "reference_m_posCurrent", tolua_get_CGameEffectList_reference_m_posCurrent, NULL);
		tolua_variable(L, "m_newEffect", tolua_get_CGameEffectList_m_newEffect, tolua_set_CGameEffectList_m_newEffect);
		tolua_variable(L, "reference_m_newEffect", tolua_get_CGameEffectList_reference_m_newEffect, NULL);
		tolua_variable(L, "m_retry", tolua_get_CGameEffectList_m_retry, tolua_set_CGameEffectList_m_retry);
		tolua_variable(L, "reference_m_retry", tolua_get_CGameEffectList_reference_m_retry, NULL);
		tolua_constant(L, "sizeof", sizeof(CGameEffectList));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameEffectList::vtbl", "CGameEffectList::vtbl", {"CTypedPtrList<CPtrList,CGameEffect*>::vtbl"}, NULL);
	tolua_beginmodule(L, "CGameEffectList::vtbl");
		tolua_constant(L, "sizeof", sizeof(CGameEffectList::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CSyncObject", "CSyncObject", {"CObject"}, NULL);
	tolua_beginmodule(L, "CSyncObject");
		tolua_variable(L, "m_hObject", tolua_get_CSyncObject_m_hObject, tolua_set_CSyncObject_m_hObject);
		tolua_variable(L, "reference_m_hObject", tolua_get_CSyncObject_reference_m_hObject, NULL);
		tolua_function(L, "virtual_Lock", &tolua_function_CSyncObject_virtual_Lock);
		tolua_function(L, "virtual_Unlock", &tolua_function_CSyncObject_virtual_Unlock);
		tolua_function(L, "virtual_Unlock_2", &tolua_function_CSyncObject_virtual_Unlock_2);
		tolua_constant(L, "sizeof", sizeof(CSyncObject));
	tolua_endmodule(L);
	tolua_cclass(L, "CSyncObject::vtbl", "CSyncObject::vtbl", {"CObject::vtbl"}, NULL);
	tolua_beginmodule(L, "CSyncObject::vtbl");
		tolua_variable(L, "Lock", tolua_get_CSyncObject__vtbl_Lock, tolua_set_CSyncObject__vtbl_Lock);
		tolua_variable(L, "reference_Lock", tolua_get_CSyncObject__vtbl_reference_Lock, NULL);
		tolua_variable(L, "Unlock", tolua_get_CSyncObject__vtbl_Unlock, tolua_set_CSyncObject__vtbl_Unlock);
		tolua_variable(L, "reference_Unlock", tolua_get_CSyncObject__vtbl_reference_Unlock, NULL);
		tolua_variable(L, "Unlock_2", tolua_get_CSyncObject__vtbl_Unlock_2, tolua_set_CSyncObject__vtbl_Unlock_2);
		tolua_variable(L, "reference_Unlock_2", tolua_get_CSyncObject__vtbl_reference_Unlock_2, NULL);
		tolua_constant(L, "sizeof", sizeof(CSyncObject::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameObjectArray", "CGameObjectArray", {}, NULL);
	tolua_beginmodule(L, "CGameObjectArray");
		tolua_variable(L, "m_lock", tolua_get_CGameObjectArray_m_lock, NULL);
		tolua_variable(L, "m_pArray", tolua_get_CGameObjectArray_m_pArray, tolua_set_CGameObjectArray_m_pArray);
		tolua_variable(L, "reference_m_pArray", tolua_get_CGameObjectArray_reference_m_pArray, NULL);
		tolua_variable(L, "m_nArray", tolua_get_CGameObjectArray_m_nArray, tolua_set_CGameObjectArray_m_nArray);
		tolua_variable(L, "reference_m_nArray", tolua_get_CGameObjectArray_reference_m_nArray, NULL);
		tolua_variable(L, "m_maxArrayIndex", tolua_get_CGameObjectArray_m_maxArrayIndex, tolua_set_CGameObjectArray_m_maxArrayIndex);
		tolua_variable(L, "reference_m_maxArrayIndex", tolua_get_CGameObjectArray_reference_m_maxArrayIndex, NULL);
		tolua_variable(L, "m_nextObjectId", tolua_get_CGameObjectArray_m_nextObjectId, tolua_set_CGameObjectArray_m_nextObjectId);
		tolua_variable(L, "reference_m_nextObjectId", tolua_get_CGameObjectArray_reference_m_nextObjectId, NULL);
		tolua_constant(L, "sizeof", sizeof(CGameObjectArray));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidMode", "CVidMode", {}, NULL);
	tolua_beginmodule(L, "CVidMode");
		tolua_variable(L, "m_bNonVideoMemoryFullscreen", tolua_get_CVidMode_m_bNonVideoMemoryFullscreen, tolua_set_CVidMode_m_bNonVideoMemoryFullscreen);
		tolua_variable(L, "reference_m_bNonVideoMemoryFullscreen", tolua_get_CVidMode_reference_m_bNonVideoMemoryFullscreen, NULL);
		tolua_variable(L, "m_bScreenshotQueued", tolua_get_CVidMode_m_bScreenshotQueued, tolua_set_CVidMode_m_bScreenshotQueued);
		tolua_variable(L, "reference_m_bScreenshotQueued", tolua_get_CVidMode_reference_m_bScreenshotQueued, NULL);
		tolua_variable(L, "m_pTexSurfaces", tolua_get_CVidMode_m_pTexSurfaces, tolua_set_CVidMode_m_pTexSurfaces);
		tolua_variable(L, "reference_m_pTexSurfaces", tolua_get_CVidMode_reference_m_pTexSurfaces, NULL);
		tolua_variable(L, "m_rgbGlobalTint", tolua_get_CVidMode_m_rgbGlobalTint, tolua_set_CVidMode_m_rgbGlobalTint);
		tolua_variable(L, "reference_m_rgbGlobalTint", tolua_get_CVidMode_reference_m_rgbGlobalTint, NULL);
		tolua_variable(L, "m_nRedBitOffset", tolua_get_CVidMode_m_nRedBitOffset, tolua_set_CVidMode_m_nRedBitOffset);
		tolua_variable(L, "reference_m_nRedBitOffset", tolua_get_CVidMode_reference_m_nRedBitOffset, NULL);
		tolua_variable(L, "m_nGreenBitOffset", tolua_get_CVidMode_m_nGreenBitOffset, tolua_set_CVidMode_m_nGreenBitOffset);
		tolua_variable(L, "reference_m_nGreenBitOffset", tolua_get_CVidMode_reference_m_nGreenBitOffset, NULL);
		tolua_variable(L, "m_nBlueBitOffset", tolua_get_CVidMode_m_nBlueBitOffset, tolua_set_CVidMode_m_nBlueBitOffset);
		tolua_variable(L, "reference_m_nBlueBitOffset", tolua_get_CVidMode_reference_m_nBlueBitOffset, NULL);
		tolua_function(L, "CheckBltResult", &tolua_function_CVidMode_CheckBltResult);
		tolua_function(L, "LockTexSurface", &tolua_function_CVidMode_LockTexSurface);
		tolua_function(L, "UnlockTexSurface", &tolua_function_CVidMode_UnlockTexSurface);
		tolua_function(L, "virtual_Screenshot", &tolua_function_CVidMode_virtual_Screenshot);
		tolua_function(L, "virtual_Select", &tolua_function_CVidMode_virtual_Select);
		tolua_function(L, "virtual_SetClipper", &tolua_function_CVidMode_virtual_SetClipper);
		tolua_function(L, "virtual_SetupTexSurfaces", &tolua_function_CVidMode_virtual_SetupTexSurfaces);
		tolua_function(L, "virtual_RenderDebugTimes", &tolua_function_CVidMode_virtual_RenderDebugTimes);
		tolua_function(L, "virtual_Blt", &tolua_function_CVidMode_virtual_Blt);
		tolua_function(L, "virtual_Blt16", &tolua_function_CVidMode_virtual_Blt16);
		tolua_function(L, "virtual_Blt24", &tolua_function_CVidMode_virtual_Blt24);
		tolua_function(L, "virtual_Blt32", &tolua_function_CVidMode_virtual_Blt32);
		tolua_function(L, "virtual_FlipBuffers", &tolua_function_CVidMode_virtual_FlipBuffers);
		tolua_function(L, "virtual_GetResolution", &tolua_function_CVidMode_virtual_GetResolution);
		tolua_function(L, "virtual_PreventSurfacesChange", &tolua_function_CVidMode_virtual_PreventSurfacesChange);
		tolua_function(L, "virtual_RenderCursorToSurface", &tolua_function_CVidMode_virtual_RenderCursorToSurface);
		tolua_function(L, "virtual_RenderCursor", &tolua_function_CVidMode_virtual_RenderCursor);
		tolua_function(L, "virtual_RestoreSurfaces", &tolua_function_CVidMode_virtual_RestoreSurfaces);
		tolua_function(L, "virtual_ConvertSurfaceToBmp", &tolua_function_CVidMode_virtual_ConvertSurfaceToBmp);
		tolua_constant(L, "sizeof", sizeof(CVidMode));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidMode::vtbl", "CVidMode::vtbl", {}, NULL);
	tolua_beginmodule(L, "CVidMode::vtbl");
		tolua_variable(L, "Screenshot", tolua_get_CVidMode__vtbl_Screenshot, tolua_set_CVidMode__vtbl_Screenshot);
		tolua_variable(L, "reference_Screenshot", tolua_get_CVidMode__vtbl_reference_Screenshot, NULL);
		tolua_variable(L, "Select", tolua_get_CVidMode__vtbl_Select, tolua_set_CVidMode__vtbl_Select);
		tolua_variable(L, "reference_Select", tolua_get_CVidMode__vtbl_reference_Select, NULL);
		tolua_variable(L, "SetClipper", tolua_get_CVidMode__vtbl_SetClipper, tolua_set_CVidMode__vtbl_SetClipper);
		tolua_variable(L, "reference_SetClipper", tolua_get_CVidMode__vtbl_reference_SetClipper, NULL);
		tolua_variable(L, "SetupTexSurfaces", tolua_get_CVidMode__vtbl_SetupTexSurfaces, tolua_set_CVidMode__vtbl_SetupTexSurfaces);
		tolua_variable(L, "reference_SetupTexSurfaces", tolua_get_CVidMode__vtbl_reference_SetupTexSurfaces, NULL);
		tolua_variable(L, "RenderDebugTimes", tolua_get_CVidMode__vtbl_RenderDebugTimes, tolua_set_CVidMode__vtbl_RenderDebugTimes);
		tolua_variable(L, "reference_RenderDebugTimes", tolua_get_CVidMode__vtbl_reference_RenderDebugTimes, NULL);
		tolua_variable(L, "Blt", tolua_get_CVidMode__vtbl_Blt, tolua_set_CVidMode__vtbl_Blt);
		tolua_variable(L, "reference_Blt", tolua_get_CVidMode__vtbl_reference_Blt, NULL);
		tolua_variable(L, "Blt16", tolua_get_CVidMode__vtbl_Blt16, tolua_set_CVidMode__vtbl_Blt16);
		tolua_variable(L, "reference_Blt16", tolua_get_CVidMode__vtbl_reference_Blt16, NULL);
		tolua_variable(L, "Blt24", tolua_get_CVidMode__vtbl_Blt24, tolua_set_CVidMode__vtbl_Blt24);
		tolua_variable(L, "reference_Blt24", tolua_get_CVidMode__vtbl_reference_Blt24, NULL);
		tolua_variable(L, "Blt32", tolua_get_CVidMode__vtbl_Blt32, tolua_set_CVidMode__vtbl_Blt32);
		tolua_variable(L, "reference_Blt32", tolua_get_CVidMode__vtbl_reference_Blt32, NULL);
		tolua_variable(L, "FlipBuffers", tolua_get_CVidMode__vtbl_FlipBuffers, tolua_set_CVidMode__vtbl_FlipBuffers);
		tolua_variable(L, "reference_FlipBuffers", tolua_get_CVidMode__vtbl_reference_FlipBuffers, NULL);
		tolua_variable(L, "GetResolution", tolua_get_CVidMode__vtbl_GetResolution, tolua_set_CVidMode__vtbl_GetResolution);
		tolua_variable(L, "reference_GetResolution", tolua_get_CVidMode__vtbl_reference_GetResolution, NULL);
		tolua_variable(L, "PreventSurfacesChange", tolua_get_CVidMode__vtbl_PreventSurfacesChange, tolua_set_CVidMode__vtbl_PreventSurfacesChange);
		tolua_variable(L, "reference_PreventSurfacesChange", tolua_get_CVidMode__vtbl_reference_PreventSurfacesChange, NULL);
		tolua_variable(L, "RenderCursorToSurface", tolua_get_CVidMode__vtbl_RenderCursorToSurface, tolua_set_CVidMode__vtbl_RenderCursorToSurface);
		tolua_variable(L, "reference_RenderCursorToSurface", tolua_get_CVidMode__vtbl_reference_RenderCursorToSurface, NULL);
		tolua_variable(L, "RenderCursor", tolua_get_CVidMode__vtbl_RenderCursor, tolua_set_CVidMode__vtbl_RenderCursor);
		tolua_variable(L, "reference_RenderCursor", tolua_get_CVidMode__vtbl_reference_RenderCursor, NULL);
		tolua_variable(L, "RestoreSurfaces", tolua_get_CVidMode__vtbl_RestoreSurfaces, tolua_set_CVidMode__vtbl_RestoreSurfaces);
		tolua_variable(L, "reference_RestoreSurfaces", tolua_get_CVidMode__vtbl_reference_RestoreSurfaces, NULL);
		tolua_variable(L, "ConvertSurfaceToBmp", tolua_get_CVidMode__vtbl_ConvertSurfaceToBmp, tolua_set_CVidMode__vtbl_ConvertSurfaceToBmp);
		tolua_variable(L, "reference_ConvertSurfaceToBmp", tolua_get_CVidMode__vtbl_reference_ConvertSurfaceToBmp, NULL);
		tolua_constant(L, "sizeof", sizeof(CVidMode::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidMode3", "CVidMode3", {"CVidMode"}, NULL);
	tolua_beginmodule(L, "CVidMode3");
		tolua_constant(L, "sizeof", sizeof(CVidMode3));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidMode3::vtbl", "CVidMode3::vtbl", {"CVidMode::vtbl"}, NULL);
	tolua_beginmodule(L, "CVidMode3::vtbl");
		tolua_constant(L, "sizeof", sizeof(CVidMode3::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidMode2", "CVidMode2", {"CVidMode"}, NULL);
	tolua_beginmodule(L, "CVidMode2");
		tolua_constant(L, "sizeof", sizeof(CVidMode2));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidMode2::vtbl", "CVidMode2::vtbl", {"CVidMode::vtbl"}, NULL);
	tolua_beginmodule(L, "CVidMode2::vtbl");
		tolua_constant(L, "sizeof", sizeof(CVidMode2::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidMode1", "CVidMode1", {"CVidMode"}, NULL);
	tolua_beginmodule(L, "CVidMode1");
		tolua_constant(L, "sizeof", sizeof(CVidMode1));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidMode1::vtbl", "CVidMode1::vtbl", {"CVidMode::vtbl"}, NULL);
	tolua_beginmodule(L, "CVidMode1::vtbl");
		tolua_constant(L, "sizeof", sizeof(CVidMode1::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidMode0", "CVidMode0", {"CVidMode"}, NULL);
	tolua_beginmodule(L, "CVidMode0");
		tolua_function(L, "Export_Override_ConvertSurfaceToBmp", &tolua_function_CVidMode0_Export_Override_ConvertSurfaceToBmp);
		tolua_constant(L, "sizeof", sizeof(CVidMode0));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidMode0::vtbl", "CVidMode0::vtbl", {"CVidMode::vtbl"}, NULL);
	tolua_beginmodule(L, "CVidMode0::vtbl");
		tolua_constant(L, "sizeof", sizeof(CVidMode0::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CCriticalSection", "CCriticalSection", {"CSyncObject"}, NULL);
	tolua_beginmodule(L, "CCriticalSection");
		tolua_variable(L, "m_sect", tolua_get_CCriticalSection_m_sect, NULL);
		tolua_constant(L, "sizeof", sizeof(CCriticalSection));
	tolua_endmodule(L);
	tolua_cclass(L, "CCriticalSection::vtbl", "CCriticalSection::vtbl", {"CSyncObject::vtbl"}, NULL);
	tolua_beginmodule(L, "CCriticalSection::vtbl");
		tolua_constant(L, "sizeof", sizeof(CCriticalSection::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CRes", "CRes", {"CObject"}, NULL);
	tolua_beginmodule(L, "CRes");
		tolua_variable(L, "m_nResFlags", tolua_get_CRes_m_nResFlags, tolua_set_CRes_m_nResFlags);
		tolua_variable(L, "reference_m_nResFlags", tolua_get_CRes_reference_m_nResFlags, NULL);
		tolua_variable(L, "m_pViewBase", tolua_get_CRes_m_pViewBase, tolua_set_CRes_m_pViewBase);
		tolua_variable(L, "reference_m_pViewBase", tolua_get_CRes_reference_m_pViewBase, NULL);
		tolua_variable(L, "m_myPriorityList", tolua_get_CRes_m_myPriorityList, tolua_set_CRes_m_myPriorityList);
		tolua_variable(L, "reference_m_myPriorityList", tolua_get_CRes_reference_m_myPriorityList, NULL);
		tolua_variable(L, "m_pHashEntry", tolua_get_CRes_m_pHashEntry, tolua_set_CRes_m_pHashEntry);
		tolua_variable(L, "reference_m_pHashEntry", tolua_get_CRes_reference_m_pHashEntry, NULL);
		tolua_variable(L, "m_nDemands", tolua_get_CRes_m_nDemands, tolua_set_CRes_m_nDemands);
		tolua_variable(L, "reference_m_nDemands", tolua_get_CRes_reference_m_nDemands, NULL);
		tolua_variable(L, "m_nRequests", tolua_get_CRes_m_nRequests, tolua_set_CRes_m_nRequests);
		tolua_variable(L, "reference_m_nRequests", tolua_get_CRes_reference_m_nRequests, NULL);
		tolua_variable(L, "m_myPriorityListNode", tolua_get_CRes_m_myPriorityListNode, tolua_set_CRes_m_myPriorityListNode);
		tolua_variable(L, "reference_m_myPriorityListNode", tolua_get_CRes_reference_m_myPriorityListNode, NULL);
		tolua_function(L, "DecrementDemands", &tolua_function_CRes_DecrementDemands);
		tolua_function(L, "DecrementRequests", &tolua_function_CRes_DecrementRequests);
		tolua_function(L, "Demand", &tolua_function_CRes_Demand);
		tolua_function(L, "Request", &tolua_function_CRes_Request);
		tolua_function(L, "virtual_GetResRef", &tolua_function_CRes_virtual_GetResRef);
		tolua_function(L, "virtual_GetFileType", &tolua_function_CRes_virtual_GetFileType);
		tolua_constant(L, "sizeof", sizeof(CRes));
	tolua_endmodule(L);
	tolua_cclass(L, "CRes::vtbl", "CRes::vtbl", {"CObject::vtbl"}, NULL);
	tolua_beginmodule(L, "CRes::vtbl");
		tolua_variable(L, "GetResRef", tolua_get_CRes__vtbl_GetResRef, tolua_set_CRes__vtbl_GetResRef);
		tolua_variable(L, "reference_GetResRef", tolua_get_CRes__vtbl_reference_GetResRef, NULL);
		tolua_variable(L, "GetFileType", tolua_get_CRes__vtbl_GetFileType, tolua_set_CRes__vtbl_GetFileType);
		tolua_variable(L, "reference_GetFileType", tolua_get_CRes__vtbl_reference_GetFileType, NULL);
		tolua_constant(L, "sizeof", sizeof(CRes::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CResWED", "CResWED", {"CRes"}, NULL);
	tolua_beginmodule(L, "CResWED");
		tolua_constant(L, "sizeof", sizeof(CResWED));
	tolua_endmodule(L);
	tolua_cclass(L, "CResWED::vtbl", "CResWED::vtbl", {"CRes::vtbl"}, NULL);
	tolua_beginmodule(L, "CResWED::vtbl");
		tolua_constant(L, "sizeof", sizeof(CResWED::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CResUI", "CResUI", {"CRes"}, NULL);
	tolua_beginmodule(L, "CResUI");
		tolua_variable(L, "m_pData", tolua_get_CResUI_m_pData, tolua_set_CResUI_m_pData);
		tolua_variable(L, "reference_m_pData", tolua_get_CResUI_reference_m_pData, NULL);
		tolua_variable(L, "m_pPanels", tolua_get_CResUI_m_pPanels, tolua_set_CResUI_m_pPanels);
		tolua_variable(L, "reference_m_pPanels", tolua_get_CResUI_reference_m_pPanels, NULL);
		tolua_variable(L, "m_pControls", tolua_get_CResUI_m_pControls, tolua_set_CResUI_m_pControls);
		tolua_variable(L, "reference_m_pControls", tolua_get_CResUI_reference_m_pControls, NULL);
		tolua_variable(L, "m_bParsed", tolua_get_CResUI_m_bParsed, tolua_set_CResUI_m_bParsed);
		tolua_variable(L, "reference_m_bParsed", tolua_get_CResUI_reference_m_bParsed, NULL);
		tolua_function(L, "DecrementDemands", &tolua_function_CResUI_DecrementDemands);
		tolua_function(L, "Demand", &tolua_function_CResUI_Demand);
		tolua_function(L, "GetControl", &tolua_function_CResUI_GetControl);
		tolua_function(L, "GetControlNo", &tolua_function_CResUI_GetControlNo);
		tolua_function(L, "GetPanel", &tolua_function_CResUI_GetPanel);
		tolua_function(L, "GetPanelNo", &tolua_function_CResUI_GetPanelNo);
		tolua_constant(L, "sizeof", sizeof(CResUI));
	tolua_endmodule(L);
	tolua_cclass(L, "CResUI::vtbl", "CResUI::vtbl", {"CRes::vtbl"}, NULL);
	tolua_beginmodule(L, "CResUI::vtbl");
		tolua_constant(L, "sizeof", sizeof(CResUI::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CResText", "CResText", {"CRes"}, NULL);
	tolua_beginmodule(L, "CResText");
		tolua_constant(L, "sizeof", sizeof(CResText));
	tolua_endmodule(L);
	tolua_cclass(L, "CResText::vtbl", "CResText::vtbl", {"CRes::vtbl"}, NULL);
	tolua_beginmodule(L, "CResText::vtbl");
		tolua_constant(L, "sizeof", sizeof(CResText::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CResMosaic", "CResMosaic", {"CRes"}, NULL);
	tolua_beginmodule(L, "CResMosaic");
		tolua_variable(L, "m_pData", tolua_get_CResMosaic_m_pData, tolua_set_CResMosaic_m_pData);
		tolua_variable(L, "reference_m_pData", tolua_get_CResMosaic_reference_m_pData, NULL);
		tolua_variable(L, "m_bParsed", tolua_get_CResMosaic_m_bParsed, tolua_set_CResMosaic_m_bParsed);
		tolua_variable(L, "reference_m_bParsed", tolua_get_CResMosaic_reference_m_bParsed, NULL);
		tolua_function(L, "DecrementDemands", &tolua_function_CResMosaic_DecrementDemands);
		tolua_function(L, "Demand", &tolua_function_CResMosaic_Demand);
		tolua_constant(L, "sizeof", sizeof(CResMosaic));
	tolua_endmodule(L);
	tolua_cclass(L, "CResMosaic::vtbl", "CResMosaic::vtbl", {"CRes::vtbl"}, NULL);
	tolua_beginmodule(L, "CResMosaic::vtbl");
		tolua_constant(L, "sizeof", sizeof(CResMosaic::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CResItem", "CResItem", {"CRes"}, NULL);
	tolua_beginmodule(L, "CResItem");
		tolua_variable(L, "pHeader", tolua_get_CResItem_pHeader, NULL);
		tolua_constant(L, "sizeof", sizeof(CResItem));
	tolua_endmodule(L);
	tolua_cclass(L, "CResItem::vtbl", "CResItem::vtbl", {"CRes::vtbl"}, NULL);
	tolua_beginmodule(L, "CResItem::vtbl");
		tolua_constant(L, "sizeof", sizeof(CResItem::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CResEffect", "CResEffect", {"CRes"}, NULL);
	tolua_beginmodule(L, "CResEffect");
		tolua_constant(L, "sizeof", sizeof(CResEffect));
	tolua_endmodule(L);
	tolua_cclass(L, "CResEffect::vtbl", "CResEffect::vtbl", {"CRes::vtbl"}, NULL);
	tolua_beginmodule(L, "CResEffect::vtbl");
		tolua_constant(L, "sizeof", sizeof(CResEffect::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CResCell", "CResCell", {"CRes"}, NULL);
	tolua_beginmodule(L, "CResCell");
		tolua_variable(L, "m_pPalette", tolua_get_CResCell_m_pPalette, tolua_set_CResCell_m_pPalette);
		tolua_variable(L, "reference_m_pPalette", tolua_get_CResCell_reference_m_pPalette, NULL);
		tolua_constant(L, "sizeof", sizeof(CResCell));
	tolua_endmodule(L);
	tolua_cclass(L, "CResCell::vtbl", "CResCell::vtbl", {"CRes::vtbl"}, NULL);
	tolua_beginmodule(L, "CResCell::vtbl");
		tolua_constant(L, "sizeof", sizeof(CResCell::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CMessage", "CMessage", {}, NULL);
	tolua_beginmodule(L, "CMessage");
		tolua_variable(L, "m_targetId", tolua_get_CMessage_m_targetId, tolua_set_CMessage_m_targetId);
		tolua_variable(L, "reference_m_targetId", tolua_get_CMessage_reference_m_targetId, NULL);
		tolua_variable(L, "m_sourceId", tolua_get_CMessage_m_sourceId, tolua_set_CMessage_m_sourceId);
		tolua_variable(L, "reference_m_sourceId", tolua_get_CMessage_reference_m_sourceId, NULL);
		tolua_function(L, "virtual_VirtualDestruct", &tolua_function_CMessage_virtual_VirtualDestruct);
		tolua_function(L, "virtual_GetCommType", &tolua_function_CMessage_virtual_GetCommType);
		tolua_function(L, "virtual_GetMsgType", &tolua_function_CMessage_virtual_GetMsgType);
		tolua_function(L, "virtual_GetMsgSubType", &tolua_function_CMessage_virtual_GetMsgSubType);
		tolua_function(L, "virtual_MarshalMessage", &tolua_function_CMessage_virtual_MarshalMessage);
		tolua_function(L, "virtual_UnmarshalMessage", &tolua_function_CMessage_virtual_UnmarshalMessage);
		tolua_function(L, "virtual_Run", &tolua_function_CMessage_virtual_Run);
		tolua_constant(L, "sizeof", sizeof(CMessage));
	tolua_endmodule(L);
	tolua_cclass(L, "CMessage::vtbl", "CMessage::vtbl", {}, NULL);
	tolua_beginmodule(L, "CMessage::vtbl");
		tolua_variable(L, "VirtualDestruct", tolua_get_CMessage__vtbl_VirtualDestruct, tolua_set_CMessage__vtbl_VirtualDestruct);
		tolua_variable(L, "reference_VirtualDestruct", tolua_get_CMessage__vtbl_reference_VirtualDestruct, NULL);
		tolua_variable(L, "GetCommType", tolua_get_CMessage__vtbl_GetCommType, tolua_set_CMessage__vtbl_GetCommType);
		tolua_variable(L, "reference_GetCommType", tolua_get_CMessage__vtbl_reference_GetCommType, NULL);
		tolua_variable(L, "GetMsgType", tolua_get_CMessage__vtbl_GetMsgType, tolua_set_CMessage__vtbl_GetMsgType);
		tolua_variable(L, "reference_GetMsgType", tolua_get_CMessage__vtbl_reference_GetMsgType, NULL);
		tolua_variable(L, "GetMsgSubType", tolua_get_CMessage__vtbl_GetMsgSubType, tolua_set_CMessage__vtbl_GetMsgSubType);
		tolua_variable(L, "reference_GetMsgSubType", tolua_get_CMessage__vtbl_reference_GetMsgSubType, NULL);
		tolua_variable(L, "MarshalMessage", tolua_get_CMessage__vtbl_MarshalMessage, tolua_set_CMessage__vtbl_MarshalMessage);
		tolua_variable(L, "reference_MarshalMessage", tolua_get_CMessage__vtbl_reference_MarshalMessage, NULL);
		tolua_variable(L, "UnmarshalMessage", tolua_get_CMessage__vtbl_UnmarshalMessage, tolua_set_CMessage__vtbl_UnmarshalMessage);
		tolua_variable(L, "reference_UnmarshalMessage", tolua_get_CMessage__vtbl_reference_UnmarshalMessage, NULL);
		tolua_variable(L, "Run", tolua_get_CMessage__vtbl_Run, tolua_set_CMessage__vtbl_Run);
		tolua_variable(L, "reference_Run", tolua_get_CMessage__vtbl_reference_Run, NULL);
		tolua_constant(L, "sizeof", sizeof(CMessage::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CMessageVisualEffect", "CMessageVisualEffect", {"CMessage"}, NULL);
	tolua_beginmodule(L, "CMessageVisualEffect");
		tolua_variable(L, "m_nEffectType", tolua_get_CMessageVisualEffect_m_nEffectType, tolua_set_CMessageVisualEffect_m_nEffectType);
		tolua_variable(L, "reference_m_nEffectType", tolua_get_CMessageVisualEffect_reference_m_nEffectType, NULL);
		tolua_variable(L, "m_nEffectProperty", tolua_get_CMessageVisualEffect_m_nEffectProperty, tolua_set_CMessageVisualEffect_m_nEffectProperty);
		tolua_variable(L, "reference_m_nEffectProperty", tolua_get_CMessageVisualEffect_reference_m_nEffectProperty, NULL);
		tolua_constant(L, "sizeof", sizeof(CMessageVisualEffect));
	tolua_endmodule(L);
	tolua_cclass(L, "CMessageVisualEffect::vtbl", "CMessageVisualEffect::vtbl", {"CMessage::vtbl"}, NULL);
	tolua_beginmodule(L, "CMessageVisualEffect::vtbl");
		tolua_constant(L, "sizeof", sizeof(CMessageVisualEffect::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CMessageUnknown", "CMessageUnknown", {"CMessage"}, NULL);
	tolua_beginmodule(L, "CMessageUnknown");
		tolua_variable(L, "m_entryNum", tolua_get_CMessageUnknown_m_entryNum, tolua_set_CMessageUnknown_m_entryNum);
		tolua_variable(L, "reference_m_entryNum", tolua_get_CMessageUnknown_reference_m_entryNum, NULL);
		tolua_constant(L, "sizeof", sizeof(CMessageUnknown));
	tolua_endmodule(L);
	tolua_cclass(L, "CMessageUnknown::vtbl", "CMessageUnknown::vtbl", {"CMessage::vtbl"}, NULL);
	tolua_beginmodule(L, "CMessageUnknown::vtbl");
		tolua_constant(L, "sizeof", sizeof(CMessageUnknown::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CMessageAutoScroll", "CMessageAutoScroll", {"CMessage"}, NULL);
	tolua_beginmodule(L, "CMessageAutoScroll");
		tolua_variable(L, "m_sArea", tolua_get_CMessageAutoScroll_m_sArea, NULL);
		tolua_variable(L, "m_startPos", tolua_get_CMessageAutoScroll_m_startPos, NULL);
		tolua_variable(L, "m_destPos", tolua_get_CMessageAutoScroll_m_destPos, NULL);
		tolua_variable(L, "m_nSpeed", tolua_get_CMessageAutoScroll_m_nSpeed, tolua_set_CMessageAutoScroll_m_nSpeed);
		tolua_variable(L, "reference_m_nSpeed", tolua_get_CMessageAutoScroll_reference_m_nSpeed, NULL);
		tolua_constant(L, "sizeof", sizeof(CMessageAutoScroll));
	tolua_endmodule(L);
	tolua_cclass(L, "CMessageAutoScroll::vtbl", "CMessageAutoScroll::vtbl", {"CMessage::vtbl"}, NULL);
	tolua_beginmodule(L, "CMessageAutoScroll::vtbl");
		tolua_constant(L, "sizeof", sizeof(CMessageAutoScroll::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CMessageAddEffect", "CMessageAddEffect", {"CMessage"}, NULL);
	tolua_beginmodule(L, "CMessageAddEffect");
		tolua_variable(L, "m_effect", tolua_get_CMessageAddEffect_m_effect, tolua_set_CMessageAddEffect_m_effect);
		tolua_variable(L, "reference_m_effect", tolua_get_CMessageAddEffect_reference_m_effect, NULL);
		tolua_constant(L, "sizeof", sizeof(CMessageAddEffect));
	tolua_endmodule(L);
	tolua_cclass(L, "CMessageAddEffect::vtbl", "CMessageAddEffect::vtbl", {"CMessage::vtbl"}, NULL);
	tolua_beginmodule(L, "CMessageAddEffect::vtbl");
		tolua_constant(L, "sizeof", sizeof(CMessageAddEffect::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CInfCursor", "CInfCursor", {}, NULL);
	tolua_beginmodule(L, "CInfCursor");
		tolua_variable(L, "m_nCurrentCursor", tolua_get_CInfCursor_m_nCurrentCursor, tolua_set_CInfCursor_m_nCurrentCursor);
		tolua_variable(L, "reference_m_nCurrentCursor", tolua_get_CInfCursor_reference_m_nCurrentCursor, NULL);
		tolua_variable(L, "m_nDirection", tolua_get_CInfCursor_m_nDirection, tolua_set_CInfCursor_m_nDirection);
		tolua_variable(L, "reference_m_nDirection", tolua_get_CInfCursor_reference_m_nDirection, NULL);
		tolua_function(L, "SetCursor", &tolua_function_CInfCursor_SetCursor);
		tolua_constant(L, "sizeof", sizeof(CInfCursor));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameAnimationType", "CGameAnimationType", {}, NULL);
	tolua_beginmodule(L, "CGameAnimationType");
		tolua_function(L, "virtual_CalculateFxRect", &tolua_function_CGameAnimationType_virtual_CalculateFxRect);
		tolua_function(L, "virtual_Render", &tolua_function_CGameAnimationType_virtual_Render);
		tolua_constant(L, "sizeof", sizeof(CGameAnimationType));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameAnimationType::vtbl", "CGameAnimationType::vtbl", {}, NULL);
	tolua_beginmodule(L, "CGameAnimationType::vtbl");
		tolua_variable(L, "CalculateFxRect", tolua_get_CGameAnimationType__vtbl_CalculateFxRect, tolua_set_CGameAnimationType__vtbl_CalculateFxRect);
		tolua_variable(L, "reference_CalculateFxRect", tolua_get_CGameAnimationType__vtbl_reference_CalculateFxRect, NULL);
		tolua_variable(L, "Render", tolua_get_CGameAnimationType__vtbl_Render, tolua_set_CGameAnimationType__vtbl_Render);
		tolua_variable(L, "reference_Render", tolua_get_CGameAnimationType__vtbl_reference_Render, NULL);
		tolua_constant(L, "sizeof", sizeof(CGameAnimationType::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameAnimationTypeCharacter", "CGameAnimationTypeCharacter", {"CGameAnimationType"}, NULL);
	tolua_beginmodule(L, "CGameAnimationTypeCharacter");
		tolua_constant(L, "sizeof", sizeof(CGameAnimationTypeCharacter));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameAnimationTypeCharacter::vtbl", "CGameAnimationTypeCharacter::vtbl", {"CGameAnimationType::vtbl"}, NULL);
	tolua_beginmodule(L, "CGameAnimationTypeCharacter::vtbl");
		tolua_constant(L, "sizeof", sizeof(CGameAnimationTypeCharacter::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CAIGroup", "CAIGroup", {}, NULL);
	tolua_beginmodule(L, "CAIGroup");
		tolua_variable(L, "m_groupId", tolua_get_CAIGroup_m_groupId, tolua_set_CAIGroup_m_groupId);
		tolua_variable(L, "reference_m_groupId", tolua_get_CAIGroup_reference_m_groupId, NULL);
		tolua_variable(L, "m_groupChanged", tolua_get_CAIGroup_m_groupChanged, tolua_set_CAIGroup_m_groupChanged);
		tolua_variable(L, "reference_m_groupChanged", tolua_get_CAIGroup_reference_m_groupChanged, NULL);
		tolua_variable(L, "m_memberList", tolua_get_CAIGroup_m_memberList, NULL);
		tolua_function(L, "GroupCancelMove", &tolua_function_CAIGroup_GroupCancelMove);
		tolua_function(L, "GroupDrawMove", &tolua_function_CAIGroup_GroupDrawMove);
		tolua_constant(L, "sizeof", sizeof(CAIGroup));
	tolua_endmodule(L);
	tolua_cclass(L, "Array<char,8>", "Array<char,8>", {}, NULL);
	tolua_beginmodule(L, "Array<char,8>");
		tolua_function(L, "get", &tolua_function_Array_char_8__get);
		tolua_function(L, "set", &tolua_function_Array_char_8__set);
		tolua_constant(L, "sizeof", sizeof(Array<char,8>));
		tolua_constant(L, "size", 8);
		tolua_constant(L, "lastIndex", 7);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<DWORD,10>", "Array<DWORD,10>", {}, NULL);
	tolua_beginmodule(L, "Array<DWORD,10>");
		tolua_function(L, "get", &tolua_function_Array_DWORD_10__get);
		tolua_function(L, "getReference", &tolua_function_Array_DWORD_10__getReference);
		tolua_function(L, "set", &tolua_function_Array_DWORD_10__set);
		tolua_constant(L, "sizeof", sizeof(Array<DWORD,10>));
		tolua_constant(L, "size", 10);
		tolua_constant(L, "lastIndex", 9);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<CInfTileSet*,5>", "Array<CInfTileSet*,5>", {}, NULL);
	tolua_beginmodule(L, "Array<CInfTileSet*,5>");
		tolua_function(L, "get", &tolua_function_Array_CInfTileSet__5__get);
		tolua_function(L, "getReference", &tolua_function_Array_CInfTileSet__5__getReference);
		tolua_function(L, "set", &tolua_function_Array_CInfTileSet__5__set);
		tolua_constant(L, "sizeof", sizeof(Array<CInfTileSet*,5>));
		tolua_constant(L, "size", 5);
		tolua_constant(L, "lastIndex", 4);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<tagRGBQUAD,256>", "Array<tagRGBQUAD,256>", {}, NULL);
	tolua_beginmodule(L, "Array<tagRGBQUAD,256>");
		tolua_function(L, "getReference", &tolua_function_Array_tagRGBQUAD_256__getReference);
		tolua_function(L, "set", &tolua_function_Array_tagRGBQUAD_256__set);
		tolua_constant(L, "sizeof", sizeof(Array<tagRGBQUAD,256>));
		tolua_constant(L, "size", 256);
		tolua_constant(L, "lastIndex", 255);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<char,32>", "Array<char,32>", {}, NULL);
	tolua_beginmodule(L, "Array<char,32>");
		tolua_function(L, "get", &tolua_function_Array_char_32__get);
		tolua_function(L, "set", &tolua_function_Array_char_32__set);
		tolua_constant(L, "sizeof", sizeof(Array<char,32>));
		tolua_constant(L, "size", 32);
		tolua_constant(L, "lastIndex", 31);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<byte,5>", "Array<byte,5>", {}, NULL);
	tolua_beginmodule(L, "Array<byte,5>");
		tolua_function(L, "get", &tolua_function_Array_byte_5__get);
		tolua_function(L, "getReference", &tolua_function_Array_byte_5__getReference);
		tolua_function(L, "set", &tolua_function_Array_byte_5__set);
		tolua_constant(L, "sizeof", sizeof(Array<byte,5>));
		tolua_constant(L, "size", 5);
		tolua_constant(L, "lastIndex", 4);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<byte,16>", "Array<byte,16>", {}, NULL);
	tolua_beginmodule(L, "Array<byte,16>");
		tolua_function(L, "get", &tolua_function_Array_byte_16__get);
		tolua_function(L, "getReference", &tolua_function_Array_byte_16__getReference);
		tolua_function(L, "set", &tolua_function_Array_byte_16__set);
		tolua_constant(L, "sizeof", sizeof(Array<byte,16>));
		tolua_constant(L, "size", 16);
		tolua_constant(L, "lastIndex", 15);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<uint,15>", "Array<uint,15>", {}, NULL);
	tolua_beginmodule(L, "Array<uint,15>");
		tolua_function(L, "get", &tolua_function_Array_uint_15__get);
		tolua_function(L, "getReference", &tolua_function_Array_uint_15__getReference);
		tolua_function(L, "set", &tolua_function_Array_uint_15__set);
		tolua_constant(L, "sizeof", sizeof(Array<uint,15>));
		tolua_constant(L, "size", 15);
		tolua_constant(L, "lastIndex", 14);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<CGameArea*,12>", "Array<CGameArea*,12>", {}, NULL);
	tolua_beginmodule(L, "Array<CGameArea*,12>");
		tolua_function(L, "get", &tolua_function_Array_CGameArea__12__get);
		tolua_function(L, "getReference", &tolua_function_Array_CGameArea__12__getReference);
		tolua_function(L, "set", &tolua_function_Array_CGameArea__12__set);
		tolua_constant(L, "sizeof", sizeof(Array<CGameArea*,12>));
		tolua_constant(L, "size", 12);
		tolua_constant(L, "lastIndex", 11);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<int,6>", "Array<int,6>", {}, NULL);
	tolua_beginmodule(L, "Array<int,6>");
		tolua_function(L, "get", &tolua_function_Array_int_6__get);
		tolua_function(L, "getReference", &tolua_function_Array_int_6__getReference);
		tolua_function(L, "set", &tolua_function_Array_int_6__set);
		tolua_constant(L, "sizeof", sizeof(Array<int,6>));
		tolua_constant(L, "size", 6);
		tolua_constant(L, "lastIndex", 5);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<byte,168>", "Array<byte,168>", {}, NULL);
	tolua_beginmodule(L, "Array<byte,168>");
		tolua_function(L, "get", &tolua_function_Array_byte_168__get);
		tolua_function(L, "getReference", &tolua_function_Array_byte_168__getReference);
		tolua_function(L, "set", &tolua_function_Array_byte_168__set);
		tolua_constant(L, "sizeof", sizeof(Array<byte,168>));
		tolua_constant(L, "size", 168);
		tolua_constant(L, "lastIndex", 167);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<CVidMode*,4>", "Array<CVidMode*,4>", {}, NULL);
	tolua_beginmodule(L, "Array<CVidMode*,4>");
		tolua_function(L, "get", &tolua_function_Array_CVidMode__4__get);
		tolua_function(L, "getReference", &tolua_function_Array_CVidMode__4__getReference);
		tolua_function(L, "set", &tolua_function_Array_CVidMode__4__set);
		tolua_constant(L, "sizeof", sizeof(Array<CVidMode*,4>));
		tolua_constant(L, "size", 4);
		tolua_constant(L, "lastIndex", 3);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<CUIControlButtonMapEntry,1>", "Array<CUIControlButtonMapEntry,1>", {}, NULL);
	tolua_beginmodule(L, "Array<CUIControlButtonMapEntry,1>");
		tolua_function(L, "getReference", &tolua_function_Array_CUIControlButtonMapEntry_1__getReference);
		tolua_function(L, "set", &tolua_function_Array_CUIControlButtonMapEntry_1__set);
		tolua_constant(L, "sizeof", sizeof(Array<CUIControlButtonMapEntry,1>));
		tolua_constant(L, "size", 1);
		tolua_constant(L, "lastIndex", 0);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<int,12>", "Array<int,12>", {}, NULL);
	tolua_beginmodule(L, "Array<int,12>");
		tolua_function(L, "get", &tolua_function_Array_int_12__get);
		tolua_function(L, "getReference", &tolua_function_Array_int_12__getReference);
		tolua_function(L, "set", &tolua_function_Array_int_12__set);
		tolua_constant(L, "sizeof", sizeof(Array<int,12>));
		tolua_constant(L, "size", 12);
		tolua_constant(L, "lastIndex", 11);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<byte,10>", "Array<byte,10>", {}, NULL);
	tolua_beginmodule(L, "Array<byte,10>");
		tolua_function(L, "get", &tolua_function_Array_byte_10__get);
		tolua_function(L, "getReference", &tolua_function_Array_byte_10__getReference);
		tolua_function(L, "set", &tolua_function_Array_byte_10__set);
		tolua_constant(L, "sizeof", sizeof(Array<byte,10>));
		tolua_constant(L, "size", 10);
		tolua_constant(L, "lastIndex", 9);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<byte,7>", "Array<byte,7>", {}, NULL);
	tolua_beginmodule(L, "Array<byte,7>");
		tolua_function(L, "get", &tolua_function_Array_byte_7__get);
		tolua_function(L, "getReference", &tolua_function_Array_byte_7__getReference);
		tolua_function(L, "set", &tolua_function_Array_byte_7__set);
		tolua_constant(L, "sizeof", sizeof(Array<byte,7>));
		tolua_constant(L, "size", 7);
		tolua_constant(L, "lastIndex", 6);
	tolua_endmodule(L);
	tolua_cclass(L, "Array<byte,3>", "Array<byte,3>", {}, NULL);
	tolua_beginmodule(L, "Array<byte,3>");
		tolua_function(L, "get", &tolua_function_Array_byte_3__get);
		tolua_function(L, "getReference", &tolua_function_Array_byte_3__getReference);
		tolua_function(L, "set", &tolua_function_Array_byte_3__set);
		tolua_constant(L, "sizeof", sizeof(Array<byte,3>));
		tolua_constant(L, "size", 3);
		tolua_constant(L, "lastIndex", 2);
	tolua_endmodule(L);
	tolua_cclass(L, "CVideo", "CVideo", {}, NULL);
	tolua_beginmodule(L, "CVideo");
		tolua_variable(L, "m_nBitDepth", tolua_get_CVideo_m_nBitDepth, tolua_set_CVideo_m_nBitDepth);
		tolua_variable(L, "reference_m_nBitDepth", tolua_get_CVideo_reference_m_nBitDepth, NULL);
		tolua_variable(L, "m_functions", tolua_get_CVideo_m_functions, NULL);
		tolua_variable(L, "m_pDirectDraw", tolua_get_CVideo_m_pDirectDraw, tolua_set_CVideo_m_pDirectDraw);
		tolua_variable(L, "reference_m_pDirectDraw", tolua_get_CVideo_reference_m_pDirectDraw, NULL);
		tolua_variable(L, "m_aVidModes", tolua_get_CVideo_m_aVidModes, NULL);
		tolua_variable(L, "m_pActiveVidMode", tolua_get_CVideo_m_pActiveVidMode, tolua_set_CVideo_m_pActiveVidMode);
		tolua_variable(L, "reference_m_pActiveVidMode", tolua_get_CVideo_reference_m_pActiveVidMode, NULL);
		tolua_variable(L, "m_hWindow", tolua_get_CVideo_m_hWindow, tolua_set_CVideo_m_hWindow);
		tolua_variable(L, "reference_m_hWindow", tolua_get_CVideo_reference_m_hWindow, NULL);
		tolua_constant(L, "sizeof", sizeof(CVideo));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidPalette", "CVidPalette", {}, NULL);
	tolua_beginmodule(L, "CVidPalette");
		tolua_variable(L, "m_pPalette", tolua_get_CVidPalette_m_pPalette, tolua_set_CVidPalette_m_pPalette);
		tolua_variable(L, "reference_m_pPalette", tolua_get_CVidPalette_reference_m_pPalette, NULL);
		tolua_variable(L, "m_nEntries", tolua_get_CVidPalette_m_nEntries, tolua_set_CVidPalette_m_nEntries);
		tolua_variable(L, "reference_m_nEntries", tolua_get_CVidPalette_reference_m_nEntries, NULL);
		tolua_variable(L, "rgbGlobalTint", tolua_get_CVidPalette_rgbGlobalTint, tolua_set_CVidPalette_rgbGlobalTint);
		tolua_variable(L, "reference_rgbGlobalTint", tolua_get_CVidPalette_reference_rgbGlobalTint, NULL);
		tolua_variable(L, "m_nType", tolua_get_CVidPalette_m_nType, tolua_set_CVidPalette_m_nType);
		tolua_variable(L, "reference_m_nType", tolua_get_CVidPalette_reference_m_nType, NULL);
		tolua_variable(L, "m_bPaletteOwner", tolua_get_CVidPalette_m_bPaletteOwner, tolua_set_CVidPalette_m_bPaletteOwner);
		tolua_variable(L, "reference_m_bPaletteOwner", tolua_get_CVidPalette_reference_m_bPaletteOwner, NULL);
		tolua_variable(L, "m_nUnknown", tolua_get_CVidPalette_m_nUnknown, tolua_set_CVidPalette_m_nUnknown);
		tolua_variable(L, "reference_m_nUnknown", tolua_get_CVidPalette_reference_m_nUnknown, NULL);
		tolua_variable(L, "m_bSubRangesCalculated", tolua_get_CVidPalette_m_bSubRangesCalculated, tolua_set_CVidPalette_m_bSubRangesCalculated);
		tolua_variable(L, "reference_m_bSubRangesCalculated", tolua_get_CVidPalette_reference_m_bSubRangesCalculated, NULL);
		tolua_variable(L, "m_rangeColors", tolua_get_CVidPalette_m_rangeColors, NULL);
		tolua_constant(L, "sizeof", sizeof(CVidPalette));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidImage", "CVidImage", {}, NULL);
	tolua_beginmodule(L, "CVidImage");
		tolua_variable(L, "m_cPalette", tolua_get_CVidImage_m_cPalette, NULL);
		tolua_constant(L, "sizeof", sizeof(CVidImage));
	tolua_endmodule(L);
	tolua_cclass(L, "CResRef", "CResRef", {}, NULL);
	tolua_beginmodule(L, "CResRef");
		tolua_variable(L, "m_resRef", tolua_get_CResRef_m_resRef, NULL);
		tolua_function(L, "get", &tolua_function_CResRef_get);
		tolua_function(L, "set", &tolua_function_CResRef_set);
		tolua_constant(L, "sizeof", sizeof(CResRef));
	tolua_endmodule(L);
	tolua_cclass(L, "CResHelper<CResMosaic,1004>", "CResHelper<CResMosaic,1004>", {}, NULL);
	tolua_beginmodule(L, "CResHelper<CResMosaic,1004>");
		tolua_variable(L, "m_bAutoRequested", tolua_get_CResHelper_CResMosaic_1004__m_bAutoRequested, tolua_set_CResHelper_CResMosaic_1004__m_bAutoRequested);
		tolua_variable(L, "reference_m_bAutoRequested", tolua_get_CResHelper_CResMosaic_1004__reference_m_bAutoRequested, NULL);
		tolua_variable(L, "m_pRes", tolua_get_CResHelper_CResMosaic_1004__m_pRes, tolua_set_CResHelper_CResMosaic_1004__m_pRes);
		tolua_variable(L, "reference_m_pRes", tolua_get_CResHelper_CResMosaic_1004__reference_m_pRes, NULL);
		tolua_variable(L, "m_cResRef", tolua_get_CResHelper_CResMosaic_1004__m_cResRef, NULL);
		tolua_constant(L, "sizeof", sizeof(CResHelper<CResMosaic,1004>));
	tolua_endmodule(L);
	tolua_cclass(L, "CResHelper<CResText,1012>", "CResHelper<CResText,1012>", {}, NULL);
	tolua_beginmodule(L, "CResHelper<CResText,1012>");
		tolua_variable(L, "m_bAutoRequested", tolua_get_CResHelper_CResText_1012__m_bAutoRequested, tolua_set_CResHelper_CResText_1012__m_bAutoRequested);
		tolua_variable(L, "reference_m_bAutoRequested", tolua_get_CResHelper_CResText_1012__reference_m_bAutoRequested, NULL);
		tolua_variable(L, "m_pRes", tolua_get_CResHelper_CResText_1012__m_pRes, tolua_set_CResHelper_CResText_1012__m_pRes);
		tolua_variable(L, "reference_m_pRes", tolua_get_CResHelper_CResText_1012__reference_m_pRes, NULL);
		tolua_variable(L, "m_cResRef", tolua_get_CResHelper_CResText_1012__m_cResRef, NULL);
		tolua_constant(L, "sizeof", sizeof(CResHelper<CResText,1012>));
	tolua_endmodule(L);
	tolua_cclass(L, "CResHelper<CResCell,1000>", "CResHelper<CResCell,1000>", {}, NULL);
	tolua_beginmodule(L, "CResHelper<CResCell,1000>");
		tolua_variable(L, "m_bAutoRequested", tolua_get_CResHelper_CResCell_1000__m_bAutoRequested, tolua_set_CResHelper_CResCell_1000__m_bAutoRequested);
		tolua_variable(L, "reference_m_bAutoRequested", tolua_get_CResHelper_CResCell_1000__reference_m_bAutoRequested, NULL);
		tolua_variable(L, "m_pRes", tolua_get_CResHelper_CResCell_1000__m_pRes, tolua_set_CResHelper_CResCell_1000__m_pRes);
		tolua_variable(L, "reference_m_pRes", tolua_get_CResHelper_CResCell_1000__reference_m_pRes, NULL);
		tolua_variable(L, "m_cResRef", tolua_get_CResHelper_CResCell_1000__m_cResRef, NULL);
		tolua_constant(L, "sizeof", sizeof(CResHelper<CResCell,1000>));
	tolua_endmodule(L);
	tolua_cclass(L, "CResHelper<CResEffect,1016>", "CResHelper<CResEffect,1016>", {}, NULL);
	tolua_beginmodule(L, "CResHelper<CResEffect,1016>");
		tolua_variable(L, "m_bAutoRequested", tolua_get_CResHelper_CResEffect_1016__m_bAutoRequested, tolua_set_CResHelper_CResEffect_1016__m_bAutoRequested);
		tolua_variable(L, "reference_m_bAutoRequested", tolua_get_CResHelper_CResEffect_1016__reference_m_bAutoRequested, NULL);
		tolua_variable(L, "m_pRes", tolua_get_CResHelper_CResEffect_1016__m_pRes, tolua_set_CResHelper_CResEffect_1016__m_pRes);
		tolua_variable(L, "reference_m_pRes", tolua_get_CResHelper_CResEffect_1016__reference_m_pRes, NULL);
		tolua_variable(L, "m_cResRef", tolua_get_CResHelper_CResEffect_1016__m_cResRef, NULL);
		tolua_constant(L, "sizeof", sizeof(CResHelper<CResEffect,1016>));
	tolua_endmodule(L);
	tolua_cclass(L, "CResHelper<CResItem,1005>", "CResHelper<CResItem,1005>", {}, NULL);
	tolua_beginmodule(L, "CResHelper<CResItem,1005>");
		tolua_variable(L, "m_bAutoRequested", tolua_get_CResHelper_CResItem_1005__m_bAutoRequested, tolua_set_CResHelper_CResItem_1005__m_bAutoRequested);
		tolua_variable(L, "reference_m_bAutoRequested", tolua_get_CResHelper_CResItem_1005__reference_m_bAutoRequested, NULL);
		tolua_variable(L, "m_pRes", tolua_get_CResHelper_CResItem_1005__m_pRes, tolua_set_CResHelper_CResItem_1005__m_pRes);
		tolua_variable(L, "reference_m_pRes", tolua_get_CResHelper_CResItem_1005__reference_m_pRes, NULL);
		tolua_variable(L, "m_cResRef", tolua_get_CResHelper_CResItem_1005__m_cResRef, NULL);
		tolua_constant(L, "sizeof", sizeof(CResHelper<CResItem,1005>));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidCell", "CVidCell", {"CVidImage","CResHelper<CResCell,1000>"}, NULL);
	tolua_beginmodule(L, "CVidCell");
		tolua_variable(L, "m_nCurrentFrame", tolua_get_CVidCell_m_nCurrentFrame, tolua_set_CVidCell_m_nCurrentFrame);
		tolua_variable(L, "reference_m_nCurrentFrame", tolua_get_CVidCell_reference_m_nCurrentFrame, NULL);
		tolua_variable(L, "m_nCurrentSequence", tolua_get_CVidCell_m_nCurrentSequence, tolua_set_CVidCell_m_nCurrentSequence);
		tolua_variable(L, "reference_m_nCurrentSequence", tolua_get_CVidCell_reference_m_nCurrentSequence, NULL);
		tolua_variable(L, "m_bPaletteChanged", tolua_get_CVidCell_m_bPaletteChanged, tolua_set_CVidCell_m_bPaletteChanged);
		tolua_variable(L, "reference_m_bPaletteChanged", tolua_get_CVidCell_reference_m_bPaletteChanged, NULL);
		tolua_constant(L, "sizeof", sizeof(CVidCell));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidFont", "CVidFont", {"CVidCell"}, NULL);
	tolua_beginmodule(L, "CVidFont");
		tolua_variable(L, "m_palette", tolua_get_CVidFont_m_palette, NULL);
		tolua_function(L, "Render", &tolua_function_CVidFont_Render);
		tolua_constant(L, "sizeof", sizeof(CVidFont));
	tolua_endmodule(L);
	tolua_cclass(L, "CUIControlButton", "CUIControlButton", {"CUIControlBase"}, NULL);
	tolua_beginmodule(L, "CUIControlButton");
		tolua_variable(L, "m_vidCellButton", tolua_get_CUIControlButton_m_vidCellButton, NULL);
		tolua_variable(L, "m_nFrameUp", tolua_get_CUIControlButton_m_nFrameUp, tolua_set_CUIControlButton_m_nFrameUp);
		tolua_variable(L, "reference_m_nFrameUp", tolua_get_CUIControlButton_reference_m_nFrameUp, NULL);
		tolua_variable(L, "m_nFrameDisabled", tolua_get_CUIControlButton_m_nFrameDisabled, tolua_set_CUIControlButton_m_nFrameDisabled);
		tolua_variable(L, "reference_m_nFrameDisabled", tolua_get_CUIControlButton_reference_m_nFrameDisabled, NULL);
		tolua_variable(L, "m_doRender", tolua_get_CUIControlButton_m_doRender, tolua_set_CUIControlButton_m_doRender);
		tolua_variable(L, "reference_m_doRender", tolua_get_CUIControlButton_reference_m_doRender, NULL);
		tolua_variable(L, "m_BAMFrameDown", tolua_get_CUIControlButton_m_BAMFrameDown, tolua_set_CUIControlButton_m_BAMFrameDown);
		tolua_variable(L, "reference_m_BAMFrameDown", tolua_get_CUIControlButton_reference_m_BAMFrameDown, NULL);
		tolua_variable(L, "m_sText", tolua_get_CUIControlButton_m_sText, NULL);
		tolua_variable(L, "m_bClickable", tolua_get_CUIControlButton_m_bClickable, tolua_set_CUIControlButton_m_bClickable);
		tolua_variable(L, "reference_m_bClickable", tolua_get_CUIControlButton_reference_m_bClickable, NULL);
		tolua_constant(L, "sizeof", sizeof(CUIControlButton));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameEffectFile", "CGameEffectFile", {"CResHelper<CResEffect,1016>"}, NULL);
	tolua_beginmodule(L, "CGameEffectFile");
		tolua_constant(L, "sizeof", sizeof(CGameEffectFile));
	tolua_endmodule(L);
	tolua_cclass(L, "CVidMosaic", "CVidMosaic", {"CVidImage","CResHelper<CResMosaic,1004>"}, NULL);
	tolua_beginmodule(L, "CVidMosaic");
		tolua_function(L, "Render", &tolua_function_CVidMosaic_Render);
		tolua_constant(L, "sizeof", sizeof(CVidMosaic));
	tolua_endmodule(L);
	tolua_cclass(L, "CUIControlButtonMap", "CUIControlButtonMap", {"CUIControlButton"}, NULL);
	tolua_beginmodule(L, "CUIControlButtonMap");
		tolua_variable(L, "m_mosaic", tolua_get_CUIControlButtonMap_m_mosaic, NULL);
		tolua_variable(L, "m_pArea", tolua_get_CUIControlButtonMap_m_pArea, tolua_set_CUIControlButtonMap_m_pArea);
		tolua_variable(L, "reference_m_pArea", tolua_get_CUIControlButtonMap_reference_m_pArea, NULL);
		tolua_variable(L, "m_bMosaicLoaded", tolua_get_CUIControlButtonMap_m_bMosaicLoaded, tolua_set_CUIControlButtonMap_m_bMosaicLoaded);
		tolua_variable(L, "reference_m_bMosaicLoaded", tolua_get_CUIControlButtonMap_reference_m_bMosaicLoaded, NULL);
		tolua_variable(L, "m_rMosaic", tolua_get_CUIControlButtonMap_m_rMosaic, NULL);
		tolua_variable(L, "m_bIsLButtonDown", tolua_get_CUIControlButtonMap_m_bIsLButtonDown, tolua_set_CUIControlButtonMap_m_bIsLButtonDown);
		tolua_variable(L, "reference_m_bIsLButtonDown", tolua_get_CUIControlButtonMap_reference_m_bIsLButtonDown, NULL);
		tolua_variable(L, "m_bMouseBeingDragged", tolua_get_CUIControlButtonMap_m_bMouseBeingDragged, tolua_set_CUIControlButtonMap_m_bMouseBeingDragged);
		tolua_variable(L, "reference_m_bMouseBeingDragged", tolua_get_CUIControlButtonMap_reference_m_bMouseBeingDragged, NULL);
		tolua_variable(L, "m_initialLButtonDownPoint", tolua_get_CUIControlButtonMap_m_initialLButtonDownPoint, NULL);
		tolua_variable(L, "m_rViewPosition", tolua_get_CUIControlButtonMap_m_rViewPosition, NULL);
		tolua_variable(L, "m_lock", tolua_get_CUIControlButtonMap_m_lock, NULL);
		tolua_variable(L, "m_rect3", tolua_get_CUIControlButtonMap_m_rect3, NULL);
		tolua_variable(L, "m_nRenderCounter", tolua_get_CUIControlButtonMap_m_nRenderCounter, tolua_set_CUIControlButtonMap_m_nRenderCounter);
		tolua_variable(L, "reference_m_nRenderCounter", tolua_get_CUIControlButtonMap_reference_m_nRenderCounter, NULL);
		tolua_variable(L, "m_curViewPos", tolua_get_CUIControlButtonMap_m_curViewPos, NULL);
		tolua_variable(L, "m_pendingViewPos", tolua_get_CUIControlButtonMap_m_pendingViewPos, NULL);
		tolua_variable(L, "m_nUnused", tolua_get_CUIControlButtonMap_m_nUnused, tolua_set_CUIControlButtonMap_m_nUnused);
		tolua_variable(L, "reference_m_nUnused", tolua_get_CUIControlButtonMap_reference_m_nUnused, NULL);
		tolua_constant(L, "sizeof", sizeof(CUIControlButtonMap));
	tolua_endmodule(L);
	tolua_cclass(L, "CUIControlButtonMap::vtbl", "CUIControlButtonMap::vtbl", {"CUIControlButton::vtbl"}, NULL);
	tolua_beginmodule(L, "CUIControlButtonMap::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUIControlButtonMap::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUIControlTextField", "CUIControlTextField", {"CUIControlBase"}, NULL);
	tolua_beginmodule(L, "CUIControlTextField");
		tolua_constant(L, "sizeof", sizeof(CUIControlTextField));
	tolua_endmodule(L);
	tolua_cclass(L, "CUIControlTextField::vtbl", "CUIControlTextField::vtbl", {"CUIControlBase::vtbl"}, NULL);
	tolua_beginmodule(L, "CUIControlTextField::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUIControlTextField::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUIPanel", "CUIPanel", {}, NULL);
	tolua_beginmodule(L, "CUIPanel");
		tolua_variable(L, "m_pUIManager", tolua_get_CUIPanel_m_pUIManager, tolua_set_CUIPanel_m_pUIManager);
		tolua_variable(L, "reference_m_pUIManager", tolua_get_CUIPanel_reference_m_pUIManager, NULL);
		tolua_variable(L, "m_controlList", tolua_get_CUIPanel_m_controlList, NULL);
		tolua_variable(L, "m_nId", tolua_get_CUIPanel_m_nId, tolua_set_CUIPanel_m_nId);
		tolua_variable(L, "reference_m_nId", tolua_get_CUIPanel_reference_m_nId, NULL);
		tolua_variable(L, "m_nX", tolua_get_CUIPanel_m_nX, tolua_set_CUIPanel_m_nX);
		tolua_variable(L, "reference_m_nX", tolua_get_CUIPanel_reference_m_nX, NULL);
		tolua_variable(L, "m_nY", tolua_get_CUIPanel_m_nY, tolua_set_CUIPanel_m_nY);
		tolua_variable(L, "reference_m_nY", tolua_get_CUIPanel_reference_m_nY, NULL);
		tolua_variable(L, "m_nWidth", tolua_get_CUIPanel_m_nWidth, tolua_set_CUIPanel_m_nWidth);
		tolua_variable(L, "reference_m_nWidth", tolua_get_CUIPanel_reference_m_nWidth, NULL);
		tolua_variable(L, "m_nHeight", tolua_get_CUIPanel_m_nHeight, tolua_set_CUIPanel_m_nHeight);
		tolua_variable(L, "reference_m_nHeight", tolua_get_CUIPanel_reference_m_nHeight, NULL);
		tolua_variable(L, "m_mosaic", tolua_get_CUIPanel_m_mosaic, NULL);
		tolua_variable(L, "m_nPendingRenderCount", tolua_get_CUIPanel_m_nPendingRenderCount, tolua_set_CUIPanel_m_nPendingRenderCount);
		tolua_variable(L, "reference_m_nPendingRenderCount", tolua_get_CUIPanel_reference_m_nPendingRenderCount, NULL);
		tolua_variable(L, "m_bActive", tolua_get_CUIPanel_m_bActive, tolua_set_CUIPanel_m_bActive);
		tolua_variable(L, "reference_m_bActive", tolua_get_CUIPanel_reference_m_bActive, NULL);
		tolua_variable(L, "m_rInvalid", tolua_get_CUIPanel_m_rInvalid, NULL);
		tolua_variable(L, "m_bInactiveRender", tolua_get_CUIPanel_m_bInactiveRender, tolua_set_CUIPanel_m_bInactiveRender);
		tolua_variable(L, "reference_m_bInactiveRender", tolua_get_CUIPanel_reference_m_bInactiveRender, NULL);
		tolua_variable(L, "m_bEnabled", tolua_get_CUIPanel_m_bEnabled, tolua_set_CUIPanel_m_bEnabled);
		tolua_variable(L, "reference_m_bEnabled", tolua_get_CUIPanel_reference_m_bEnabled, NULL);
		tolua_function(L, "Construct", &tolua_function_CUIPanel_Construct);
		tolua_function(L, "InvalidateRect", &tolua_function_CUIPanel_InvalidateRect);
		tolua_constant(L, "sizeof", sizeof(CUIPanel));
	tolua_endmodule(L);
	tolua_cclass(L, "CItem", "CItem", {"CResHelper<CResItem,1005>"}, NULL);
	tolua_beginmodule(L, "CItem");
		tolua_function(L, "virtual_VirtualDestruct", &tolua_function_CItem_virtual_VirtualDestruct);
		tolua_constant(L, "sizeof", sizeof(CItem));
	tolua_endmodule(L);
	tolua_cclass(L, "CItem::vtbl", "CItem::vtbl", {}, NULL);
	tolua_beginmodule(L, "CItem::vtbl");
		tolua_variable(L, "VirtualDestruct", tolua_get_CItem__vtbl_VirtualDestruct, tolua_set_CItem__vtbl_VirtualDestruct);
		tolua_variable(L, "reference_VirtualDestruct", tolua_get_CItem__vtbl_reference_VirtualDestruct, NULL);
		tolua_constant(L, "sizeof", sizeof(CItem::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "C2DArray", "C2DArray", {"CResHelper<CResText,1012>"}, NULL);
	tolua_beginmodule(L, "C2DArray");
		tolua_variable(L, "m_pNamesX", tolua_get_C2DArray_m_pNamesX, tolua_set_C2DArray_m_pNamesX);
		tolua_variable(L, "reference_m_pNamesX", tolua_get_C2DArray_reference_m_pNamesX, NULL);
		tolua_variable(L, "m_pNamesY", tolua_get_C2DArray_m_pNamesY, tolua_set_C2DArray_m_pNamesY);
		tolua_variable(L, "reference_m_pNamesY", tolua_get_C2DArray_reference_m_pNamesY, NULL);
		tolua_variable(L, "m_pArray", tolua_get_C2DArray_m_pArray, tolua_set_C2DArray_m_pArray);
		tolua_variable(L, "reference_m_pArray", tolua_get_C2DArray_reference_m_pArray, NULL);
		tolua_variable(L, "m_default", tolua_get_C2DArray_m_default, NULL);
		tolua_variable(L, "m_nSizeX", tolua_get_C2DArray_m_nSizeX, tolua_set_C2DArray_m_nSizeX);
		tolua_variable(L, "reference_m_nSizeX", tolua_get_C2DArray_reference_m_nSizeX, NULL);
		tolua_variable(L, "m_nSizeY", tolua_get_C2DArray_m_nSizeY, tolua_set_C2DArray_m_nSizeY);
		tolua_variable(L, "reference_m_nSizeY", tolua_get_C2DArray_reference_m_nSizeY, NULL);
		tolua_constant(L, "sizeof", sizeof(C2DArray));
	tolua_endmodule(L);
	tolua_cclass(L, "CRuleTables", "CRuleTables", {}, NULL);
	tolua_beginmodule(L, "CRuleTables");
		tolua_variable(L, "m_tStartArea", tolua_get_CRuleTables_m_tStartArea, NULL);
		tolua_constant(L, "sizeof", sizeof(CRuleTables));
	tolua_endmodule(L);
	tolua_cclass(L, "WED_LayerHeader_st", "WED_LayerHeader_st", {}, NULL);
	tolua_beginmodule(L, "WED_LayerHeader_st");
		tolua_variable(L, "nTilesAcross", tolua_get_WED_LayerHeader_st_nTilesAcross, tolua_set_WED_LayerHeader_st_nTilesAcross);
		tolua_variable(L, "reference_nTilesAcross", tolua_get_WED_LayerHeader_st_reference_nTilesAcross, NULL);
		tolua_variable(L, "nTilesDown", tolua_get_WED_LayerHeader_st_nTilesDown, tolua_set_WED_LayerHeader_st_nTilesDown);
		tolua_variable(L, "reference_nTilesDown", tolua_get_WED_LayerHeader_st_reference_nTilesDown, NULL);
		tolua_variable(L, "resrefTileSet", tolua_get_WED_LayerHeader_st_resrefTileSet, NULL);
		tolua_variable(L, "nNumUniqueTiles", tolua_get_WED_LayerHeader_st_nNumUniqueTiles, tolua_set_WED_LayerHeader_st_nNumUniqueTiles);
		tolua_variable(L, "reference_nNumUniqueTiles", tolua_get_WED_LayerHeader_st_reference_nNumUniqueTiles, NULL);
		tolua_variable(L, "nLayerFlags", tolua_get_WED_LayerHeader_st_nLayerFlags, tolua_set_WED_LayerHeader_st_nLayerFlags);
		tolua_variable(L, "reference_nLayerFlags", tolua_get_WED_LayerHeader_st_reference_nLayerFlags, NULL);
		tolua_variable(L, "nOffsetToTileData", tolua_get_WED_LayerHeader_st_nOffsetToTileData, tolua_set_WED_LayerHeader_st_nOffsetToTileData);
		tolua_variable(L, "reference_nOffsetToTileData", tolua_get_WED_LayerHeader_st_reference_nOffsetToTileData, NULL);
		tolua_variable(L, "nOffsetToTileSetLookupArray", tolua_get_WED_LayerHeader_st_nOffsetToTileSetLookupArray, tolua_set_WED_LayerHeader_st_nOffsetToTileSetLookupArray);
		tolua_variable(L, "reference_nOffsetToTileSetLookupArray", tolua_get_WED_LayerHeader_st_reference_nOffsetToTileSetLookupArray, NULL);
		tolua_constant(L, "sizeof", sizeof(WED_LayerHeader_st));
	tolua_endmodule(L);
	tolua_cclass(L, "UI_PanelHeader_st", "UI_PanelHeader_st", {}, NULL);
	tolua_beginmodule(L, "UI_PanelHeader_st");
		tolua_variable(L, "id", tolua_get_UI_PanelHeader_st_id, tolua_set_UI_PanelHeader_st_id);
		tolua_variable(L, "reference_id", tolua_get_UI_PanelHeader_st_reference_id, NULL);
		tolua_variable(L, "x", tolua_get_UI_PanelHeader_st_x, tolua_set_UI_PanelHeader_st_x);
		tolua_variable(L, "reference_x", tolua_get_UI_PanelHeader_st_reference_x, NULL);
		tolua_variable(L, "y", tolua_get_UI_PanelHeader_st_y, tolua_set_UI_PanelHeader_st_y);
		tolua_variable(L, "reference_y", tolua_get_UI_PanelHeader_st_reference_y, NULL);
		tolua_variable(L, "width", tolua_get_UI_PanelHeader_st_width, tolua_set_UI_PanelHeader_st_width);
		tolua_variable(L, "reference_width", tolua_get_UI_PanelHeader_st_reference_width, NULL);
		tolua_variable(L, "height", tolua_get_UI_PanelHeader_st_height, tolua_set_UI_PanelHeader_st_height);
		tolua_variable(L, "reference_height", tolua_get_UI_PanelHeader_st_reference_height, NULL);
		tolua_variable(L, "type", tolua_get_UI_PanelHeader_st_type, tolua_set_UI_PanelHeader_st_type);
		tolua_variable(L, "reference_type", tolua_get_UI_PanelHeader_st_reference_type, NULL);
		tolua_variable(L, "numControls", tolua_get_UI_PanelHeader_st_numControls, tolua_set_UI_PanelHeader_st_numControls);
		tolua_variable(L, "reference_numControls", tolua_get_UI_PanelHeader_st_reference_numControls, NULL);
		tolua_variable(L, "mosaic", tolua_get_UI_PanelHeader_st_mosaic, NULL);
		tolua_variable(L, "firstControlIndex", tolua_get_UI_PanelHeader_st_firstControlIndex, tolua_set_UI_PanelHeader_st_firstControlIndex);
		tolua_variable(L, "reference_firstControlIndex", tolua_get_UI_PanelHeader_st_reference_firstControlIndex, NULL);
		tolua_variable(L, "flags", tolua_get_UI_PanelHeader_st_flags, tolua_set_UI_PanelHeader_st_flags);
		tolua_variable(L, "reference_flags", tolua_get_UI_PanelHeader_st_reference_flags, NULL);
		tolua_constant(L, "sizeof", sizeof(UI_PanelHeader_st));
	tolua_endmodule(L);
	tolua_cclass(L, "Item_effect_st", "Item_effect_st", {}, NULL);
	tolua_beginmodule(L, "Item_effect_st");
		tolua_variable(L, "effectID", tolua_get_Item_effect_st_effectID, tolua_set_Item_effect_st_effectID);
		tolua_variable(L, "reference_effectID", tolua_get_Item_effect_st_reference_effectID, NULL);
		tolua_variable(L, "targetType", tolua_get_Item_effect_st_targetType, tolua_set_Item_effect_st_targetType);
		tolua_variable(L, "reference_targetType", tolua_get_Item_effect_st_reference_targetType, NULL);
		tolua_variable(L, "spellLevel", tolua_get_Item_effect_st_spellLevel, tolua_set_Item_effect_st_spellLevel);
		tolua_variable(L, "reference_spellLevel", tolua_get_Item_effect_st_reference_spellLevel, NULL);
		tolua_variable(L, "effectAmount", tolua_get_Item_effect_st_effectAmount, tolua_set_Item_effect_st_effectAmount);
		tolua_variable(L, "reference_effectAmount", tolua_get_Item_effect_st_reference_effectAmount, NULL);
		tolua_variable(L, "dwFlags", tolua_get_Item_effect_st_dwFlags, tolua_set_Item_effect_st_dwFlags);
		tolua_variable(L, "reference_dwFlags", tolua_get_Item_effect_st_reference_dwFlags, NULL);
		tolua_variable(L, "durationType", tolua_get_Item_effect_st_durationType, tolua_set_Item_effect_st_durationType);
		tolua_variable(L, "reference_durationType", tolua_get_Item_effect_st_reference_durationType, NULL);
		tolua_variable(L, "duration", tolua_get_Item_effect_st_duration, tolua_set_Item_effect_st_duration);
		tolua_variable(L, "reference_duration", tolua_get_Item_effect_st_reference_duration, NULL);
		tolua_variable(L, "probabilityUpper", tolua_get_Item_effect_st_probabilityUpper, tolua_set_Item_effect_st_probabilityUpper);
		tolua_variable(L, "reference_probabilityUpper", tolua_get_Item_effect_st_reference_probabilityUpper, NULL);
		tolua_variable(L, "probabilityLower", tolua_get_Item_effect_st_probabilityLower, tolua_set_Item_effect_st_probabilityLower);
		tolua_variable(L, "reference_probabilityLower", tolua_get_Item_effect_st_reference_probabilityLower, NULL);
		tolua_variable(L, "res", tolua_get_Item_effect_st_res, NULL);
		tolua_variable(L, "numDice", tolua_get_Item_effect_st_numDice, tolua_set_Item_effect_st_numDice);
		tolua_variable(L, "reference_numDice", tolua_get_Item_effect_st_reference_numDice, NULL);
		tolua_variable(L, "diceSize", tolua_get_Item_effect_st_diceSize, tolua_set_Item_effect_st_diceSize);
		tolua_variable(L, "reference_diceSize", tolua_get_Item_effect_st_reference_diceSize, NULL);
		tolua_variable(L, "savingThrow", tolua_get_Item_effect_st_savingThrow, tolua_set_Item_effect_st_savingThrow);
		tolua_variable(L, "reference_savingThrow", tolua_get_Item_effect_st_reference_savingThrow, NULL);
		tolua_variable(L, "saveMod", tolua_get_Item_effect_st_saveMod, tolua_set_Item_effect_st_saveMod);
		tolua_variable(L, "reference_saveMod", tolua_get_Item_effect_st_reference_saveMod, NULL);
		tolua_variable(L, "special", tolua_get_Item_effect_st_special, tolua_set_Item_effect_st_special);
		tolua_variable(L, "reference_special", tolua_get_Item_effect_st_reference_special, NULL);
		tolua_constant(L, "sizeof", sizeof(Item_effect_st));
	tolua_endmodule(L);
	tolua_cclass(L, "CUIManager", "CUIManager", {}, NULL);
	tolua_beginmodule(L, "CUIManager");
		tolua_variable(L, "m_bResLoaded", tolua_get_CUIManager_m_bResLoaded, tolua_set_CUIManager_m_bResLoaded);
		tolua_variable(L, "reference_m_bResLoaded", tolua_get_CUIManager_reference_m_bResLoaded, NULL);
		tolua_variable(L, "m_id", tolua_get_CUIManager_m_id, NULL);
		tolua_variable(L, "m_pEngine", tolua_get_CUIManager_m_pEngine, tolua_set_CUIManager_m_pEngine);
		tolua_variable(L, "reference_m_pEngine", tolua_get_CUIManager_reference_m_pEngine, NULL);
		tolua_variable(L, "m_pCapturedControl", tolua_get_CUIManager_m_pCapturedControl, tolua_set_CUIManager_m_pCapturedControl);
		tolua_variable(L, "reference_m_pCapturedControl", tolua_get_CUIManager_reference_m_pCapturedControl, NULL);
		tolua_variable(L, "m_bActive", tolua_get_CUIManager_m_bActive, tolua_set_CUIManager_m_bActive);
		tolua_variable(L, "reference_m_bActive", tolua_get_CUIManager_reference_m_bActive, NULL);
		tolua_variable(L, "m_nControlCaptureType", tolua_get_CUIManager_m_nControlCaptureType, tolua_set_CUIManager_m_nControlCaptureType);
		tolua_variable(L, "reference_m_nControlCaptureType", tolua_get_CUIManager_reference_m_nControlCaptureType, NULL);
		tolua_variable(L, "lock", tolua_get_CUIManager_lock, NULL);
		tolua_variable(L, "m_panelList", tolua_get_CUIManager_m_panelList, NULL);
		tolua_function(L, "Construct", &tolua_function_CUIManager_Construct);
		tolua_function(L, "Destruct", &tolua_function_CUIManager_Destruct);
		tolua_function(L, "GetPanel", &tolua_function_CUIManager_GetPanel);
		tolua_function(L, "Invalidate", &tolua_function_CUIManager_Invalidate);
		tolua_constant(L, "sizeof", sizeof(CUIManager));
	tolua_endmodule(L);
	tolua_cclass(L, "CBaldurEngine", "CBaldurEngine", {"CWarp"}, NULL);
	tolua_beginmodule(L, "CBaldurEngine");
		tolua_variable(L, "m_uiManager", tolua_get_CBaldurEngine_m_uiManager, NULL);
		tolua_function(L, "virtual_GetUIManager", &tolua_function_CBaldurEngine_virtual_GetUIManager);
		tolua_function(L, "virtual_SetPanelControlActiveAndInactiveRender", &tolua_function_CBaldurEngine_virtual_SetPanelControlActiveAndInactiveRender);
		tolua_constant(L, "sizeof", sizeof(CBaldurEngine));
	tolua_endmodule(L);
	tolua_cclass(L, "CBaldurEngine::vtbl", "CBaldurEngine::vtbl", {"CWarp::vtbl"}, NULL);
	tolua_beginmodule(L, "CBaldurEngine::vtbl");
		tolua_variable(L, "GetUIManager", tolua_get_CBaldurEngine__vtbl_GetUIManager, tolua_set_CBaldurEngine__vtbl_GetUIManager);
		tolua_variable(L, "reference_GetUIManager", tolua_get_CBaldurEngine__vtbl_reference_GetUIManager, NULL);
		tolua_variable(L, "SetPanelControlActiveAndInactiveRender", tolua_get_CBaldurEngine__vtbl_SetPanelControlActiveAndInactiveRender, tolua_set_CBaldurEngine__vtbl_SetPanelControlActiveAndInactiveRender);
		tolua_variable(L, "reference_SetPanelControlActiveAndInactiveRender", tolua_get_CBaldurEngine__vtbl_reference_SetPanelControlActiveAndInactiveRender, NULL);
		tolua_constant(L, "sizeof", sizeof(CBaldurEngine::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CBaldurProjector", "CBaldurProjector", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CBaldurProjector");
		tolua_constant(L, "sizeof", sizeof(CBaldurProjector));
	tolua_endmodule(L);
	tolua_cclass(L, "CBaldurProjector::vtbl", "CBaldurProjector::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CBaldurProjector::vtbl");
		tolua_constant(L, "sizeof", sizeof(CBaldurProjector::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CScreenConnection", "CScreenConnection", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CScreenConnection");
		tolua_constant(L, "sizeof", sizeof(CScreenConnection));
	tolua_endmodule(L);
	tolua_cclass(L, "CScreenConnection::vtbl", "CScreenConnection::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CScreenConnection::vtbl");
		tolua_constant(L, "sizeof", sizeof(CScreenConnection::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CScreenMap", "CScreenMap", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CScreenMap");
		tolua_variable(L, "m_unknownList", tolua_get_CScreenMap_m_unknownList, NULL);
		tolua_variable(L, "m_nButtonControls", tolua_get_CScreenMap_m_nButtonControls, tolua_set_CScreenMap_m_nButtonControls);
		tolua_variable(L, "reference_m_nButtonControls", tolua_get_CScreenMap_reference_m_nButtonControls, NULL);
		tolua_constant(L, "sizeof", sizeof(CScreenMap));
	tolua_endmodule(L);
	tolua_cclass(L, "CScreenMap::vtbl", "CScreenMap::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CScreenMap::vtbl");
		tolua_constant(L, "sizeof", sizeof(CScreenMap::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CScreenWorldMap", "CScreenWorldMap", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CScreenWorldMap");
		tolua_constant(L, "sizeof", sizeof(CScreenWorldMap));
	tolua_endmodule(L);
	tolua_cclass(L, "CScreenWorldMap::vtbl", "CScreenWorldMap::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CScreenWorldMap::vtbl");
		tolua_constant(L, "sizeof", sizeof(CScreenWorldMap::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine11", "CUnknownEngine11", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine11");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine11));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine11::vtbl", "CUnknownEngine11::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine11::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine11::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine12", "CUnknownEngine12", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine12");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine12));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine12::vtbl", "CUnknownEngine12::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine12::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine12::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine13", "CUnknownEngine13", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine13");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine13));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine13::vtbl", "CUnknownEngine13::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine13::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine13::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine14", "CUnknownEngine14", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine14");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine14));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine14::vtbl", "CUnknownEngine14::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine14::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine14::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine15", "CUnknownEngine15", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine15");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine15));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine15::vtbl", "CUnknownEngine15::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine15::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine15::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine16", "CUnknownEngine16", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine16");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine16));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine16::vtbl", "CUnknownEngine16::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine16::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine16::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine17", "CUnknownEngine17", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine17");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine17));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine17::vtbl", "CUnknownEngine17::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine17::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine17::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine18", "CUnknownEngine18", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine18");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine18));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine18::vtbl", "CUnknownEngine18::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine18::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine18::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine19", "CUnknownEngine19", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine19");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine19));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine19::vtbl", "CUnknownEngine19::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine19::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine19::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine2", "CUnknownEngine2", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine2");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine2));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine2::vtbl", "CUnknownEngine2::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine2::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine2::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine4", "CUnknownEngine4", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine4");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine4));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine4::vtbl", "CUnknownEngine4::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine4::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine4::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine5", "CUnknownEngine5", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine5");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine5));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine5::vtbl", "CUnknownEngine5::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine5::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine5::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine6", "CUnknownEngine6", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine6");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine6));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine6::vtbl", "CUnknownEngine6::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine6::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine6::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine7", "CUnknownEngine7", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine7");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine7));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine7::vtbl", "CUnknownEngine7::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine7::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine7::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine8", "CUnknownEngine8", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine8");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine8));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine8::vtbl", "CUnknownEngine8::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine8::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine8::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine9", "CUnknownEngine9", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine9");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine9));
	tolua_endmodule(L);
	tolua_cclass(L, "CUnknownEngine9::vtbl", "CUnknownEngine9::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CUnknownEngine9::vtbl");
		tolua_constant(L, "sizeof", sizeof(CUnknownEngine9::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CScreenWorld", "CScreenWorld", {"CBaldurEngine"}, NULL);
	tolua_beginmodule(L, "CScreenWorld");
		tolua_variable(L, "m_bCtrlDown", tolua_get_CScreenWorld_m_bCtrlDown, tolua_set_CScreenWorld_m_bCtrlDown);
		tolua_variable(L, "reference_m_bCtrlDown", tolua_get_CScreenWorld_reference_m_bCtrlDown, NULL);
		tolua_variable(L, "m_bCheatKeysEnabled", tolua_get_CScreenWorld_m_bCheatKeysEnabled, tolua_set_CScreenWorld_m_bCheatKeysEnabled);
		tolua_variable(L, "reference_m_bCheatKeysEnabled", tolua_get_CScreenWorld_reference_m_bCheatKeysEnabled, NULL);
		tolua_variable(L, "m_aPressedVirtualKeys", tolua_get_CScreenWorld_m_aPressedVirtualKeys, NULL);
		tolua_variable(L, "m_nPopupPanelId", tolua_get_CScreenWorld_m_nPopupPanelId, tolua_set_CScreenWorld_m_nPopupPanelId);
		tolua_variable(L, "reference_m_nPopupPanelId", tolua_get_CScreenWorld_reference_m_nPopupPanelId, NULL);
		tolua_variable(L, "m_pCurrentDialog", tolua_get_CScreenWorld_m_pCurrentDialog, NULL);
		tolua_variable(L, "m_dialogScrollOrigin", tolua_get_CScreenWorld_m_dialogScrollOrigin, NULL);
		tolua_variable(L, "m_rPendingViewPort", tolua_get_CScreenWorld_m_rPendingViewPort, NULL);
		tolua_variable(L, "m_bViewPortResizePending", tolua_get_CScreenWorld_m_bViewPortResizePending, tolua_set_CScreenWorld_m_bViewPortResizePending);
		tolua_variable(L, "reference_m_bViewPortResizePending", tolua_get_CScreenWorld_reference_m_bViewPortResizePending, NULL);
		tolua_variable(L, "m_weatherController", tolua_get_CScreenWorld_m_weatherController, NULL);
		tolua_variable(L, "m_nAutoScrollToActorID", tolua_get_CScreenWorld_m_nAutoScrollToActorID, tolua_set_CScreenWorld_m_nAutoScrollToActorID);
		tolua_variable(L, "reference_m_nAutoScrollToActorID", tolua_get_CScreenWorld_reference_m_nAutoScrollToActorID, NULL);
		tolua_variable(L, "m_bSetNightOnActivate", tolua_get_CScreenWorld_m_bSetNightOnActivate, tolua_set_CScreenWorld_m_bSetNightOnActivate);
		tolua_variable(L, "reference_m_bSetNightOnActivate", tolua_get_CScreenWorld_reference_m_bSetNightOnActivate, NULL);
		tolua_variable(L, "m_bSetDayOnActivate", tolua_get_CScreenWorld_m_bSetDayOnActivate, tolua_set_CScreenWorld_m_bSetDayOnActivate);
		tolua_variable(L, "reference_m_bSetDayOnActivate", tolua_get_CScreenWorld_reference_m_bSetDayOnActivate, NULL);
		tolua_variable(L, "m_movie", tolua_get_CScreenWorld_m_movie, NULL);
		tolua_variable(L, "m_bGameOverPanel", tolua_get_CScreenWorld_m_bGameOverPanel, tolua_set_CScreenWorld_m_bGameOverPanel);
		tolua_variable(L, "reference_m_bGameOverPanel", tolua_get_CScreenWorld_reference_m_bGameOverPanel, NULL);
		tolua_constant(L, "sizeof", sizeof(CScreenWorld));
	tolua_endmodule(L);
	tolua_cclass(L, "CScreenWorld::vtbl", "CScreenWorld::vtbl", {"CBaldurEngine::vtbl"}, NULL);
	tolua_beginmodule(L, "CScreenWorld::vtbl");
		tolua_constant(L, "sizeof", sizeof(CScreenWorld::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CResourceManagerHashEntry", "CResourceManagerHashEntry", {}, NULL);
	tolua_beginmodule(L, "CResourceManagerHashEntry");
		tolua_variable(L, "m_resref", tolua_get_CResourceManagerHashEntry_m_resref, NULL);
		tolua_variable(L, "m_pRes", tolua_get_CResourceManagerHashEntry_m_pRes, tolua_set_CResourceManagerHashEntry_m_pRes);
		tolua_variable(L, "reference_m_pRes", tolua_get_CResourceManagerHashEntry_reference_m_pRes, NULL);
		tolua_variable(L, "m_nResourceLocator", tolua_get_CResourceManagerHashEntry_m_nResourceLocator, tolua_set_CResourceManagerHashEntry_m_nResourceLocator);
		tolua_variable(L, "reference_m_nResourceLocator", tolua_get_CResourceManagerHashEntry_reference_m_nResourceLocator, NULL);
		tolua_variable(L, "m_nReferenceCount", tolua_get_CResourceManagerHashEntry_m_nReferenceCount, tolua_set_CResourceManagerHashEntry_m_nReferenceCount);
		tolua_variable(L, "reference_m_nReferenceCount", tolua_get_CResourceManagerHashEntry_reference_m_nReferenceCount, NULL);
		tolua_variable(L, "m_nFileType", tolua_get_CResourceManagerHashEntry_m_nFileType, tolua_set_CResourceManagerHashEntry_m_nFileType);
		tolua_variable(L, "reference_m_nFileType", tolua_get_CResourceManagerHashEntry_reference_m_nFileType, NULL);
		tolua_constant(L, "sizeof", sizeof(CResourceManagerHashEntry));
	tolua_endmodule(L);
	tolua_cclass(L, "CResourceManagerHashTable", "CResourceManagerHashTable", {}, NULL);
	tolua_beginmodule(L, "CResourceManagerHashTable");
		tolua_variable(L, "m_bInitialized", tolua_get_CResourceManagerHashTable_m_bInitialized, tolua_set_CResourceManagerHashTable_m_bInitialized);
		tolua_variable(L, "reference_m_bInitialized", tolua_get_CResourceManagerHashTable_reference_m_bInitialized, NULL);
		tolua_variable(L, "m_pBifEntriesRaw", tolua_get_CResourceManagerHashTable_m_pBifEntriesRaw, tolua_set_CResourceManagerHashTable_m_pBifEntriesRaw);
		tolua_variable(L, "reference_m_pBifEntriesRaw", tolua_get_CResourceManagerHashTable_reference_m_pBifEntriesRaw, NULL);
		tolua_variable(L, "m_nBifEntries", tolua_get_CResourceManagerHashTable_m_nBifEntries, tolua_set_CResourceManagerHashTable_m_nBifEntries);
		tolua_variable(L, "reference_m_nBifEntries", tolua_get_CResourceManagerHashTable_reference_m_nBifEntries, NULL);
		tolua_variable(L, "m_nHashTableSize", tolua_get_CResourceManagerHashTable_m_nHashTableSize, tolua_set_CResourceManagerHashTable_m_nHashTableSize);
		tolua_variable(L, "reference_m_nHashTableSize", tolua_get_CResourceManagerHashTable_reference_m_nHashTableSize, NULL);
		tolua_variable(L, "m_pHashEntries", tolua_get_CResourceManagerHashTable_m_pHashEntries, tolua_set_CResourceManagerHashTable_m_pHashEntries);
		tolua_variable(L, "reference_m_pHashEntries", tolua_get_CResourceManagerHashTable_reference_m_pHashEntries, NULL);
		tolua_constant(L, "sizeof", sizeof(CResourceManagerHashTable));
	tolua_endmodule(L);
	tolua_cclass(L, "CResourceManager", "CResourceManager", {}, NULL);
	tolua_beginmodule(L, "CResourceManager");
		tolua_variable(L, "m_lowestPriorityList", tolua_get_CResourceManager_m_lowestPriorityList, NULL);
		tolua_variable(L, "m_highestPriorityList", tolua_get_CResourceManager_m_highestPriorityList, NULL);
		tolua_variable(L, "m_persistentPriorityList", tolua_get_CResourceManager_m_persistentPriorityList, NULL);
		tolua_variable(L, "m_freedLowestPriorityList", tolua_get_CResourceManager_m_freedLowestPriorityList, NULL);
		tolua_variable(L, "m_freedHighestPriorityList", tolua_get_CResourceManager_m_freedHighestPriorityList, NULL);
		tolua_variable(L, "m_freedPersistentPriorityList", tolua_get_CResourceManager_m_freedPersistentPriorityList, NULL);
		tolua_variable(L, "m_hashTable", tolua_get_CResourceManager_m_hashTable, NULL);
		tolua_variable(L, "m_bTemporaryKeyAdd", tolua_get_CResourceManager_m_bTemporaryKeyAdd, tolua_set_CResourceManager_m_bTemporaryKeyAdd);
		tolua_variable(L, "reference_m_bTemporaryKeyAdd", tolua_get_CResourceManager_reference_m_bTemporaryKeyAdd, NULL);
		tolua_function(L, "GetResObject", &tolua_function_CResourceManager_GetResObject);
		tolua_function(L, "DumpResObject", &tolua_function_CResourceManager_DumpResObject);
		tolua_constant(L, "sizeof", sizeof(CResourceManager));
	tolua_endmodule(L);
	tolua_cclass(L, "CInfinity", "CInfinity", {}, NULL);
	tolua_beginmodule(L, "CInfinity");
		tolua_variable(L, "m_aTileSets", tolua_get_CInfinity_m_aTileSets, NULL);
		tolua_variable(L, "m_pResWED", tolua_get_CInfinity_m_pResWED, tolua_set_CInfinity_m_pResWED);
		tolua_variable(L, "reference_m_pResWED", tolua_get_CInfinity_reference_m_pResWED, NULL);
		tolua_variable(L, "m_pVRPool", tolua_get_CInfinity_m_pVRPool, tolua_set_CInfinity_m_pVRPool);
		tolua_variable(L, "reference_m_pVRPool", tolua_get_CInfinity_reference_m_pVRPool, NULL);
		tolua_variable(L, "m_pVidMode", tolua_get_CInfinity_m_pVidMode, tolua_set_CInfinity_m_pVidMode);
		tolua_variable(L, "reference_m_pVidMode", tolua_get_CInfinity_reference_m_pVidMode, NULL);
		tolua_variable(L, "m_bRefreshVRamRect", tolua_get_CInfinity_m_bRefreshVRamRect, tolua_set_CInfinity_m_bRefreshVRamRect);
		tolua_variable(L, "reference_m_bRefreshVRamRect", tolua_get_CInfinity_reference_m_bRefreshVRamRect, NULL);
		tolua_variable(L, "m_bInitialized", tolua_get_CInfinity_m_bInitialized, tolua_set_CInfinity_m_bInitialized);
		tolua_variable(L, "reference_m_bInitialized", tolua_get_CInfinity_reference_m_bInitialized, NULL);
		tolua_variable(L, "m_bWEDDemanded", tolua_get_CInfinity_m_bWEDDemanded, tolua_set_CInfinity_m_bWEDDemanded);
		tolua_variable(L, "reference_m_bWEDDemanded", tolua_get_CInfinity_reference_m_bWEDDemanded, NULL);
		tolua_variable(L, "m_nOffsetX", tolua_get_CInfinity_m_nOffsetX, tolua_set_CInfinity_m_nOffsetX);
		tolua_variable(L, "reference_m_nOffsetX", tolua_get_CInfinity_reference_m_nOffsetX, NULL);
		tolua_variable(L, "m_nOffsetY", tolua_get_CInfinity_m_nOffsetY, tolua_set_CInfinity_m_nOffsetY);
		tolua_variable(L, "reference_m_nOffsetY", tolua_get_CInfinity_reference_m_nOffsetY, NULL);
		tolua_variable(L, "m_nTilesAcross", tolua_get_CInfinity_m_nTilesAcross, tolua_set_CInfinity_m_nTilesAcross);
		tolua_variable(L, "reference_m_nTilesAcross", tolua_get_CInfinity_reference_m_nTilesAcross, NULL);
		tolua_variable(L, "m_nNewX", tolua_get_CInfinity_m_nNewX, tolua_set_CInfinity_m_nNewX);
		tolua_variable(L, "reference_m_nNewX", tolua_get_CInfinity_reference_m_nNewX, NULL);
		tolua_variable(L, "m_nNewY", tolua_get_CInfinity_m_nNewY, tolua_set_CInfinity_m_nNewY);
		tolua_variable(L, "reference_m_nNewY", tolua_get_CInfinity_reference_m_nNewY, NULL);
		tolua_variable(L, "m_rViewPort", tolua_get_CInfinity_m_rViewPort, NULL);
		tolua_variable(L, "m_nVisibleTilesX", tolua_get_CInfinity_m_nVisibleTilesX, tolua_set_CInfinity_m_nVisibleTilesX);
		tolua_variable(L, "reference_m_nVisibleTilesX", tolua_get_CInfinity_reference_m_nVisibleTilesX, NULL);
		tolua_variable(L, "m_nVisibleTilesY", tolua_get_CInfinity_m_nVisibleTilesY, tolua_set_CInfinity_m_nVisibleTilesY);
		tolua_variable(L, "reference_m_nVisibleTilesY", tolua_get_CInfinity_reference_m_nVisibleTilesY, NULL);
		tolua_variable(L, "m_nAreaWidth", tolua_get_CInfinity_m_nAreaWidth, tolua_set_CInfinity_m_nAreaWidth);
		tolua_variable(L, "reference_m_nAreaWidth", tolua_get_CInfinity_reference_m_nAreaWidth, NULL);
		tolua_variable(L, "m_nAreaHeight", tolua_get_CInfinity_m_nAreaHeight, tolua_set_CInfinity_m_nAreaHeight);
		tolua_variable(L, "reference_m_nAreaHeight", tolua_get_CInfinity_reference_m_nAreaHeight, NULL);
		tolua_variable(L, "m_nCurrentTileX", tolua_get_CInfinity_m_nCurrentTileX, tolua_set_CInfinity_m_nCurrentTileX);
		tolua_variable(L, "reference_m_nCurrentTileX", tolua_get_CInfinity_reference_m_nCurrentTileX, NULL);
		tolua_variable(L, "m_nCurrentTileY", tolua_get_CInfinity_m_nCurrentTileY, tolua_set_CInfinity_m_nCurrentTileY);
		tolua_variable(L, "reference_m_nCurrentTileY", tolua_get_CInfinity_reference_m_nCurrentTileY, NULL);
		tolua_variable(L, "m_nCurrentX", tolua_get_CInfinity_m_nCurrentX, tolua_set_CInfinity_m_nCurrentX);
		tolua_variable(L, "reference_m_nCurrentX", tolua_get_CInfinity_reference_m_nCurrentX, NULL);
		tolua_variable(L, "m_nCurrentY", tolua_get_CInfinity_m_nCurrentY, tolua_set_CInfinity_m_nCurrentY);
		tolua_variable(L, "reference_m_nCurrentY", tolua_get_CInfinity_reference_m_nCurrentY, NULL);
		tolua_variable(L, "m_nCurrentRainLevel", tolua_get_CInfinity_m_nCurrentRainLevel, tolua_set_CInfinity_m_nCurrentRainLevel);
		tolua_variable(L, "reference_m_nCurrentRainLevel", tolua_get_CInfinity_reference_m_nCurrentRainLevel, NULL);
		tolua_variable(L, "m_nNextRainLevel", tolua_get_CInfinity_m_nNextRainLevel, tolua_set_CInfinity_m_nNextRainLevel);
		tolua_variable(L, "reference_m_nNextRainLevel", tolua_get_CInfinity_reference_m_nNextRainLevel, NULL);
		tolua_variable(L, "m_nAreaType", tolua_get_CInfinity_m_nAreaType, tolua_set_CInfinity_m_nAreaType);
		tolua_variable(L, "reference_m_nAreaType", tolua_get_CInfinity_reference_m_nAreaType, NULL);
		tolua_variable(L, "m_nRenderDayNightCode", tolua_get_CInfinity_m_nRenderDayNightCode, tolua_set_CInfinity_m_nRenderDayNightCode);
		tolua_variable(L, "reference_m_nRenderDayNightCode", tolua_get_CInfinity_reference_m_nRenderDayNightCode, NULL);
		tolua_variable(L, "m_nOldRenderDayNightCode", tolua_get_CInfinity_m_nOldRenderDayNightCode, tolua_set_CInfinity_m_nOldRenderDayNightCode);
		tolua_variable(L, "reference_m_nOldRenderDayNightCode", tolua_get_CInfinity_reference_m_nOldRenderDayNightCode, NULL);
		tolua_variable(L, "m_nOldRequestDualTileCode", tolua_get_CInfinity_m_nOldRequestDualTileCode, tolua_set_CInfinity_m_nOldRequestDualTileCode);
		tolua_variable(L, "reference_m_nOldRequestDualTileCode", tolua_get_CInfinity_reference_m_nOldRequestDualTileCode, NULL);
		tolua_variable(L, "m_bResizedViewPort", tolua_get_CInfinity_m_bResizedViewPort, tolua_set_CInfinity_m_bResizedViewPort);
		tolua_variable(L, "reference_m_bResizedViewPort", tolua_get_CInfinity_reference_m_bResizedViewPort, NULL);
		tolua_variable(L, "m_nLastTickCount", tolua_get_CInfinity_m_nLastTickCount, tolua_set_CInfinity_m_nLastTickCount);
		tolua_variable(L, "reference_m_nLastTickCount", tolua_get_CInfinity_reference_m_nLastTickCount, NULL);
		tolua_variable(L, "m_ptCurrentPosExact", tolua_get_CInfinity_m_ptCurrentPosExact, NULL);
		tolua_variable(L, "m_viewPositionLock", tolua_get_CInfinity_m_viewPositionLock, NULL);
		tolua_variable(L, "m_autoScrollSpeed", tolua_get_CInfinity_m_autoScrollSpeed, tolua_set_CInfinity_m_autoScrollSpeed);
		tolua_variable(L, "reference_m_autoScrollSpeed", tolua_get_CInfinity_reference_m_autoScrollSpeed, NULL);
		tolua_variable(L, "m_ptScrollDest", tolua_get_CInfinity_m_ptScrollDest, NULL);
		tolua_variable(L, "m_nOldScrollState", tolua_get_CInfinity_m_nOldScrollState, tolua_set_CInfinity_m_nOldScrollState);
		tolua_variable(L, "reference_m_nOldScrollState", tolua_get_CInfinity_reference_m_nOldScrollState, NULL);
		tolua_variable(L, "m_nScrollDelay", tolua_get_CInfinity_m_nScrollDelay, tolua_set_CInfinity_m_nScrollDelay);
		tolua_variable(L, "reference_m_nScrollDelay", tolua_get_CInfinity_reference_m_nScrollDelay, NULL);
		tolua_variable(L, "m_rgbGlobalLighting", tolua_get_CInfinity_m_rgbGlobalLighting, tolua_set_CInfinity_m_rgbGlobalLighting);
		tolua_variable(L, "reference_m_rgbGlobalLighting", tolua_get_CInfinity_reference_m_rgbGlobalLighting, NULL);
		tolua_variable(L, "m_updateListenPosition", tolua_get_CInfinity_m_updateListenPosition, tolua_set_CInfinity_m_updateListenPosition);
		tolua_variable(L, "reference_m_updateListenPosition", tolua_get_CInfinity_reference_m_updateListenPosition, NULL);
		tolua_variable(L, "m_pArea", tolua_get_CInfinity_m_pArea, tolua_set_CInfinity_m_pArea);
		tolua_variable(L, "reference_m_pArea", tolua_get_CInfinity_reference_m_pArea, NULL);
		tolua_variable(L, "m_bRenderMessage", tolua_get_CInfinity_m_bRenderMessage, tolua_set_CInfinity_m_bRenderMessage);
		tolua_variable(L, "reference_m_bRenderMessage", tolua_get_CInfinity_reference_m_bRenderMessage, NULL);
		tolua_function(L, "Export_Override_GetWorldCoordinates", &tolua_function_CInfinity_Export_Override_GetWorldCoordinates);
		tolua_function(L, "Export_Override_SetViewPosition", &tolua_function_CInfinity_Export_Override_SetViewPosition);
		tolua_function(L, "Export_SetViewPositionAdjustToCenter", &tolua_function_CInfinity_Export_SetViewPositionAdjustToCenter);
		tolua_function(L, "Export_SetViewPositionIgnoreBounds", &tolua_function_CInfinity_Export_SetViewPositionIgnoreBounds);
		tolua_function(L, "SetViewPosition", &tolua_function_CInfinity_SetViewPosition);
		tolua_constant(L, "sizeof", sizeof(CInfinity));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameArea", "CGameArea", {}, NULL);
	tolua_beginmodule(L, "CGameArea");
		tolua_variable(L, "m_bAreaLoaded", tolua_get_CGameArea_m_bAreaLoaded, tolua_set_CGameArea_m_bAreaLoaded);
		tolua_variable(L, "reference_m_bAreaLoaded", tolua_get_CGameArea_reference_m_bAreaLoaded, NULL);
		tolua_variable(L, "m_pResWED", tolua_get_CGameArea_m_pResWED, tolua_set_CGameArea_m_pResWED);
		tolua_variable(L, "reference_m_pResWED", tolua_get_CGameArea_reference_m_pResWED, NULL);
		tolua_variable(L, "m_listsCriticalSection", tolua_get_CGameArea_m_listsCriticalSection, NULL);
		tolua_variable(L, "m_pGame", tolua_get_CGameArea_m_pGame, tolua_set_CGameArea_m_pGame);
		tolua_variable(L, "reference_m_pGame", tolua_get_CGameArea_reference_m_pGame, NULL);
		tolua_variable(L, "m_nScrollState", tolua_get_CGameArea_m_nScrollState, tolua_set_CGameArea_m_nScrollState);
		tolua_variable(L, "reference_m_nScrollState", tolua_get_CGameArea_reference_m_nScrollState, NULL);
		tolua_variable(L, "m_nToolTip", tolua_get_CGameArea_m_nToolTip, tolua_set_CGameArea_m_nToolTip);
		tolua_variable(L, "reference_m_nToolTip", tolua_get_CGameArea_reference_m_nToolTip, NULL);
		tolua_variable(L, "m_cursorPos", tolua_get_CGameArea_m_cursorPos, NULL);
		tolua_variable(L, "m_firstRender", tolua_get_CGameArea_m_firstRender, tolua_set_CGameArea_m_firstRender);
		tolua_variable(L, "reference_m_firstRender", tolua_get_CGameArea_reference_m_firstRender, NULL);
		tolua_variable(L, "m_selectSquare", tolua_get_CGameArea_m_selectSquare, NULL);
		tolua_variable(L, "m_moveDest", tolua_get_CGameArea_m_moveDest, NULL);
		tolua_variable(L, "m_groupMove", tolua_get_CGameArea_m_groupMove, tolua_set_CGameArea_m_groupMove);
		tolua_variable(L, "reference_m_groupMove", tolua_get_CGameArea_reference_m_groupMove, NULL);
		tolua_variable(L, "m_cInfinity", tolua_get_CGameArea_m_cInfinity, NULL);
		tolua_variable(L, "m_search", tolua_get_CGameArea_m_search, NULL);
		tolua_variable(L, "m_visibility", tolua_get_CGameArea_m_visibility, NULL);
		tolua_function(L, "Export_Override_OnMouseMove", &tolua_function_CGameArea_Export_Override_OnMouseMove);
		tolua_constant(L, "sizeof", sizeof(CGameArea));
	tolua_endmodule(L);
	tolua_cclass(L, "CInfButtonArray", "CInfButtonArray", {}, NULL);
	tolua_beginmodule(L, "CInfButtonArray");
		tolua_variable(L, "m_buttonTypes", tolua_get_CInfButtonArray_m_buttonTypes, NULL);
		tolua_variable(L, "m_buttonToConfigure", tolua_get_CInfButtonArray_m_buttonToConfigure, tolua_set_CInfButtonArray_m_buttonToConfigure);
		tolua_variable(L, "reference_m_buttonToConfigure", tolua_get_CInfButtonArray_reference_m_buttonToConfigure, NULL);
		tolua_variable(L, "m_nState", tolua_get_CInfButtonArray_m_nState, tolua_set_CInfButtonArray_m_nState);
		tolua_variable(L, "reference_m_nState", tolua_get_CInfButtonArray_reference_m_nState, NULL);
		tolua_constant(L, "sizeof", sizeof(CInfButtonArray));
	tolua_endmodule(L);
	tolua_cclass(L, "CInfGame", "CInfGame", {}, NULL);
	tolua_beginmodule(L, "CInfGame");
		tolua_variable(L, "m_ruleTables", tolua_get_CInfGame_m_ruleTables, NULL);
		tolua_variable(L, "m_worldTime__m_gameTime", tolua_get_CInfGame_m_worldTime__m_gameTime, tolua_set_CInfGame_m_worldTime__m_gameTime);
		tolua_variable(L, "reference_m_worldTime__m_gameTime", tolua_get_CInfGame_reference_m_worldTime__m_gameTime, NULL);
		tolua_variable(L, "m_bGameLoaded", tolua_get_CInfGame_m_bGameLoaded, tolua_set_CInfGame_m_bGameLoaded);
		tolua_variable(L, "reference_m_bGameLoaded", tolua_get_CInfGame_reference_m_bGameLoaded, NULL);
		tolua_variable(L, "m_bInLoadGame", tolua_get_CInfGame_m_bInLoadGame, tolua_set_CInfGame_m_bInLoadGame);
		tolua_variable(L, "reference_m_bInLoadGame", tolua_get_CInfGame_reference_m_bInLoadGame, NULL);
		tolua_variable(L, "m_nState", tolua_get_CInfGame_m_nState, tolua_set_CInfGame_m_nState);
		tolua_variable(L, "reference_m_nState", tolua_get_CInfGame_reference_m_nState, NULL);
		tolua_variable(L, "m_tempCursor", tolua_get_CInfGame_m_tempCursor, tolua_set_CInfGame_m_tempCursor);
		tolua_variable(L, "reference_m_tempCursor", tolua_get_CInfGame_reference_m_tempCursor, NULL);
		tolua_variable(L, "m_cButtonArray", tolua_get_CInfGame_m_cButtonArray, NULL);
		tolua_variable(L, "objectArray", tolua_get_CInfGame_objectArray, NULL);
		tolua_variable(L, "m_visibleArea", tolua_get_CInfGame_m_visibleArea, tolua_set_CInfGame_m_visibleArea);
		tolua_variable(L, "reference_m_visibleArea", tolua_get_CInfGame_reference_m_visibleArea, NULL);
		tolua_variable(L, "m_gameAreas", tolua_get_CInfGame_m_gameAreas, NULL);
		tolua_variable(L, "m_pGameAreaMaster", tolua_get_CInfGame_m_pGameAreaMaster, tolua_set_CInfGame_m_pGameAreaMaster);
		tolua_variable(L, "reference_m_pGameAreaMaster", tolua_get_CInfGame_reference_m_pGameAreaMaster, NULL);
		tolua_variable(L, "m_characters", tolua_get_CInfGame_m_characters, NULL);
		tolua_variable(L, "m_charactersPortrait", tolua_get_CInfGame_m_charactersPortrait, NULL);
		tolua_variable(L, "m_nCharacters", tolua_get_CInfGame_m_nCharacters, tolua_set_CInfGame_m_nCharacters);
		tolua_variable(L, "reference_m_nCharacters", tolua_get_CInfGame_reference_m_nCharacters, NULL);
		tolua_variable(L, "m_group", tolua_get_CInfGame_m_group, NULL);
		tolua_variable(L, "m_sTempFolder", tolua_get_CInfGame_m_sTempFolder, NULL);
		tolua_variable(L, "m_sTempSaveFolder", tolua_get_CInfGame_m_sTempSaveFolder, NULL);
		tolua_variable(L, "m_sScriptsFolder", tolua_get_CInfGame_m_sScriptsFolder, NULL);
		tolua_variable(L, "m_sSoundsFolder", tolua_get_CInfGame_m_sSoundsFolder, NULL);
		tolua_variable(L, "m_sPortraitsFolder", tolua_get_CInfGame_m_sPortraitsFolder, NULL);
		tolua_variable(L, "m_sCharactersFolder", tolua_get_CInfGame_m_sCharactersFolder, NULL);
		tolua_variable(L, "m_sSaveFolder", tolua_get_CInfGame_m_sSaveFolder, NULL);
		tolua_variable(L, "m_sMpSaveFolder", tolua_get_CInfGame_m_sMpSaveFolder, NULL);
		tolua_variable(L, "m_curFormation", tolua_get_CInfGame_m_curFormation, tolua_set_CInfGame_m_curFormation);
		tolua_variable(L, "reference_m_curFormation", tolua_get_CInfGame_reference_m_curFormation, NULL);
		tolua_variable(L, "m_inputMode", tolua_get_CInfGame_m_inputMode, tolua_set_CInfGame_m_inputMode);
		tolua_variable(L, "reference_m_inputMode", tolua_get_CInfGame_reference_m_inputMode, NULL);
		tolua_variable(L, "m_cutScene", tolua_get_CInfGame_m_cutScene, tolua_set_CInfGame_m_cutScene);
		tolua_variable(L, "reference_m_cutScene", tolua_get_CInfGame_reference_m_cutScene, NULL);
		tolua_variable(L, "m_nScrollSpeed", tolua_get_CInfGame_m_nScrollSpeed, tolua_set_CInfGame_m_nScrollSpeed);
		tolua_variable(L, "reference_m_nScrollSpeed", tolua_get_CInfGame_reference_m_nScrollSpeed, NULL);
		tolua_variable(L, "m_nKeyScrollSpeed", tolua_get_CInfGame_m_nKeyScrollSpeed, tolua_set_CInfGame_m_nKeyScrollSpeed);
		tolua_variable(L, "reference_m_nKeyScrollSpeed", tolua_get_CInfGame_reference_m_nKeyScrollSpeed, NULL);
		tolua_variable(L, "m_aHotkeyToVirtualKey", tolua_get_CInfGame_m_aHotkeyToVirtualKey, NULL);
		tolua_variable(L, "m_aHotkeyDefinedWithCtrlPrefix", tolua_get_CInfGame_m_aHotkeyDefinedWithCtrlPrefix, NULL);
		tolua_variable(L, "m_hSearchThread", tolua_get_CInfGame_m_hSearchThread, tolua_set_CInfGame_m_hSearchThread);
		tolua_variable(L, "reference_m_hSearchThread", tolua_get_CInfGame_reference_m_hSearchThread, NULL);
		tolua_variable(L, "m_bPartyAI", tolua_get_CInfGame_m_bPartyAI, tolua_set_CInfGame_m_bPartyAI);
		tolua_variable(L, "reference_m_bPartyAI", tolua_get_CInfGame_reference_m_bPartyAI, NULL);
		tolua_constant(L, "sizeof", sizeof(CInfGame));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameObjectArrayEntry", "CGameObjectArrayEntry", {}, NULL);
	tolua_beginmodule(L, "CGameObjectArrayEntry");
		tolua_variable(L, "m_shareCounts", tolua_get_CGameObjectArrayEntry_m_shareCounts, NULL);
		tolua_variable(L, "m_denyCounts", tolua_get_CGameObjectArrayEntry_m_denyCounts, NULL);
		tolua_variable(L, "m_objectId", tolua_get_CGameObjectArrayEntry_m_objectId, tolua_set_CGameObjectArrayEntry_m_objectId);
		tolua_variable(L, "reference_m_objectId", tolua_get_CGameObjectArrayEntry_reference_m_objectId, NULL);
		tolua_variable(L, "m_objectPtr", tolua_get_CGameObjectArrayEntry_m_objectPtr, tolua_set_CGameObjectArrayEntry_m_objectPtr);
		tolua_variable(L, "reference_m_objectPtr", tolua_get_CGameObjectArrayEntry_reference_m_objectPtr, NULL);
		tolua_constant(L, "sizeof", sizeof(CGameObjectArrayEntry));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameEffectBase", "CGameEffectBase", {}, NULL);
	tolua_beginmodule(L, "CGameEffectBase");
		tolua_variable(L, "m_version", tolua_get_CGameEffectBase_m_version, NULL);
		tolua_variable(L, "m_effectId", tolua_get_CGameEffectBase_m_effectId, tolua_set_CGameEffectBase_m_effectId);
		tolua_variable(L, "reference_m_effectId", tolua_get_CGameEffectBase_reference_m_effectId, NULL);
		tolua_variable(L, "m_targetType", tolua_get_CGameEffectBase_m_targetType, tolua_set_CGameEffectBase_m_targetType);
		tolua_variable(L, "reference_m_targetType", tolua_get_CGameEffectBase_reference_m_targetType, NULL);
		tolua_variable(L, "m_spellLevel", tolua_get_CGameEffectBase_m_spellLevel, tolua_set_CGameEffectBase_m_spellLevel);
		tolua_variable(L, "reference_m_spellLevel", tolua_get_CGameEffectBase_reference_m_spellLevel, NULL);
		tolua_variable(L, "m_effectAmount", tolua_get_CGameEffectBase_m_effectAmount, tolua_set_CGameEffectBase_m_effectAmount);
		tolua_variable(L, "reference_m_effectAmount", tolua_get_CGameEffectBase_reference_m_effectAmount, NULL);
		tolua_variable(L, "m_dWFlags", tolua_get_CGameEffectBase_m_dWFlags, tolua_set_CGameEffectBase_m_dWFlags);
		tolua_variable(L, "reference_m_dWFlags", tolua_get_CGameEffectBase_reference_m_dWFlags, NULL);
		tolua_variable(L, "m_durationType", tolua_get_CGameEffectBase_m_durationType, tolua_set_CGameEffectBase_m_durationType);
		tolua_variable(L, "reference_m_durationType", tolua_get_CGameEffectBase_reference_m_durationType, NULL);
		tolua_variable(L, "m_duration", tolua_get_CGameEffectBase_m_duration, tolua_set_CGameEffectBase_m_duration);
		tolua_variable(L, "reference_m_duration", tolua_get_CGameEffectBase_reference_m_duration, NULL);
		tolua_variable(L, "m_probabilityUpper", tolua_get_CGameEffectBase_m_probabilityUpper, tolua_set_CGameEffectBase_m_probabilityUpper);
		tolua_variable(L, "reference_m_probabilityUpper", tolua_get_CGameEffectBase_reference_m_probabilityUpper, NULL);
		tolua_variable(L, "m_probabilityLower", tolua_get_CGameEffectBase_m_probabilityLower, tolua_set_CGameEffectBase_m_probabilityLower);
		tolua_variable(L, "reference_m_probabilityLower", tolua_get_CGameEffectBase_reference_m_probabilityLower, NULL);
		tolua_variable(L, "m_res", tolua_get_CGameEffectBase_m_res, NULL);
		tolua_variable(L, "m_numDice", tolua_get_CGameEffectBase_m_numDice, tolua_set_CGameEffectBase_m_numDice);
		tolua_variable(L, "reference_m_numDice", tolua_get_CGameEffectBase_reference_m_numDice, NULL);
		tolua_variable(L, "m_diceSize", tolua_get_CGameEffectBase_m_diceSize, tolua_set_CGameEffectBase_m_diceSize);
		tolua_variable(L, "reference_m_diceSize", tolua_get_CGameEffectBase_reference_m_diceSize, NULL);
		tolua_variable(L, "m_savingThrow", tolua_get_CGameEffectBase_m_savingThrow, tolua_set_CGameEffectBase_m_savingThrow);
		tolua_variable(L, "reference_m_savingThrow", tolua_get_CGameEffectBase_reference_m_savingThrow, NULL);
		tolua_variable(L, "m_saveMod", tolua_get_CGameEffectBase_m_saveMod, tolua_set_CGameEffectBase_m_saveMod);
		tolua_variable(L, "reference_m_saveMod", tolua_get_CGameEffectBase_reference_m_saveMod, NULL);
		tolua_variable(L, "m_special", tolua_get_CGameEffectBase_m_special, tolua_set_CGameEffectBase_m_special);
		tolua_variable(L, "reference_m_special", tolua_get_CGameEffectBase_reference_m_special, NULL);
		tolua_variable(L, "m_school", tolua_get_CGameEffectBase_m_school, tolua_set_CGameEffectBase_m_school);
		tolua_variable(L, "reference_m_school", tolua_get_CGameEffectBase_reference_m_school, NULL);
		tolua_variable(L, "m_JeremyIsAnIdiot", tolua_get_CGameEffectBase_m_JeremyIsAnIdiot, tolua_set_CGameEffectBase_m_JeremyIsAnIdiot);
		tolua_variable(L, "reference_m_JeremyIsAnIdiot", tolua_get_CGameEffectBase_reference_m_JeremyIsAnIdiot, NULL);
		tolua_variable(L, "m_minLevel", tolua_get_CGameEffectBase_m_minLevel, tolua_set_CGameEffectBase_m_minLevel);
		tolua_variable(L, "reference_m_minLevel", tolua_get_CGameEffectBase_reference_m_minLevel, NULL);
		tolua_variable(L, "m_maxLevel", tolua_get_CGameEffectBase_m_maxLevel, tolua_set_CGameEffectBase_m_maxLevel);
		tolua_variable(L, "reference_m_maxLevel", tolua_get_CGameEffectBase_reference_m_maxLevel, NULL);
		tolua_variable(L, "m_flags", tolua_get_CGameEffectBase_m_flags, tolua_set_CGameEffectBase_m_flags);
		tolua_variable(L, "reference_m_flags", tolua_get_CGameEffectBase_reference_m_flags, NULL);
		tolua_variable(L, "m_effectAmount2", tolua_get_CGameEffectBase_m_effectAmount2, tolua_set_CGameEffectBase_m_effectAmount2);
		tolua_variable(L, "reference_m_effectAmount2", tolua_get_CGameEffectBase_reference_m_effectAmount2, NULL);
		tolua_variable(L, "m_effectAmount3", tolua_get_CGameEffectBase_m_effectAmount3, tolua_set_CGameEffectBase_m_effectAmount3);
		tolua_variable(L, "reference_m_effectAmount3", tolua_get_CGameEffectBase_reference_m_effectAmount3, NULL);
		tolua_variable(L, "m_effectAmount4", tolua_get_CGameEffectBase_m_effectAmount4, tolua_set_CGameEffectBase_m_effectAmount4);
		tolua_variable(L, "reference_m_effectAmount4", tolua_get_CGameEffectBase_reference_m_effectAmount4, NULL);
		tolua_variable(L, "m_effectAmount5", tolua_get_CGameEffectBase_m_effectAmount5, tolua_set_CGameEffectBase_m_effectAmount5);
		tolua_variable(L, "reference_m_effectAmount5", tolua_get_CGameEffectBase_reference_m_effectAmount5, NULL);
		tolua_variable(L, "m_res2", tolua_get_CGameEffectBase_m_res2, NULL);
		tolua_variable(L, "m_res3", tolua_get_CGameEffectBase_m_res3, NULL);
		tolua_variable(L, "m_source", tolua_get_CGameEffectBase_m_source, NULL);
		tolua_variable(L, "m_target", tolua_get_CGameEffectBase_m_target, NULL);
		tolua_variable(L, "m_sourceType", tolua_get_CGameEffectBase_m_sourceType, tolua_set_CGameEffectBase_m_sourceType);
		tolua_variable(L, "reference_m_sourceType", tolua_get_CGameEffectBase_reference_m_sourceType, NULL);
		tolua_variable(L, "m_sourceRes", tolua_get_CGameEffectBase_m_sourceRes, NULL);
		tolua_variable(L, "m_sourceFlags", tolua_get_CGameEffectBase_m_sourceFlags, tolua_set_CGameEffectBase_m_sourceFlags);
		tolua_variable(L, "reference_m_sourceFlags", tolua_get_CGameEffectBase_reference_m_sourceFlags, NULL);
		tolua_variable(L, "m_projectileType", tolua_get_CGameEffectBase_m_projectileType, tolua_set_CGameEffectBase_m_projectileType);
		tolua_variable(L, "reference_m_projectileType", tolua_get_CGameEffectBase_reference_m_projectileType, NULL);
		tolua_variable(L, "m_slotNum", tolua_get_CGameEffectBase_m_slotNum, tolua_set_CGameEffectBase_m_slotNum);
		tolua_variable(L, "reference_m_slotNum", tolua_get_CGameEffectBase_reference_m_slotNum, NULL);
		tolua_variable(L, "m_scriptName", tolua_get_CGameEffectBase_m_scriptName, NULL);
		tolua_variable(L, "m_casterLevel", tolua_get_CGameEffectBase_m_casterLevel, tolua_set_CGameEffectBase_m_casterLevel);
		tolua_variable(L, "reference_m_casterLevel", tolua_get_CGameEffectBase_reference_m_casterLevel, NULL);
		tolua_variable(L, "m_firstCall", tolua_get_CGameEffectBase_m_firstCall, tolua_set_CGameEffectBase_m_firstCall);
		tolua_variable(L, "reference_m_firstCall", tolua_get_CGameEffectBase_reference_m_firstCall, NULL);
		tolua_variable(L, "m_secondaryType", tolua_get_CGameEffectBase_m_secondaryType, tolua_set_CGameEffectBase_m_secondaryType);
		tolua_variable(L, "reference_m_secondaryType", tolua_get_CGameEffectBase_reference_m_secondaryType, NULL);
		tolua_variable(L, "m_pad", tolua_get_CGameEffectBase_m_pad, NULL);
		tolua_constant(L, "sizeof", sizeof(CGameEffectBase));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameEffect", "CGameEffect", {"CGameEffectBase"}, NULL);
	tolua_beginmodule(L, "CGameEffect");
		tolua_variable(L, "m_done", tolua_get_CGameEffect_m_done, tolua_set_CGameEffect_m_done);
		tolua_variable(L, "reference_m_done", tolua_get_CGameEffect_reference_m_done, NULL);
		tolua_function(L, "virtual_Destruct", &tolua_function_CGameEffect_virtual_Destruct);
		tolua_function(L, "virtual_Copy", &tolua_function_CGameEffect_virtual_Copy);
		tolua_function(L, "virtual_ApplyEffect", &tolua_function_CGameEffect_virtual_ApplyEffect);
		tolua_function(L, "virtual_ResolveEffect", &tolua_function_CGameEffect_virtual_ResolveEffect);
		tolua_function(L, "virtual_OnAddSpecific", &tolua_function_CGameEffect_virtual_OnAddSpecific);
		tolua_function(L, "virtual_CheckSave", &tolua_function_CGameEffect_virtual_CheckSave);
		tolua_function(L, "virtual_UsesDice", &tolua_function_CGameEffect_virtual_UsesDice);
		tolua_function(L, "virtual_DisplayString", &tolua_function_CGameEffect_virtual_DisplayString);
		tolua_constant(L, "sizeof", sizeof(CGameEffect));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameEffect::vtbl", "CGameEffect::vtbl", {}, NULL);
	tolua_beginmodule(L, "CGameEffect::vtbl");
		tolua_variable(L, "Destruct", tolua_get_CGameEffect__vtbl_Destruct, tolua_set_CGameEffect__vtbl_Destruct);
		tolua_variable(L, "reference_Destruct", tolua_get_CGameEffect__vtbl_reference_Destruct, NULL);
		tolua_variable(L, "Copy", tolua_get_CGameEffect__vtbl_Copy, tolua_set_CGameEffect__vtbl_Copy);
		tolua_variable(L, "reference_Copy", tolua_get_CGameEffect__vtbl_reference_Copy, NULL);
		tolua_variable(L, "ApplyEffect", tolua_get_CGameEffect__vtbl_ApplyEffect, tolua_set_CGameEffect__vtbl_ApplyEffect);
		tolua_variable(L, "reference_ApplyEffect", tolua_get_CGameEffect__vtbl_reference_ApplyEffect, NULL);
		tolua_variable(L, "ResolveEffect", tolua_get_CGameEffect__vtbl_ResolveEffect, tolua_set_CGameEffect__vtbl_ResolveEffect);
		tolua_variable(L, "reference_ResolveEffect", tolua_get_CGameEffect__vtbl_reference_ResolveEffect, NULL);
		tolua_variable(L, "OnAddSpecific", tolua_get_CGameEffect__vtbl_OnAddSpecific, tolua_set_CGameEffect__vtbl_OnAddSpecific);
		tolua_variable(L, "reference_OnAddSpecific", tolua_get_CGameEffect__vtbl_reference_OnAddSpecific, NULL);
		tolua_variable(L, "CheckSave", tolua_get_CGameEffect__vtbl_CheckSave, tolua_set_CGameEffect__vtbl_CheckSave);
		tolua_variable(L, "reference_CheckSave", tolua_get_CGameEffect__vtbl_reference_CheckSave, NULL);
		tolua_variable(L, "UsesDice", tolua_get_CGameEffect__vtbl_UsesDice, tolua_set_CGameEffect__vtbl_UsesDice);
		tolua_variable(L, "reference_UsesDice", tolua_get_CGameEffect__vtbl_reference_UsesDice, NULL);
		tolua_variable(L, "DisplayString", tolua_get_CGameEffect__vtbl_DisplayString, tolua_set_CGameEffect__vtbl_DisplayString);
		tolua_variable(L, "reference_DisplayString", tolua_get_CGameEffect__vtbl_reference_DisplayString, NULL);
		tolua_constant(L, "sizeof", sizeof(CGameEffect::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CChitin", "CChitin", {}, NULL);
	tolua_beginmodule(L, "CChitin");
		tolua_variable(L, "m_bEngineActive", tolua_get_CChitin_m_bEngineActive, tolua_set_CChitin_m_bEngineActive);
		tolua_variable(L, "reference_m_bEngineActive", tolua_get_CChitin_reference_m_bEngineActive, NULL);
		tolua_variable(L, "m_bResourceManagerThreadCreated", tolua_get_CChitin_m_bResourceManagerThreadCreated, tolua_set_CChitin_m_bResourceManagerThreadCreated);
		tolua_variable(L, "reference_m_bResourceManagerThreadCreated", tolua_get_CChitin_reference_m_bResourceManagerThreadCreated, NULL);
		tolua_variable(L, "m_lEngines", tolua_get_CChitin_m_lEngines, NULL);
		tolua_variable(L, "m_pEngineStart", tolua_get_CChitin_m_pEngineStart, tolua_set_CChitin_m_pEngineStart);
		tolua_variable(L, "reference_m_pEngineStart", tolua_get_CChitin_reference_m_pEngineStart, NULL);
		tolua_variable(L, "m_hWindow", tolua_get_CChitin_m_hWindow, tolua_set_CChitin_m_hWindow);
		tolua_variable(L, "reference_m_hWindow", tolua_get_CChitin_reference_m_hWindow, NULL);
		tolua_variable(L, "m_hSyncThread", tolua_get_CChitin_m_hSyncThread, tolua_set_CChitin_m_hSyncThread);
		tolua_variable(L, "reference_m_hSyncThread", tolua_get_CChitin_reference_m_hSyncThread, NULL);
		tolua_variable(L, "m_nEventTimerID", tolua_get_CChitin_m_nEventTimerID, NULL);
		tolua_variable(L, "m_nPeriodMax", tolua_get_CChitin_m_nPeriodMax, tolua_set_CChitin_m_nPeriodMax);
		tolua_variable(L, "reference_m_nPeriodMax", tolua_get_CChitin_reference_m_nPeriodMax, NULL);
		tolua_variable(L, "m_lpCmdLine", tolua_get_CChitin_m_lpCmdLine, NULL);
		tolua_variable(L, "m_bBlockMessages", tolua_get_CChitin_m_bBlockMessages, tolua_set_CChitin_m_bBlockMessages);
		tolua_variable(L, "reference_m_bBlockMessages", tolua_get_CChitin_reference_m_bBlockMessages, NULL);
		tolua_variable(L, "m_bFullScreen", tolua_get_CChitin_m_bFullScreen, tolua_set_CChitin_m_bFullScreen);
		tolua_variable(L, "reference_m_bFullScreen", tolua_get_CChitin_reference_m_bFullScreen, NULL);
		tolua_variable(L, "m_nPlatformId", tolua_get_CChitin_m_nPlatformId, tolua_set_CChitin_m_nPlatformId);
		tolua_variable(L, "reference_m_nPlatformId", tolua_get_CChitin_reference_m_nPlatformId, NULL);
		tolua_variable(L, "m_sProductName", tolua_get_CChitin_m_sProductName, NULL);
		tolua_variable(L, "m_bSoundInitialized", tolua_get_CChitin_m_bSoundInitialized, tolua_set_CChitin_m_bSoundInitialized);
		tolua_variable(L, "reference_m_bSoundInitialized", tolua_get_CChitin_reference_m_bSoundInitialized, NULL);
		tolua_variable(L, "m_nQueryCancelAutoPlayMsg", tolua_get_CChitin_m_nQueryCancelAutoPlayMsg, tolua_set_CChitin_m_nQueryCancelAutoPlayMsg);
		tolua_variable(L, "reference_m_nQueryCancelAutoPlayMsg", tolua_get_CChitin_reference_m_nQueryCancelAutoPlayMsg, NULL);
		tolua_variable(L, "m_hEventTimer", tolua_get_CChitin_m_hEventTimer, tolua_set_CChitin_m_hEventTimer);
		tolua_variable(L, "reference_m_hEventTimer", tolua_get_CChitin_reference_m_hEventTimer, NULL);
		tolua_variable(L, "m_hResourceManagerThread", tolua_get_CChitin_m_hResourceManagerThread, tolua_set_CChitin_m_hResourceManagerThread);
		tolua_variable(L, "reference_m_hResourceManagerThread", tolua_get_CChitin_reference_m_hResourceManagerThread, NULL);
		tolua_variable(L, "m_hNetworkThread", tolua_get_CChitin_m_hNetworkThread, tolua_set_CChitin_m_hNetworkThread);
		tolua_variable(L, "reference_m_hNetworkThread", tolua_get_CChitin_reference_m_hNetworkThread, NULL);
		tolua_variable(L, "m_hAsyncThread", tolua_get_CChitin_m_hAsyncThread, tolua_set_CChitin_m_hAsyncThread);
		tolua_variable(L, "reference_m_hAsyncThread", tolua_get_CChitin_reference_m_hAsyncThread, NULL);
		tolua_variable(L, "m_bAsyncThreadDone", tolua_get_CChitin_m_bAsyncThreadDone, tolua_set_CChitin_m_bAsyncThreadDone);
		tolua_variable(L, "reference_m_bAsyncThreadDone", tolua_get_CChitin_reference_m_bAsyncThreadDone, NULL);
		tolua_variable(L, "m_pActiveEngine", tolua_get_CChitin_m_pActiveEngine, tolua_set_CChitin_m_pActiveEngine);
		tolua_variable(L, "reference_m_pActiveEngine", tolua_get_CChitin_reference_m_pActiveEngine, NULL);
		tolua_variable(L, "m_cSoundMixer", tolua_get_CChitin_m_cSoundMixer, NULL);
		tolua_variable(L, "m_resourceManager", tolua_get_CChitin_m_resourceManager, NULL);
		tolua_variable(L, "m_cVideo", tolua_get_CChitin_m_cVideo, NULL);
		tolua_variable(L, "m_cNetwork", tolua_get_CChitin_m_cNetwork, NULL);
		tolua_variable(L, "m_cursorPos", tolua_get_CChitin_m_cursorPos, NULL);
		tolua_variable(L, "m_bInAsyncUpdate", tolua_get_CChitin_m_bInAsyncUpdate, tolua_set_CChitin_m_bInAsyncUpdate);
		tolua_variable(L, "reference_m_bInAsyncUpdate", tolua_get_CChitin_reference_m_bInAsyncUpdate, NULL);
		tolua_variable(L, "m_bShuttingDown", tolua_get_CChitin_m_bShuttingDown, tolua_set_CChitin_m_bShuttingDown);
		tolua_variable(L, "reference_m_bShuttingDown", tolua_get_CChitin_reference_m_bShuttingDown, NULL);
		tolua_variable(L, "m_bDisplayStale", tolua_get_CChitin_m_bDisplayStale, tolua_set_CChitin_m_bDisplayStale);
		tolua_variable(L, "reference_m_bDisplayStale", tolua_get_CChitin_reference_m_bDisplayStale, NULL);
		tolua_variable(L, "m_bInSyncUpdate", tolua_get_CChitin_m_bInSyncUpdate, tolua_set_CChitin_m_bInSyncUpdate);
		tolua_variable(L, "reference_m_bInSyncUpdate", tolua_get_CChitin_reference_m_bInSyncUpdate, NULL);
		tolua_variable(L, "m_cProgressBar", tolua_get_CChitin_m_cProgressBar, NULL);
		tolua_variable(L, "m_bTravelActive", tolua_get_CChitin_m_bTravelActive, tolua_set_CChitin_m_bTravelActive);
		tolua_variable(L, "reference_m_bTravelActive", tolua_get_CChitin_reference_m_bTravelActive, NULL);
		tolua_variable(L, "m_bProgressBarActivated", tolua_get_CChitin_m_bProgressBarActivated, tolua_set_CChitin_m_bProgressBarActivated);
		tolua_variable(L, "reference_m_bProgressBarActivated", tolua_get_CChitin_reference_m_bProgressBarActivated, NULL);
		tolua_variable(L, "m_aThreadIds", tolua_get_CChitin_m_aThreadIds, NULL);
		tolua_variable(L, "m_nThreads", tolua_get_CChitin_m_nThreads, tolua_set_CChitin_m_nThreads);
		tolua_variable(L, "reference_m_nThreads", tolua_get_CChitin_reference_m_nThreads, NULL);
		tolua_variable(L, "m_bNTSmoothSoundInitialized", tolua_get_CChitin_m_bNTSmoothSoundInitialized, tolua_set_CChitin_m_bNTSmoothSoundInitialized);
		tolua_variable(L, "reference_m_bNTSmoothSoundInitialized", tolua_get_CChitin_reference_m_bNTSmoothSoundInitialized, NULL);
		tolua_function(L, "AddThread", &tolua_function_CChitin_AddThread);
		tolua_function(L, "ParseCommandLine", &tolua_function_CChitin_ParseCommandLine);
		tolua_function(L, "SetSyncThreadHandle", &tolua_function_CChitin_SetSyncThreadHandle);
		tolua_function(L, "SetupThreads", &tolua_function_CChitin_SetupThreads);
		tolua_function(L, "virtual_SynchronousUpdate", &tolua_function_CChitin_virtual_SynchronousUpdate);
		tolua_function(L, "virtual_RegisterCreateWindow", &tolua_function_CChitin_virtual_RegisterCreateWindow);
		tolua_function(L, "virtual_AllocResObject", &tolua_function_CChitin_virtual_AllocResObject);
		tolua_function(L, "virtual_GetFileTypeExtension", &tolua_function_CChitin_virtual_GetFileTypeExtension);
		tolua_function(L, "virtual_CreateWindow", &tolua_function_CChitin_virtual_CreateWindow);
		tolua_function(L, "virtual_SetProgressBar", &tolua_function_CChitin_virtual_SetProgressBar);
		tolua_function(L, "virtual_AsynchronousUpdate", &tolua_function_CChitin_virtual_AsynchronousUpdate);
		tolua_function(L, "virtual_SelectEngine", &tolua_function_CChitin_virtual_SelectEngine);
		tolua_function(L, "virtual_ShutDown", &tolua_function_CChitin_virtual_ShutDown);
		tolua_function(L, "virtual_GetVideoModeErrorResourceStringID", &tolua_function_CChitin_virtual_GetVideoModeErrorResourceStringID);
		tolua_constant(L, "sizeof", sizeof(CChitin));
	tolua_endmodule(L);
	tolua_cclass(L, "CChitin::vtbl", "CChitin::vtbl", {}, NULL);
	tolua_beginmodule(L, "CChitin::vtbl");
		tolua_variable(L, "SynchronousUpdate", tolua_get_CChitin__vtbl_SynchronousUpdate, tolua_set_CChitin__vtbl_SynchronousUpdate);
		tolua_variable(L, "reference_SynchronousUpdate", tolua_get_CChitin__vtbl_reference_SynchronousUpdate, NULL);
		tolua_variable(L, "RegisterCreateWindow", tolua_get_CChitin__vtbl_RegisterCreateWindow, tolua_set_CChitin__vtbl_RegisterCreateWindow);
		tolua_variable(L, "reference_RegisterCreateWindow", tolua_get_CChitin__vtbl_reference_RegisterCreateWindow, NULL);
		tolua_variable(L, "AllocResObject", tolua_get_CChitin__vtbl_AllocResObject, tolua_set_CChitin__vtbl_AllocResObject);
		tolua_variable(L, "reference_AllocResObject", tolua_get_CChitin__vtbl_reference_AllocResObject, NULL);
		tolua_variable(L, "GetFileTypeExtension", tolua_get_CChitin__vtbl_GetFileTypeExtension, tolua_set_CChitin__vtbl_GetFileTypeExtension);
		tolua_variable(L, "reference_GetFileTypeExtension", tolua_get_CChitin__vtbl_reference_GetFileTypeExtension, NULL);
		tolua_variable(L, "CreateWindow", tolua_get_CChitin__vtbl_CreateWindow, tolua_set_CChitin__vtbl_CreateWindow);
		tolua_variable(L, "reference_CreateWindow", tolua_get_CChitin__vtbl_reference_CreateWindow, NULL);
		tolua_variable(L, "SetProgressBar", tolua_get_CChitin__vtbl_SetProgressBar, tolua_set_CChitin__vtbl_SetProgressBar);
		tolua_variable(L, "reference_SetProgressBar", tolua_get_CChitin__vtbl_reference_SetProgressBar, NULL);
		tolua_variable(L, "AsynchronousUpdate", tolua_get_CChitin__vtbl_AsynchronousUpdate, tolua_set_CChitin__vtbl_AsynchronousUpdate);
		tolua_variable(L, "reference_AsynchronousUpdate", tolua_get_CChitin__vtbl_reference_AsynchronousUpdate, NULL);
		tolua_variable(L, "SelectEngine", tolua_get_CChitin__vtbl_SelectEngine, tolua_set_CChitin__vtbl_SelectEngine);
		tolua_variable(L, "reference_SelectEngine", tolua_get_CChitin__vtbl_reference_SelectEngine, NULL);
		tolua_variable(L, "ShutDown", tolua_get_CChitin__vtbl_ShutDown, tolua_set_CChitin__vtbl_ShutDown);
		tolua_variable(L, "reference_ShutDown", tolua_get_CChitin__vtbl_reference_ShutDown, NULL);
		tolua_variable(L, "GetIniName", tolua_get_CChitin__vtbl_GetIniName, tolua_set_CChitin__vtbl_GetIniName);
		tolua_variable(L, "reference_GetIniName", tolua_get_CChitin__vtbl_reference_GetIniName, NULL);
		tolua_variable(L, "GetVideoModeErrorResourceStringID", tolua_get_CChitin__vtbl_GetVideoModeErrorResourceStringID, tolua_set_CChitin__vtbl_GetVideoModeErrorResourceStringID);
		tolua_variable(L, "reference_GetVideoModeErrorResourceStringID", tolua_get_CChitin__vtbl_reference_GetVideoModeErrorResourceStringID, NULL);
		tolua_constant(L, "sizeof", sizeof(CChitin::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CBaldurChitin", "CBaldurChitin", {"CChitin"}, NULL);
	tolua_beginmodule(L, "CBaldurChitin");
		tolua_variable(L, "m_pObjectCursor", tolua_get_CBaldurChitin_m_pObjectCursor, tolua_set_CBaldurChitin_m_pObjectCursor);
		tolua_variable(L, "reference_m_pObjectCursor", tolua_get_CBaldurChitin_reference_m_pObjectCursor, NULL);
		tolua_variable(L, "m_pObjectGame", tolua_get_CBaldurChitin_m_pObjectGame, tolua_set_CBaldurChitin_m_pObjectGame);
		tolua_variable(L, "reference_m_pObjectGame", tolua_get_CBaldurChitin_reference_m_pObjectGame, NULL);
		tolua_variable(L, "m_pUnknownEngine4", tolua_get_CBaldurChitin_m_pUnknownEngine4, tolua_set_CBaldurChitin_m_pUnknownEngine4);
		tolua_variable(L, "reference_m_pUnknownEngine4", tolua_get_CBaldurChitin_reference_m_pUnknownEngine4, NULL);
		tolua_variable(L, "m_pEngineProjector", tolua_get_CBaldurChitin_m_pEngineProjector, tolua_set_CBaldurChitin_m_pEngineProjector);
		tolua_variable(L, "reference_m_pEngineProjector", tolua_get_CBaldurChitin_reference_m_pEngineProjector, NULL);
		tolua_variable(L, "m_pUnknownEngine2", tolua_get_CBaldurChitin_m_pUnknownEngine2, tolua_set_CBaldurChitin_m_pUnknownEngine2);
		tolua_variable(L, "reference_m_pUnknownEngine2", tolua_get_CBaldurChitin_reference_m_pUnknownEngine2, NULL);
		tolua_variable(L, "m_pUnknownEngine5", tolua_get_CBaldurChitin_m_pUnknownEngine5, tolua_set_CBaldurChitin_m_pUnknownEngine5);
		tolua_variable(L, "reference_m_pUnknownEngine5", tolua_get_CBaldurChitin_reference_m_pUnknownEngine5, NULL);
		tolua_variable(L, "m_pUnknownEngine6", tolua_get_CBaldurChitin_m_pUnknownEngine6, tolua_set_CBaldurChitin_m_pUnknownEngine6);
		tolua_variable(L, "reference_m_pUnknownEngine6", tolua_get_CBaldurChitin_reference_m_pUnknownEngine6, NULL);
		tolua_variable(L, "m_pUnknownEngine7", tolua_get_CBaldurChitin_m_pUnknownEngine7, tolua_set_CBaldurChitin_m_pUnknownEngine7);
		tolua_variable(L, "reference_m_pUnknownEngine7", tolua_get_CBaldurChitin_reference_m_pUnknownEngine7, NULL);
		tolua_variable(L, "m_pUnknownEngine8", tolua_get_CBaldurChitin_m_pUnknownEngine8, tolua_set_CBaldurChitin_m_pUnknownEngine8);
		tolua_variable(L, "reference_m_pUnknownEngine8", tolua_get_CBaldurChitin_reference_m_pUnknownEngine8, NULL);
		tolua_variable(L, "m_pUnknownEngine9", tolua_get_CBaldurChitin_m_pUnknownEngine9, tolua_set_CBaldurChitin_m_pUnknownEngine9);
		tolua_variable(L, "reference_m_pUnknownEngine9", tolua_get_CBaldurChitin_reference_m_pUnknownEngine9, NULL);
		tolua_variable(L, "m_pEngineMap", tolua_get_CBaldurChitin_m_pEngineMap, tolua_set_CBaldurChitin_m_pEngineMap);
		tolua_variable(L, "reference_m_pEngineMap", tolua_get_CBaldurChitin_reference_m_pEngineMap, NULL);
		tolua_variable(L, "m_pUnknownEngine11", tolua_get_CBaldurChitin_m_pUnknownEngine11, tolua_set_CBaldurChitin_m_pUnknownEngine11);
		tolua_variable(L, "reference_m_pUnknownEngine11", tolua_get_CBaldurChitin_reference_m_pUnknownEngine11, NULL);
		tolua_variable(L, "m_pUnknownEngine12", tolua_get_CBaldurChitin_m_pUnknownEngine12, tolua_set_CBaldurChitin_m_pUnknownEngine12);
		tolua_variable(L, "reference_m_pUnknownEngine12", tolua_get_CBaldurChitin_reference_m_pUnknownEngine12, NULL);
		tolua_variable(L, "m_pUnknownEngine13", tolua_get_CBaldurChitin_m_pUnknownEngine13, tolua_set_CBaldurChitin_m_pUnknownEngine13);
		tolua_variable(L, "reference_m_pUnknownEngine13", tolua_get_CBaldurChitin_reference_m_pUnknownEngine13, NULL);
		tolua_variable(L, "m_pUnknownEngine14", tolua_get_CBaldurChitin_m_pUnknownEngine14, tolua_set_CBaldurChitin_m_pUnknownEngine14);
		tolua_variable(L, "reference_m_pUnknownEngine14", tolua_get_CBaldurChitin_reference_m_pUnknownEngine14, NULL);
		tolua_variable(L, "m_pUnknownEngine15", tolua_get_CBaldurChitin_m_pUnknownEngine15, tolua_set_CBaldurChitin_m_pUnknownEngine15);
		tolua_variable(L, "reference_m_pUnknownEngine15", tolua_get_CBaldurChitin_reference_m_pUnknownEngine15, NULL);
		tolua_variable(L, "m_pEngineWorld", tolua_get_CBaldurChitin_m_pEngineWorld, tolua_set_CBaldurChitin_m_pEngineWorld);
		tolua_variable(L, "reference_m_pEngineWorld", tolua_get_CBaldurChitin_reference_m_pEngineWorld, NULL);
		tolua_variable(L, "m_pUnknownEngine16", tolua_get_CBaldurChitin_m_pUnknownEngine16, tolua_set_CBaldurChitin_m_pUnknownEngine16);
		tolua_variable(L, "reference_m_pUnknownEngine16", tolua_get_CBaldurChitin_reference_m_pUnknownEngine16, NULL);
		tolua_variable(L, "m_pUnknownEngine17", tolua_get_CBaldurChitin_m_pUnknownEngine17, tolua_set_CBaldurChitin_m_pUnknownEngine17);
		tolua_variable(L, "reference_m_pUnknownEngine17", tolua_get_CBaldurChitin_reference_m_pUnknownEngine17, NULL);
		tolua_variable(L, "m_pEngineConnection", tolua_get_CBaldurChitin_m_pEngineConnection, tolua_set_CBaldurChitin_m_pEngineConnection);
		tolua_variable(L, "reference_m_pEngineConnection", tolua_get_CBaldurChitin_reference_m_pEngineConnection, NULL);
		tolua_variable(L, "m_pEngineWorldMap", tolua_get_CBaldurChitin_m_pEngineWorldMap, tolua_set_CBaldurChitin_m_pEngineWorldMap);
		tolua_variable(L, "reference_m_pEngineWorldMap", tolua_get_CBaldurChitin_reference_m_pEngineWorldMap, NULL);
		tolua_variable(L, "m_pUnknownEngine18", tolua_get_CBaldurChitin_m_pUnknownEngine18, tolua_set_CBaldurChitin_m_pUnknownEngine18);
		tolua_variable(L, "reference_m_pUnknownEngine18", tolua_get_CBaldurChitin_reference_m_pUnknownEngine18, NULL);
		tolua_variable(L, "m_pUnknownEngine19", tolua_get_CBaldurChitin_m_pUnknownEngine19, tolua_set_CBaldurChitin_m_pUnknownEngine19);
		tolua_variable(L, "reference_m_pUnknownEngine19", tolua_get_CBaldurChitin_reference_m_pUnknownEngine19, NULL);
		tolua_variable(L, "m_cTlkTable", tolua_get_CBaldurChitin_m_cTlkTable, NULL);
		tolua_variable(L, "m_cCachingStatus", tolua_get_CBaldurChitin_m_cCachingStatus, NULL);
		tolua_variable(L, "m_cMessageHandler", tolua_get_CBaldurChitin_m_cMessageHandler, NULL);
		tolua_function(L, "Export_AsyncThread", &tolua_function_CBaldurChitin_Export_AsyncThread);
		tolua_constant(L, "sizeof", sizeof(CBaldurChitin));
	tolua_endmodule(L);
	tolua_cclass(L, "CBaldurChitin::vtbl", "CBaldurChitin::vtbl", {"CChitin::vtbl"}, NULL);
	tolua_beginmodule(L, "CBaldurChitin::vtbl");
		tolua_constant(L, "sizeof", sizeof(CBaldurChitin::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CAIObjectType", "CAIObjectType", {}, NULL);
	tolua_beginmodule(L, "CAIObjectType");
		tolua_variable(L, "m_name", tolua_get_CAIObjectType_m_name, NULL);
		tolua_variable(L, "m_EnemyAlly", tolua_get_CAIObjectType_m_EnemyAlly, tolua_set_CAIObjectType_m_EnemyAlly);
		tolua_variable(L, "reference_m_EnemyAlly", tolua_get_CAIObjectType_reference_m_EnemyAlly, NULL);
		tolua_variable(L, "m_General", tolua_get_CAIObjectType_m_General, tolua_set_CAIObjectType_m_General);
		tolua_variable(L, "reference_m_General", tolua_get_CAIObjectType_reference_m_General, NULL);
		tolua_variable(L, "m_Race", tolua_get_CAIObjectType_m_Race, tolua_set_CAIObjectType_m_Race);
		tolua_variable(L, "reference_m_Race", tolua_get_CAIObjectType_reference_m_Race, NULL);
		tolua_variable(L, "m_Class", tolua_get_CAIObjectType_m_Class, tolua_set_CAIObjectType_m_Class);
		tolua_variable(L, "reference_m_Class", tolua_get_CAIObjectType_reference_m_Class, NULL);
		tolua_variable(L, "m_Instance", tolua_get_CAIObjectType_m_Instance, tolua_set_CAIObjectType_m_Instance);
		tolua_variable(L, "reference_m_Instance", tolua_get_CAIObjectType_reference_m_Instance, NULL);
		tolua_variable(L, "m_SpecialCase", tolua_get_CAIObjectType_m_SpecialCase, NULL);
		tolua_variable(L, "m_Specifics", tolua_get_CAIObjectType_m_Specifics, tolua_set_CAIObjectType_m_Specifics);
		tolua_variable(L, "reference_m_Specifics", tolua_get_CAIObjectType_reference_m_Specifics, NULL);
		tolua_variable(L, "m_Gender", tolua_get_CAIObjectType_m_Gender, tolua_set_CAIObjectType_m_Gender);
		tolua_variable(L, "reference_m_Gender", tolua_get_CAIObjectType_reference_m_Gender, NULL);
		tolua_variable(L, "m_Alignment", tolua_get_CAIObjectType_m_Alignment, tolua_set_CAIObjectType_m_Alignment);
		tolua_variable(L, "reference_m_Alignment", tolua_get_CAIObjectType_reference_m_Alignment, NULL);
		tolua_constant(L, "sizeof", sizeof(CAIObjectType));
	tolua_endmodule(L);
	tolua_cclass(L, "CAIAction", "CAIAction", {}, NULL);
	tolua_beginmodule(L, "CAIAction");
		tolua_variable(L, "m_actionID", tolua_get_CAIAction_m_actionID, tolua_set_CAIAction_m_actionID);
		tolua_variable(L, "reference_m_actionID", tolua_get_CAIAction_reference_m_actionID, NULL);
		tolua_variable(L, "m_actorID", tolua_get_CAIAction_m_actorID, NULL);
		tolua_variable(L, "m_acteeID", tolua_get_CAIAction_m_acteeID, NULL);
		tolua_variable(L, "m_acteeID2", tolua_get_CAIAction_m_acteeID2, NULL);
		tolua_variable(L, "m_specificID", tolua_get_CAIAction_m_specificID, tolua_set_CAIAction_m_specificID);
		tolua_variable(L, "reference_m_specificID", tolua_get_CAIAction_reference_m_specificID, NULL);
		tolua_variable(L, "m_specificID2", tolua_get_CAIAction_m_specificID2, tolua_set_CAIAction_m_specificID2);
		tolua_variable(L, "reference_m_specificID2", tolua_get_CAIAction_reference_m_specificID2, NULL);
		tolua_variable(L, "m_specificID3", tolua_get_CAIAction_m_specificID3, tolua_set_CAIAction_m_specificID3);
		tolua_variable(L, "reference_m_specificID3", tolua_get_CAIAction_reference_m_specificID3, NULL);
		tolua_variable(L, "m_string1", tolua_get_CAIAction_m_string1, NULL);
		tolua_variable(L, "m_string2", tolua_get_CAIAction_m_string2, NULL);
		tolua_variable(L, "m_dest", tolua_get_CAIAction_m_dest, NULL);
		tolua_variable(L, "m_internalFlags", tolua_get_CAIAction_m_internalFlags, tolua_set_CAIAction_m_internalFlags);
		tolua_variable(L, "reference_m_internalFlags", tolua_get_CAIAction_reference_m_internalFlags, NULL);
		tolua_constant(L, "sizeof", sizeof(CAIAction));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameObject", "CGameObject", {}, NULL);
	tolua_beginmodule(L, "CGameObject");
		tolua_variable(L, "m_pos", tolua_get_CGameObject_m_pos, NULL);
		tolua_variable(L, "m_posZ", tolua_get_CGameObject_m_posZ, tolua_set_CGameObject_m_posZ);
		tolua_variable(L, "reference_m_posZ", tolua_get_CGameObject_reference_m_posZ, NULL);
		tolua_variable(L, "pArea", tolua_get_CGameObject_pArea, tolua_set_CGameObject_pArea);
		tolua_variable(L, "reference_pArea", tolua_get_CGameObject_reference_pArea, NULL);
		tolua_variable(L, "m_posVertList", tolua_get_CGameObject_m_posVertList, tolua_set_CGameObject_m_posVertList);
		tolua_variable(L, "reference_m_posVertList", tolua_get_CGameObject_reference_m_posVertList, NULL);
		tolua_variable(L, "m_listType", tolua_get_CGameObject_m_listType, tolua_set_CGameObject_m_listType);
		tolua_variable(L, "reference_m_listType", tolua_get_CGameObject_reference_m_listType, NULL);
		tolua_variable(L, "m_typeAI", tolua_get_CGameObject_m_typeAI, NULL);
		tolua_variable(L, "m_id", tolua_get_CGameObject_m_id, tolua_set_CGameObject_m_id);
		tolua_variable(L, "reference_m_id", tolua_get_CGameObject_reference_m_id, NULL);
		tolua_variable(L, "m_canBeSeen", tolua_get_CGameObject_m_canBeSeen, tolua_set_CGameObject_m_canBeSeen);
		tolua_variable(L, "reference_m_canBeSeen", tolua_get_CGameObject_reference_m_canBeSeen, NULL);
		tolua_variable(L, "m_AISpeed", tolua_get_CGameObject_m_AISpeed, tolua_set_CGameObject_m_AISpeed);
		tolua_variable(L, "reference_m_AISpeed", tolua_get_CGameObject_reference_m_AISpeed, NULL);
		tolua_function(L, "virtual_VirtualDestruct", &tolua_function_CGameObject_virtual_VirtualDestruct);
		tolua_function(L, "virtual_GetObjectType", &tolua_function_CGameObject_virtual_GetObjectType);
		tolua_function(L, "virtual_GetAIType", &tolua_function_CGameObject_virtual_GetAIType);
		tolua_function(L, "virtual_RemoveFromArea", &tolua_function_CGameObject_virtual_RemoveFromArea);
		tolua_function(L, "virtual_Render", &tolua_function_CGameObject_virtual_Render);
		tolua_constant(L, "sizeof", sizeof(CGameObject));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameObject::vtbl", "CGameObject::vtbl", {}, NULL);
	tolua_beginmodule(L, "CGameObject::vtbl");
		tolua_variable(L, "VirtualDestruct", tolua_get_CGameObject__vtbl_VirtualDestruct, tolua_set_CGameObject__vtbl_VirtualDestruct);
		tolua_variable(L, "reference_VirtualDestruct", tolua_get_CGameObject__vtbl_reference_VirtualDestruct, NULL);
		tolua_variable(L, "GetObjectType", tolua_get_CGameObject__vtbl_GetObjectType, tolua_set_CGameObject__vtbl_GetObjectType);
		tolua_variable(L, "reference_GetObjectType", tolua_get_CGameObject__vtbl_reference_GetObjectType, NULL);
		tolua_variable(L, "GetAIType", tolua_get_CGameObject__vtbl_GetAIType, tolua_set_CGameObject__vtbl_GetAIType);
		tolua_variable(L, "reference_GetAIType", tolua_get_CGameObject__vtbl_reference_GetAIType, NULL);
		tolua_variable(L, "RemoveFromArea", tolua_get_CGameObject__vtbl_RemoveFromArea, tolua_set_CGameObject__vtbl_RemoveFromArea);
		tolua_variable(L, "reference_RemoveFromArea", tolua_get_CGameObject__vtbl_reference_RemoveFromArea, NULL);
		tolua_variable(L, "Render", tolua_get_CGameObject__vtbl_Render, tolua_set_CGameObject__vtbl_Render);
		tolua_variable(L, "reference_Render", tolua_get_CGameObject__vtbl_reference_Render, NULL);
		tolua_constant(L, "sizeof", sizeof(CGameObject::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CProjectile", "CProjectile", {"CGameObject"}, NULL);
	tolua_beginmodule(L, "CProjectile");
		tolua_variable(L, "m_projectileType", tolua_get_CProjectile_m_projectileType, tolua_set_CProjectile_m_projectileType);
		tolua_variable(L, "reference_m_projectileType", tolua_get_CProjectile_reference_m_projectileType, NULL);
		tolua_variable(L, "m_sourceId", tolua_get_CProjectile_m_sourceId, tolua_set_CProjectile_m_sourceId);
		tolua_variable(L, "reference_m_sourceId", tolua_get_CProjectile_reference_m_sourceId, NULL);
		tolua_variable(L, "m_targetId", tolua_get_CProjectile_m_targetId, tolua_set_CProjectile_m_targetId);
		tolua_variable(L, "reference_m_targetId", tolua_get_CProjectile_reference_m_targetId, NULL);
		tolua_variable(L, "m_callBackProjectile", tolua_get_CProjectile_m_callBackProjectile, tolua_set_CProjectile_m_callBackProjectile);
		tolua_variable(L, "reference_m_callBackProjectile", tolua_get_CProjectile_reference_m_callBackProjectile, NULL);
		tolua_variable(L, "m_effectList", tolua_get_CProjectile_m_effectList, NULL);
		tolua_function(L, "virtual_Fire", &tolua_function_CProjectile_virtual_Fire);
		tolua_function(L, "virtual_OnArrival", &tolua_function_CProjectile_virtual_OnArrival);
		tolua_constant(L, "sizeof", sizeof(CProjectile));
	tolua_endmodule(L);
	tolua_cclass(L, "CProjectile::vtbl", "CProjectile::vtbl", {"CGameObject::vtbl"}, NULL);
	tolua_beginmodule(L, "CProjectile::vtbl");
		tolua_variable(L, "Fire", tolua_get_CProjectile__vtbl_Fire, tolua_set_CProjectile__vtbl_Fire);
		tolua_variable(L, "reference_Fire", tolua_get_CProjectile__vtbl_reference_Fire, NULL);
		tolua_variable(L, "OnArrival", tolua_get_CProjectile__vtbl_OnArrival, tolua_set_CProjectile__vtbl_OnArrival);
		tolua_variable(L, "reference_OnArrival", tolua_get_CProjectile__vtbl_reference_OnArrival, NULL);
		tolua_constant(L, "sizeof", sizeof(CProjectile::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CProjectileMagicMissile", "CProjectileMagicMissile", {"CProjectile"}, NULL);
	tolua_beginmodule(L, "CProjectileMagicMissile");
		tolua_constant(L, "sizeof", sizeof(CProjectileMagicMissile));
	tolua_endmodule(L);
	tolua_cclass(L, "CProjectileMagicMissile::vtbl", "CProjectileMagicMissile::vtbl", {"CProjectile::vtbl"}, NULL);
	tolua_beginmodule(L, "CProjectileMagicMissile::vtbl");
		tolua_constant(L, "sizeof", sizeof(CProjectileMagicMissile::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameAIBase", "CGameAIBase", {"CGameObject"}, NULL);
	tolua_beginmodule(L, "CGameAIBase");
		tolua_variable(L, "m_lAttacker", tolua_get_CGameAIBase_m_lAttacker, NULL);
		tolua_variable(L, "m_curAction", tolua_get_CGameAIBase_m_curAction, NULL);
		tolua_variable(L, "m_scriptName", tolua_get_CGameAIBase_m_scriptName, NULL);
		tolua_function(L, "virtual_AddEffect", &tolua_function_CGameAIBase_virtual_AddEffect);
		tolua_constant(L, "sizeof", sizeof(CGameAIBase));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameAIBase::vtbl", "CGameAIBase::vtbl", {"CGameObject::vtbl"}, NULL);
	tolua_beginmodule(L, "CGameAIBase::vtbl");
		tolua_variable(L, "AddEffect", tolua_get_CGameAIBase__vtbl_AddEffect, tolua_set_CGameAIBase__vtbl_AddEffect);
		tolua_variable(L, "reference_AddEffect", tolua_get_CGameAIBase__vtbl_reference_AddEffect, NULL);
		tolua_constant(L, "sizeof", sizeof(CGameAIBase::vtbl));
	tolua_endmodule(L);
	tolua_cclass(L, "CGameSprite", "CGameSprite", {"CGameAIBase"}, NULL);
	tolua_beginmodule(L, "CGameSprite");
		tolua_variable(L, "m_baseStats__m_name", tolua_get_CGameSprite_m_baseStats__m_name, tolua_set_CGameSprite_m_baseStats__m_name);
		tolua_variable(L, "reference_m_baseStats__m_name", tolua_get_CGameSprite_reference_m_baseStats__m_name, NULL);
		tolua_variable(L, "m_baseStats__m_hitPoints", tolua_get_CGameSprite_m_baseStats__m_hitPoints, tolua_set_CGameSprite_m_baseStats__m_hitPoints);
		tolua_variable(L, "reference_m_baseStats__m_hitPoints", tolua_get_CGameSprite_reference_m_baseStats__m_hitPoints, NULL);
		tolua_variable(L, "m_derivedStats", tolua_get_CGameSprite_m_derivedStats, NULL);
		tolua_variable(L, "m_tempStats", tolua_get_CGameSprite_m_tempStats, NULL);
		tolua_variable(L, "m_bonusStats", tolua_get_CGameSprite_m_bonusStats, NULL);
		tolua_variable(L, "m_terrainTable", tolua_get_CGameSprite_m_terrainTable, NULL);
		tolua_variable(L, "m_animation", tolua_get_CGameSprite_m_animation, NULL);
		tolua_variable(L, "m_spriteEffectDuration", tolua_get_CGameSprite_m_spriteEffectDuration, tolua_set_CGameSprite_m_spriteEffectDuration);
		tolua_variable(L, "reference_m_spriteEffectDuration", tolua_get_CGameSprite_reference_m_spriteEffectDuration, NULL);
		tolua_variable(L, "m_nMirrorImages", tolua_get_CGameSprite_m_nMirrorImages, tolua_set_CGameSprite_m_nMirrorImages);
		tolua_variable(L, "reference_m_nMirrorImages", tolua_get_CGameSprite_reference_m_nMirrorImages, NULL);
		tolua_variable(L, "m_bBlur", tolua_get_CGameSprite_m_bBlur, tolua_set_CGameSprite_m_bBlur);
		tolua_variable(L, "reference_m_bBlur", tolua_get_CGameSprite_reference_m_bBlur, NULL);
		tolua_variable(L, "m_bGreasePool", tolua_get_CGameSprite_m_bGreasePool, tolua_set_CGameSprite_m_bGreasePool);
		tolua_variable(L, "reference_m_bGreasePool", tolua_get_CGameSprite_reference_m_bGreasePool, NULL);
		tolua_variable(L, "m_greasePoolVidCell", tolua_get_CGameSprite_m_greasePoolVidCell, NULL);
		tolua_variable(L, "m_lstBlood", tolua_get_CGameSprite_m_lstBlood, NULL);
		tolua_variable(L, "m_equipedEffectList", tolua_get_CGameSprite_m_equipedEffectList, NULL);
		tolua_variable(L, "m_timedEffectList", tolua_get_CGameSprite_m_timedEffectList, NULL);
		tolua_variable(L, "m_curProjectile", tolua_get_CGameSprite_m_curProjectile, tolua_set_CGameSprite_m_curProjectile);
		tolua_variable(L, "reference_m_curProjectile", tolua_get_CGameSprite_reference_m_curProjectile, NULL);
		tolua_variable(L, "m_newEffect", tolua_get_CGameSprite_m_newEffect, tolua_set_CGameSprite_m_newEffect);
		tolua_variable(L, "reference_m_newEffect", tolua_get_CGameSprite_reference_m_newEffect, NULL);
		tolua_constant(L, "sizeof", sizeof(CGameSprite));
	tolua_endmodule(L);
	tolua_cclass(L, "CAITrigger", "CAITrigger", {}, NULL);
	tolua_beginmodule(L, "CAITrigger");
		tolua_variable(L, "m_triggerID", tolua_get_CAITrigger_m_triggerID, tolua_set_CAITrigger_m_triggerID);
		tolua_variable(L, "reference_m_triggerID", tolua_get_CAITrigger_reference_m_triggerID, NULL);
		tolua_variable(L, "m_specificID", tolua_get_CAITrigger_m_specificID, tolua_set_CAITrigger_m_specificID);
		tolua_variable(L, "reference_m_specificID", tolua_get_CAITrigger_reference_m_specificID, NULL);
		tolua_variable(L, "m_triggerCause", tolua_get_CAITrigger_m_triggerCause, NULL);
		tolua_variable(L, "m_flags", tolua_get_CAITrigger_m_flags, tolua_set_CAITrigger_m_flags);
		tolua_variable(L, "reference_m_flags", tolua_get_CAITrigger_reference_m_flags, NULL);
		tolua_variable(L, "m_specific2", tolua_get_CAITrigger_m_specific2, tolua_set_CAITrigger_m_specific2);
		tolua_variable(L, "reference_m_specific2", tolua_get_CAITrigger_reference_m_specific2, NULL);
		tolua_variable(L, "m_specific3", tolua_get_CAITrigger_m_specific3, tolua_set_CAITrigger_m_specific3);
		tolua_variable(L, "reference_m_specific3", tolua_get_CAITrigger_reference_m_specific3, NULL);
		tolua_variable(L, "m_string1", tolua_get_CAITrigger_m_string1, NULL);
		tolua_variable(L, "m_string2", tolua_get_CAITrigger_m_string2, NULL);
		tolua_constant(L, "sizeof", sizeof(CAITrigger));
	tolua_endmodule(L);
	tolua_endmodule(L);
	return 1;
}
